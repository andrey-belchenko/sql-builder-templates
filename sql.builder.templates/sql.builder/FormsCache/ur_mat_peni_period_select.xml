<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_mat_peni_period_select" title="Выбор периодов пени" show-toolbar="1" timestamp="28.12.2023 14:56:55" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms\ur_mat_peni_period_select.xml" elid="280" ord="280" leaf="0" lvl="2" pelid="">
    <field table="m" name="kod_mat" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="63034599" />
    <splitcontainer is-vertical="1" id="54174567">
      <fieldgroup noborder="1" id="53102661">
        <fieldgroup title="Доступные" id="50383931">
          <grid table="a" id="35138174">
            <columns id="33584313">
              <field table="a" name="check1" title="Выбор" controlType="UICheck" rows-limit="100" id="31008081" />
              <field table="a" name="name" title="Период" width="250" controlType="UIText" rows-limit="100" id="61503097" />
            </columns>
          </grid>
        </fieldgroup>
      </fieldgroup>
      <fieldgroup title="Выбранные" id="61800000">
        <grid table="b" id="31554957">
          <columns id="27185681">
            <field table="b" name="kod" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="62977657" />
            <field table="b" name="name" title="Период" width="323" controlType="UIText" rows-limit="100" id="54838742" />
          </columns>
        </grid>
      </fieldgroup>
    </splitcontainer>
    <toolbar id="2523175">
      <uicommand action-type="add-selected" title="Добавить выделенные" id="52679803" />
      <uicommand action-type="remove-selected" title="Убрать выделенные" id="40566166" />
    </toolbar>
  </form>
  <params>
    <param name="p_kod_mat" type="number">
      <const type="number">1936907</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="p_kod_mat" type="number">
        <const type="number">1936907</const>
      </param>
    </params>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="m_has_changes" parname="m_has_changes" />
      <field type="string" name="b_has_changes" parname="b_has_changes" />
      <field type="string" name="a_has_changes" parname="a_has_changes" />
    </fields>
    <table name="m" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" is-ms-upd="1" is-top="1" key-dimension="kod_mat">
      <select-text>
--
select m.kod_mat as kod_mat, /*number*//*key*/
m.is_new as is_new, /*number*/
m.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
m on ur_dogplat_a_d.kod_mat = m.kod_mat--\ur_mat
where
(m.kod_mat = :p_kod_mat )  and (m.kod_mat is not null ) )
--\
union all
(
--
select m.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
m
--\ur_mat
where
(m.kod_mat = :p_kod_mat )  and (m.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
)
m on m.kod_mat = qube.kod_mat--\ur_mat
--\
</select-text>
      <columns>
        <column name="kod_mat" table="m" type="number" title="" ClientVisible="0" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3" />
        <column name="is_new" table="m" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="m" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="m" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
m.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m on ur_dogplat_a_d.kod_mat = m.kod_mat--\ur_mat
where
m.kod_mat is not null )
--\
union all
(
--
select m.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m
--\ur_mat
where
m.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m on m.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat 
(kod_mat 
) 
 values  
(r.kod_mat 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='m' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
) 
 values  
('m' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:kod_mat as kod_mat 
,a.kod_folders 
,a.kod_doc 
,a.kod_ssp 
,a.num_reg 
,a.dat_otv 
,a.kod_ret_isk 
,a.num_delo 
,a.dat_prin 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.dat_otz 
,a.dat_doc 
,a.fio_otz 
,a.kod_subject 
,a.prichina_otz 
,a.sum_gp 
,a.prim 
,a.dat_gp 
,a.kod_sud 
,a.num_pp_gp 
,a.kod_parent 
,a.kodp 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.kod_scan 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.dat_post_mat_pio 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,n4 
,n5 
,n6 
,s2 
,d1 
,n7 
,s1 
,d2 
,s3 
,d3 
,s4 
,d4 
,d5 
,s5 
,n8 
,s6 
,n9 
,s7 
,d6 
,n10 
,s8 
,n11 
,n1 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,d7 
,s9 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,s10 
,s11 
,n28 
,s12 
,d8 
,n29 
,s13 
,d9 
,n30 
,n31 
,d10 
,d11 
,n32 
,d12 
,s14 
) 
 values  
('m' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
,r.kod_folders 
,r.kod_doc 
,r.kod_ssp 
,r.num_reg 
,r.dat_otv 
,r.kod_ret_isk 
,r.num_delo 
,r.dat_prin 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.dat_otz 
,r.dat_doc 
,r.fio_otz 
,r.kod_subject 
,r.prichina_otz 
,r.sum_gp 
,r.prim 
,r.dat_gp 
,r.kod_sud 
,r.num_pp_gp 
,r.kod_parent 
,r.kodp 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.kod_scan 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.dat_post_mat_pio 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='m' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(kod_mat 
) 
= 
 ( select  
:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction action-type="execute-update" call="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="m">
          <columns>
            <column name="kod_mat" type="number" title="" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select m.kod_mat as kod_mat, /*number*//*key*/
m.is_new as is_new, /*number*/
m.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m on ur_dogplat_a_d.kod_mat = m.kod_mat--\ur_mat
where
m.kod_mat is not null )
--\
union all
(
--
select m.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m
--\ur_mat
where
m.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='m' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='m' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
m on m.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="b" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="kod" multi-select-column="" multi-select-target="" update-target="ur_mat_peni_period" key="kod_peni_period" parent-table="m" parent-key="kod_mat" is-ms-upd="1" key-dimension="ur_mat_peni_period">
      <select-text>
--
select b.ym as kod, /*number*/
c.name as name, /*Период*//*string*/
b.is_new as is_new, /*number*/
b.is_not_new as is_not_new, /*number*/
b.kod_peni_period as kod_peni_period, /*number*//*key*/
b.kod_mat as kod_mat/*number*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.ym as ym, /**//*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
)
b
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
c on b.ym = c.ym--\spr_time_ym
where
b.kod_mat = :fk_kod_mat 
order by name--\
</select-text>
      <columns>
        <column name="kod" table="b" type="number" title="" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="ym" temp-col-name="n1">
          <dep-refresh-cmd>
            <root table="b">
              <params>
                <param name="kod_peni_period_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_peni_period_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select c.name as name, /*Период*//*string*/
b.kod_peni_period as kod_peni_period/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.ym as ym/**//*number*/

from (select a.kod_peni_period as kod_peni_period,a.ym as ym  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n1 as ym  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
a
--\(select a.kod_peni_period as kod_peni_period,a.ym as ym  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n1 as ym  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
)
b
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
c on b.ym = c.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="name" table="b" />
          </dependants>
        </column>
        <column name="name" table="c" type="string" title="Период" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_peni_period_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_peni_period_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select c.name as name, /*Период*//*string*/
b.kod_peni_period as kod_peni_period/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.ym as ym/**//*number*/

from (select a.kod_peni_period as kod_peni_period,a.ym as ym  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n1 as ym  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
a
--\(select a.kod_peni_period as kod_peni_period,a.ym as ym  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n1 as ym  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
)
b
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
c on b.ym = c.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="b" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="b" type="number" title="" is-user-editable="1" />
        <column name="kod_peni_period" table="b" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_peni_period" temp-col-name="n2" />
        <column name="kod_mat" table="b" type="number" title="Материалы переданные в суд" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_mat" as="kod_mat" title="" key="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_mat" into="n1">a.kod_mat as kod_mat, /**//*number*//*key*/
</column><column table="a" column="num_reg" as="num_reg" title="Номер иска" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="num_reg" into="s1">a.num_reg as num_reg, /*Номер иска*//*string*/
</column><column table="a" column="name" as="name" title="Иск" key="0" used="1" type="string" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" into="s2">a.name as name/*Иск*//*string*/
</column></select>
                <from>
from <query name="ur_mat" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="num_reg" type="string" title="Номер иска" vid="1" as="num_reg" key="0" sourcetable="./a/a" sourcecolumn="num_reg" used="1">a.num_reg as num_reg, /*Номер иска*//*string*/
</column><call function="||" as="name" title="Иск" key="0" pth="" type="string" used="1" sourcetable="./a/a/kod_doc" sourcecolumn="abbr"><column table="kod_doc" column="abbr">kod_doc.abbr</column><text txtype="func"> || </text><const><text>'  '</text></const><text txtype="func"> || </text><column table="a" column="num_delo">a.num_delo</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Иск*//*string*/
</call></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="us_doc" as="kod_doc" join="left outer" path="./a/a/kod_doc" haskeys="1" used="1">left outer join
(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a/kod_doc" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from><call function="=" type="bool">)
kod_doc on <column table="a" column="kod_doc">a.kod_doc</column><text txtype="func"> = </text><column table="kod_doc" column="kod_doc">kod_doc.kod_doc</column></call>--\us_doc
</query></from>)
a
--\ur_mat
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_mat" as="kod_mat" title="" key="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_mat" as="kod_mat" title="" key="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> ) like lower( </text><const><text>:kod_mat_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_reg" as="num_reg" title="Номер иска" thissrc="num_reg">a.num_reg</column><text txtype="func"> ) like lower( </text><const><text>:num_reg_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Иск" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_mat_filter" type="string" />
                    <param name="num_reg_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_mat" as="kod_mat" title="" key="1" />
                    <column table="a" column="num_reg" as="num_reg" title="Номер иска" />
                    <column table="a" column="name" as="name" title="Иск" />
                  </select>
                  <from>
                    <query name="ur_mat" as="a" title="Материалы переданные в суд" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="kod_mat_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_reg" />
                        <useparam name="num_reg_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_mat_filter" />
                    <useparam name="num_reg_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_mat_filter" type="string">
                  <const>:kod_mat_filter </const>
                </param>
                <param name="num_reg_filter" type="string">
                  <const>:num_reg_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod as kod 
,:kod_peni_period as kod_peni_period 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat_peni_period 
(ym 
,kod_peni_period 
,kod_mat 
) 
 values  
(r.kod 
,r.kod_peni_period 
,r.kod_mat 
) 
 returning  
kod_peni_period into :kod_peni_period; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat_peni_period where kod_peni_period=:kod_peni_period</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='b' 
and 
names=:form_id 
and 
f2=:kod_peni_period; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod as kod 
,:kod_peni_period as kod_peni_period 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
) 
 values  
('b' 
,:form_id 
,:kod_peni_period 
,:row_state_id 
,r.kod 
,r.kod_peni_period 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:kod as kod 
,:kod_peni_period as kod_peni_period 
,:kod_mat as kod_mat 
,a.u_m 
,a.d_m 
 
from ur_mat_peni_period a  where kod_peni_period=:kod_peni_period) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,s1 
,d1 
) 
 values  
('b' 
,:form_id 
,:kod_peni_period 
,:row_state_id 
,r.kod 
,r.kod_peni_period 
,r.kod_mat 
,r.u_m 
,r.d_m 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='b' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat_peni_period set  
(ym 
,kod_peni_period 
,kod_mat 
) 
= 
 ( select  
:kod as kod 
,:kod_peni_period as kod_peni_period 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_peni_period=:kod_peni_period 
;
end;
</update-text>
      <scheme>
        <table name="ur_mat_peni_period" as="b">
          <columns>
            <column name="kod" type="number" title="" visible="0" />
            <column name="name" type="string" title="Период" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_peni_period" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod" type="number" title="" visible="0" />
            <column name="name" type="string" title="Период" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_peni_period" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_peni_period_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_peni_period_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select b.ym as kod, /*number*/
c.name as name, /*Период*//*string*/
b.is_new as is_new, /*number*/
b.is_not_new as is_not_new, /*number*/
b.kod_peni_period as kod_peni_period, /*number*//*key*/
b.kod_mat as kod_mat/*number*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.ym as ym, /**//*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_peni_period as kod_peni_period,a.kod_mat as kod_mat,a.ym as ym,0 as is_new,1 as is_not_new  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n3 as kod_mat,t.n1 as ym,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
a
--\(select a.kod_peni_period as kod_peni_period,a.kod_mat as kod_mat,a.ym as ym,0 as is_new,1 as is_not_new  from ur_mat_peni_period a where not exists (select * from rr_temp t where t.skod ='b' and t.names=:form_id  and a.kod_peni_period=t.f2 ) and   a.kod_peni_period in :kod_peni_period_prm   union all  select t.n2 as kod_peni_period,t.n3 as kod_mat,t.n1 as ym,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='b' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_peni_period_prm )
)
b
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
c on b.ym = c.ym--\spr_time_ym

order by name--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="a" auto-refresh="1" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="check1" multi-select-target="b" update-target="ym_list_vvod" key="ym" is-ms-upd="1" is-top="1">
      <select-text>
--
select null as check1, /*number*/
a.name as name, /*Период*//*string*/
a.ym as ym/*number*//*key*/

from (
--ym_list_vvod
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre

order by ym desc)
a
--\spr_time_ym
where
a.ym &lt;= ( to_number(to_char( ( sysdate )  ,'YYYYMM'))/100 ) 
order by ym desc)
a
--\ym_list_vvod

order by name desc--\
</select-text>
      <columns>
        <column name="check1" table="a" type="number" title="Выбор" ColumnEditable="1" is-user-editable="1" is-updateable-ext="1" is-refreshed="1" update-target="check1" temp-col-name="n1" />
        <column name="name" table="a" type="string" title="Период" ColumnEditable="0" is-refreshed="1" />
        <column name="ym" table="a" type="number" title="" is-user-editable="1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
 
from dual ) 
 
loop 
insert into ym_list_vvod 
() 
 values  
() 
 returning  
ym into :ym; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ym_list_vvod where ym=:ym</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='a' 
and 
names=:form_id 
and 
f2=:ym; 
if :row_state_id=1  then 
for r in  
 ( select  
:check1 as check1 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('a' 
,:form_id 
,:ym 
,:row_state_id 
,r.check1 
); 
end loop; 
else 
for r in  
 ( select  
:check1 as check1 
 
from ym_list_vvod a  where ym=:ym) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('a' 
,:form_id 
,:ym 
,:row_state_id 
,r.check1 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='a' and names=:form_id</clear-temp-text>
      <update-text>begin
update ym_list_vvod set  
() 
= 
 ( select  
 
from dual ) 
 
where 
ym=:ym 
;
end;
</update-text>
      <scheme>
        <table name="ym_list_vvod" as="a">
          <columns>
            <column name="check1" type="number" title="Выбор" />
            <column name="name" type="string" title="Период" />
            <column name="ym" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="check1" type="number" title="Выбор" />
            <column name="name" type="string" title="Период" />
            <column name="ym" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
    </table>
  </dataset>
</root>