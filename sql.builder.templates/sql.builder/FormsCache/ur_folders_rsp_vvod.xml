<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_folders_rsp_vvod" title="Работа судебного пристава" security-id="asuse_ur_isp_rsp" with-behavior="0" timestamp="28.12.2023 14:55:18" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms.xml" elid="265" ord="265" leaf="0" lvl="2" pelid="">
    <field table="ur_folders" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="18493741" />
    <field table="ur_folders" name="vvod" title="Способ учета задолженности" controlType="UICombo" rows-limit="100" id="6657953" />
    <field table="ur_folders" name="kod_sdp" title="" controlType="UICombo" rows-limit="100" id="45926619" />
    <field table="ur_folders" name="not_vvod" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="24638314" />
    <field table="ur_folders" name="kod_mat_main" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="19786603" />
    <field table="f10" name="val" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="14429708" />
    <splitcontainer id="19363697">
      <fieldgroup title="Материалы переданные в ПСП" id="14509583">
        <grid table="ur_mat" show-toolbar="1" id="36993710">
          <toolbar id="46054125">
            <uicommand name="upech_doc" editable="item_is_not_new" title="Печать отчётов" id="14797200">
              <useparam name="cur_kod_mat" id="66406668" />
              <const id="29892483">13</const>
              <useparam name="kod_folders" id="40797751" />
            </uicommand>
          </toolbar>
          <columns id="37417938">
            <field table="ur_mat" name="kod_mat" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="24949564" />
            <field table="ur_mat" name="dat_doc" title="Дата направл. ПСП" controlType="UIDate" rows-limit="100" id="21673806" />
            <field table="ur_mat" name="kod_ssp" title="Подразделение судебных приставов" controlType="UICombo" rows-limit="100" id="13982811" />
            <field table="ur_mat" name="num_delo" title="Номер постановления" controlType="UIText" rows-limit="100" id="19031625" />
            <field table="ur_mat" name="kod_doc" title="Документ" controlType="UICombo" rows-limit="100" id="41180110" />
            <field table="ur_mat" name="kod_subject" title="Предмет" controlType="UICombo" rows-limit="100" id="46358513" />
            <band title="Задолженность" id="64739034">
              <field table="ur_mat" name="ur_hist_mat_ostatok_zadol_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="29867911" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_osnreal" title="Осн. реал." controlType="UIText" edit-mask="N2" rows-limit="100" id="12882614" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="15585908" />
              <field table="ur_mat" name="mat_peni_period_str" title="Период пени" controlType="UIText" rows-limit="100" id="25838088" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_ogr" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="34507911" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_gp_otv" title="Гос. пошлина" controlType="UIText" edit-mask="N2" rows-limit="100" id="27522647" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_astrent" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" id="1704622" />
              <field table="ur_mat" name="ur_hist_mat_ostatok_sud_izd" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="23555347" />
            </band>
            <band title="Оплата по ИП" id="43867394">
              <field table="ur_mat" name="ur_isp_opl_after_isp_list_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="8616789" />
              <field table="ur_mat" name="ur_isp_opl_osnreal_vvod" title="Осн. реал." controlType="UIText" edit-mask="N2" rows-limit="100" id="45370271" />
              <field table="ur_mat" name="ur_isp_opl_peni_vvod" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="5359425" />
              <field table="ur_mat" name="ur_isp_opl_ogr_vvod" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="22240826" />
              <field table="ur_mat" name="ur_isp_opl_gp_vvod" title="Гос. пошлина" controlType="UIText" edit-mask="N2" rows-limit="100" id="63236758" />
              <field table="ur_mat" name="ur_isp_opl_astrent_vvod" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" id="62001141" />
              <field table="ur_mat" name="ur_isp_opl_sud_izd_vvod" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="13704964" />
            </band>
            <band title="Остаток задолженности" id="30283974">
              <field table="ur_mat" name="ur_isp_ostatok_zadol_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="43270526" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_osnreal" title="Осн. реал." controlType="UIText" edit-mask="N2" rows-limit="100" id="12756849" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="64966612" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_ogr" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="22212331" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_gp" title="Гос. пошлина" controlType="UIText" edit-mask="N2" rows-limit="100" id="50305230" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_astrent" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" id="43234018" />
              <field table="ur_mat" name="ur_isp_ostatok_zadol_sud_izd" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="44423518" />
            </band>
            <field table="ur_mat" name="dat_otz" title="Дата возврата" controlType="UIDate" rows-limit="100" id="61546783" />
            <field table="ur_mat" name="kod_ret_isk" title="Причина возврата документа" controlType="UICombo" rows-limit="100" id="12480178" />
            <field table="ur_mat" name="num_otz" title="№ документа возврата" controlType="UIText" rows-limit="100" id="25995408" />
            <field table="ur_mat" name="fio_otz" title="За чьей подписью возврат" controlType="UIText" rows-limit="100" id="6659367" />
            <field table="ur_mat" name="prichina_otz" title="Основание для возврата" controlType="UIText" rows-limit="100" id="49897843" />
            <field table="ur_mat" name="prim" title="Примечание" controlType="UITextEx" rows-limit="100" id="39734404" />
            <field table="ur_mat" name="adres" title="Адрес" controlType="UIText" rows-limit="100" id="11900663" />
            <field table="ur_mat" name="phone" title="Телефон секретариата" controlType="UIText" rows-limit="100" id="8748666" />
            <field table="ur_mat" name="kr_dog_name" title="Договор" controlType="UIText" rows-limit="100" id="13159755" />
            <field table="ur_mat" name="ur_dp_ym_min_priz" title="Период задолж. с" controlType="UIText" format="F2" edit-mask="F2" rows-limit="100" id="55879097" />
            <field table="ur_mat" name="ur_dp_ym_max_priz" title="Период задолж. по" controlType="UIText" format="F2" edit-mask="F2" rows-limit="100" id="63861153" />
            <field table="ur_mat" name="kod_scan" title="Файл" controlType="UIFile" rows-limit="100" id="3986929" />
            <field table="ur_mat" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="59214376" />
          </columns>
        </grid>
      </fieldgroup>
      <fieldgroup title="История рассмотрения" id="6696377">
        <grid table="ur_hist_mat" show-toolbar="1" id="17853216">
          <columns id="37056797">
            <field table="ur_hist_mat" name="empty_vld" title="Указания" controlType="UITextEx" rows-limit="100" id="30810445" />
            <field table="ur_hist_mat" name="kod_mat" title="Материалы переданные в суд" controlType="UICombo" rows-limit="100" id="43215802" />
            <field table="ur_hist_mat" name="kod_zased" title="Судебный пристав" controlType="UICombo" rows-limit="100" id="60362057">
              <listquery id="65994060">
                <query name="us_zased_by_ssp" id="37965115">
                  <withparams id="41234882">
                    <useparam name="kod_ssp" id="40030371" />
                  </withparams>
                </query>
              </listquery>
            </field>
            <field table="ur_hist_mat" name="phone" title="Телефон" controlType="UIText" rows-limit="100" id="8024281" />
            <field table="ur_hist_mat" name="dat_post" title="Дата вынесения постановления" controlType="UIDate" rows-limit="100" id="58735889" />
            <field table="ur_hist_mat" name="dat_vz" title="Дата поступления документа взыскателю" controlType="UIDate" rows-limit="100" id="35526859" />
            <field table="ur_hist_mat" name="result_kod_post" title="Постановление" controlType="UICombo" rows-limit="100" width-perc="50" id="4068797">
              <listquery id="56380023">
                <query name="us_post_list" id="21323053">
                  <withparams id="25726421">
                    <useparam name="folder_kod_sdp" id="20744683" />
                  </withparams>
                </query>
              </listquery>
            </field>
            <field table="ur_hist_mat" name="kod_result" title="Результат постановления" controlType="UICombo" rows-limit="0" width-perc="50" id="35351208" />
            <field table="ur_hist_mat" name="prim" title="Примечание" controlType="UITextEx" rows-limit="100" id="47535699" />
            <field table="ur_hist_mat" name="kod_scan" title="Файл" controlType="UIFile" rows-limit="100" id="48248434" />
          </columns>
        </grid>
      </fieldgroup>
    </splitcontainer>
  </form>
  <params>
    <param name="kod_folders" type="number" />
  </params>
  <dataset>
    <params>
      <param name="kod_folders" type="number">
        <const exclude="1">232</const>
      </param>
    </params>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_folders_has_changes" parname="ur_folders_has_changes" />
      <field type="string" name="ur_mat_has_changes" parname="ur_mat_has_changes" />
      <field type="string" name="ur_hist_mat_has_changes" parname="ur_hist_mat_has_changes" />
      <field type="string" name="f10_has_changes" parname="f10_has_changes" />
    </fields>
    <table name="ur_folders" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_folders" key="kod_folders" is-ms-upd="1" is-top="1" key-dimension="kod_folders_isp">
      <select-text>
--
select ur_folders.kodp as kodp, /*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.kod_sdp as kod_sdp, /*number*/
ur_folders.not_vvod as not_vvod, /*number*/
kod_mat.kod_mat as kod_mat_main, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
a.kod_isp as kod_isp, /*number*/
a.vvod as vvod, /**//*number*/
kod_isp.kodp as kodp_new_val, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
0 as is_new, /*number*/
1 as is_not_new, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on ur_folders.kod_isp = kod_isp.kod_isp--\ur_isp
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat on kod_isp.kod_hist_mat = kod_hist_mat.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat on kod_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
where
ur_folders.kod_folders = :kod_folders --\
</select-text>
      <columns>
        <column name="kodp" table="ur_folders" type="number" title="Абонент" parname="ur_folders_kodp" ColumnVisible="0" ColumnMandatory="1" NewVal="kodp_new_val" is-updateable="1" is-updateable-ext="1" update-target="kodp" temp-col-name="n2">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
kod_isp.kodp as kodp_new_val, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp_x_n" table="ur_folders" />
            <dependant name="kodp_new_val" table="ur_folders" />
          </dependants>
        </column>
        <column name="vvod" table="ur_folders" type="number" title="Способ учета задолженности" parname="is_vvod" ColumnVisible="0" ColumnDefault="ur_folders_vvod_default" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="vvod" temp-col-name="n10">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.not_vvod as not_vvod, /*number*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="not_vvod" table="ur_folders" />
            <dependant name="vvod_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kod_sdp" table="ur_folders" type="number" title="" parname="folder_kod_sdp" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="kod_sdp" temp-col-name="n5">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.not_vvod as not_vvod, /*number*/
kod_mat.kod_mat as kod_mat_main, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
a.kod_isp as kod_isp, /*number*/
a.vvod as vvod, /**//*number*/
kod_isp.kodp as kodp_new_val, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on ur_folders.kod_isp = kod_isp.kod_isp--\ur_isp
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat on kod_isp.kod_hist_mat = kod_hist_mat.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat on kod_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="not_vvod" table="ur_folders" />
            <dependant name="kod_mat_main" table="ur_folders" />
            <dependant name="kodp_x_n" table="ur_folders" />
            <dependant name="vvod_x_n" table="ur_folders" />
            <dependant name="kod_sdp_x_n" table="ur_folders" />
            <dependant name="kodp_new_val" table="ur_folders" />
          </dependants>
        </column>
        <column name="not_vvod" table="ur_folders" type="number" title="" parname="is_not_vvod" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.not_vvod as not_vvod, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat_main" table="kod_mat" type="number" title="" parname="kod_mat_main" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat.kod_mat as kod_mat_main, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kod_isp as kod_isp,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n8 as kod_isp,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_isp as kod_isp,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n8 as kod_isp,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on ur_folders.kod_isp = kod_isp.kod_isp--\ur_isp
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat on kod_isp.kod_hist_mat = kod_hist_mat.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat on kod_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_x_n" table="ur_folders.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="vvod_x_n" table="ur_folders.vvod" type="string" title="Способ учета задолженности" text-source-for="vvod" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp_x_n" table="ur_folders.kod_sdp" type="string" title="Договор" text-source-for="kod_sdp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_new_val" table="ur_folders" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
kod_isp.kodp as kodp_new_val, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="kod_folders" table="ur_folders" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_sdp as kod_sdp 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_folders 
(kodp 
,vvod 
,kod_sdp 
,kod_folders 
) 
 values  
(r.kodp 
,r.vvod 
,r.kod_sdp 
,r.kod_folders 
) 
 returning  
kod_folders into :kod_folders; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_folders where kod_folders=:kod_folders</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_folders' 
and 
names=:form_id 
and 
f2=:kod_folders; 
if :row_state_id=1  then 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_sdp as kod_sdp 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n10 
,n5 
,n1 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.vvod 
,r.kod_sdp 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_sdp as kod_sdp 
,:kod_folders as kod_folders 
,a.kod_emp 
,a.kod_vi 
,a.dat_create 
,a.zadol 
,a.u_m 
,a.d_m 
,a.kod_parent 
,a.kod_isp 
,a.tep_el 
,a.dat_finish 
,a.num_doc 
,a.kod_podr 
,a.tep_el_byt 
,a.kodp_new 
,a.kodps 
,a.namep 
,a.kod_category 
,a.kod_dog 
 
from ur_folders a  where kod_folders=:kod_folders) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n10 
,n5 
,n1 
,n3 
,n4 
,d1 
,n6 
,s1 
,d2 
,n7 
,n8 
,n9 
,d3 
,s2 
,n11 
,n12 
,n13 
,s3 
,s4 
,n14 
,n15 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.vvod 
,r.kod_sdp 
,r.kod_folders 
,r.kod_emp 
,r.kod_vi 
,r.dat_create 
,r.zadol 
,r.u_m 
,r.d_m 
,r.kod_parent 
,r.kod_isp 
,r.tep_el 
,r.dat_finish 
,r.num_doc 
,r.kod_podr 
,r.tep_el_byt 
,r.kodp_new 
,r.kodps 
,r.namep 
,r.kod_category 
,r.kod_dog 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_folders' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_folders set  
(kodp 
,vvod 
,kod_sdp 
,kod_folders 
) 
= 
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_sdp as kod_sdp 
,:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_folders=:kod_folders 
;
end;
</update-text>
      <events>
        <useaction event-name="object-save" action-type="execute-update" call="ur_folders_sync_dat_arh">
          <column table="this" column="kod_folders" />
        </useaction>
      </events>
      <scheme>
        <table name="ur_folders_isp" as="ur_folders">
          <columns>
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="vvod" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="not_vvod" type="number" title="" visible="0" />
            <column name="kod_mat_main" type="number" title="" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" visible="0" />
            <column name="vvod_x_n" type="string" title="Способ учета задолженности" visible="0" />
            <column name="kod_sdp_x_n" type="string" title="Договор" visible="0" />
            <column name="kodp_new_val" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_folders_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_folders_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_folders.kodp as kodp, /*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.kod_sdp as kod_sdp, /*number*/
ur_folders.not_vvod as not_vvod, /*number*/
kod_mat.kod_mat as kod_mat_main, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
a.kod_isp as kod_isp, /*number*/
a.vvod as vvod, /**//*number*/
kod_isp.kodp as kodp_new_val, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp,a.vvod as vvod,0 as is_new,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp,t.n10 as vvod,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_sdp as kod_sdp,a.kod_isp as kod_isp,a.vvod as vvod,0 as is_new,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n5 as kod_sdp,t.n8 as kod_isp,t.n10 as vvod,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
where
a.kod_sdp = 2)
ur_folders
--\ur_folders_isp
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on ur_folders.kod_isp = kod_isp.kod_isp--\ur_isp
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat on kod_isp.kod_hist_mat = kod_hist_mat.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat on kod_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" key="kod_mat" parent-table="ur_folders" parent-key="kod_folders" is-ms-upd="1" key-dimension="kod_mat_isp">
      <select-text>
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.dat_doc as dat_doc, /*Дата направл. ПСП*//*date*/
ur_mat.kod_ssp as kod_ssp, /*number*/
ur_mat.num_delo as num_delo, /*Номер постановления*//*string*/
ur_mat.kod_doc as kod_doc, /*number*/
ur_mat.kod_subject as kod_subject, /*number*/
qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal, /*Осн. реал.*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni, /*Проценты (пени)*//*number*/
qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv, /*Гос. пошлина*//*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent, /*Астрент*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd, /*Судебные издержки*//*number*/
qube.ur_isp_opl_after_isp_list_all1 as ur_isp_opl_after_isp_list_all, /*Всего*//*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod, /*Осн. реал.*//*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod, /*Проценты (пени)*//*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod, /*Гос. пошлина*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod, /*Астрент*//*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod, /*Судебные издержки*//*number*/
qube.ur_isp_ostatok_zadol_all1 as ur_isp_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_isp_ostatok_zadol_osnreal1 as ur_isp_ostatok_zadol_osnreal, /*Осн. реал.*//*number*/
qube.ur_isp_ostatok_zadol_peni1 as ur_isp_ostatok_zadol_peni, /*Проценты (пени)*//*number*/
qube.ur_isp_ostatok_zadol_ogr1 as ur_isp_ostatok_zadol_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_ostatok_zadol_gp1 as ur_isp_ostatok_zadol_gp, /*Гос. пошлина*//*number*/
qube.ur_isp_ostatok_zadol_astrent1 as ur_isp_ostatok_zadol_astrent, /*Астрент*//*number*/
qube.ur_isp_ostatok_zadol_sud_izd1 as ur_isp_ostatok_zadol_sud_izd, /*Судебные издержки*//*number*/
ur_mat.dat_otz as dat_otz, /*Дата возврата*//*date*/
ur_mat.kod_ret_isk as kod_ret_isk, /*number*/
ur_mat.num_otz as num_otz, /*№ документа возврата*//*string*/
ur_mat.fio_otz as fio_otz, /*За чьей подписью возврат*//*string*/
ur_mat.prichina_otz as prichina_otz, /*Основание для возврата*//*string*/
ur_mat.prim as prim, /*Примечание*//*string*/
kod_ssp.adres as adres, /*Адрес*//*string*/
kod_ssp.phone as phone, /*Телефон секретариата*//*string*/
qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz, /*Период задолж. с*//*number*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz, /*Период задолж. по*//*number*/
ur_mat.kod_scan as kod_scan, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
kod_ssp_x_n.name as kod_ssp_x_n, /*Подразделение судебных приставов*//*string*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
kod_ret_isk_x_n.name as kod_ret_isk_x_n, /*Причина возврата документа*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.kod_folders as kod_folders/*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1, /*Остаток задолженности (Всего)*//*number*/
sum(qube.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Осн. реал.*//*number*/
sum(qube.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Проценты (пени)*//*number*/
max( vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 ) )  as mat_peni_period_str1, /*Период пени*//*string*/
sum(qube.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Гос. пошлина*//*number*/
sum(qube.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Астрент*//*number*/
sum(qube.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Судебные издержки*//*number*/
sum( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_opl_after_isp_list_all1, /*Оплачено всего после выдачи исп листа (ручной ввод, карточка ПИР, вкладка ИЛ)*//*number*/
sum(qube.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*Осн. реал.*//*number*/
sum(qube.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*Проценты (пени)*//*number*/
sum(qube.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*Гос. пошлина*//*number*/
sum(qube.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*Астрент*//*number*/
sum(qube.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*Судебные издержки*//*number*/
sum( nvl( ( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  ,0)  -nvl( ( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  ,0) )  as ur_isp_ostatok_zadol_all1, /*Остаток задолженности Всего (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_osnreal1 ,0)  -nvl( qube.ur_isp_opl_osnreal_vvod1 ,0) )  as ur_isp_ostatok_zadol_osnreal1, /*Остаток задолженности осн. реализация (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_peni1 ,0)  -nvl( qube.ur_isp_opl_peni_vvod1 ,0) )  as ur_isp_ostatok_zadol_peni1, /*Остаток задолженности пени (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_ogr1 ,0)  -nvl( qube.ur_isp_opl_ogr_vvod1 ,0) )  as ur_isp_ostatok_zadol_ogr1, /*Остаток задолженности ограничение режима (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_gp_otv1 ,0)  -nvl( qube.ur_isp_opl_gp_vvod1 ,0) )  as ur_isp_ostatok_zadol_gp1, /*Остаток задолженности ГП (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_astrent1 ,0)  -nvl( qube.ur_isp_opl_astrent_vvod1 ,0) )  as ur_isp_ostatok_zadol_astrent1, /*Остаток задолженности астрент (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_sud_izd1 ,0)  -nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_ostatok_zadol_sud_izd1, /*Остаток задолженности судебные издержки (Карточка ПИР, вкладка ИЛ)*//*number*/
stragg_dist(qube.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
min(qube.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период задолж. с*//*number*/
max(qube.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1/*Период задолж. по*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
max(un.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
min(un.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
sum(un.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
sum(un.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
sum(un.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
sum(un.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
sum(un.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*number*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
kr_dogovor.name as kr_dog_name1, /*Договор*//*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = kod_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
ur_dogplat.ym_max_priz as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
ur_dogplat.ym_min_priz as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_dogplat_a_d.kod_dogplat as kod_dogplat_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat/*number*//*key*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = ur_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
ur_dogplat_a_d.kod_dogplat, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_min_priz, /*Период начисления с (призн.)*//*number*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_max_priz/*Период начисления по (призн.)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat on ur_dogplat.kod_dogplat = dims.kod_dogplat_prm--\ur_dogplat
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
ur_hist_mat_dec.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec.ostatok_astrent as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
ur_hist_mat_dec.ostatok_gp_otv as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
ur_hist_mat_dec.ostatok_ogr as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
ur_hist_mat_dec.ostatok_osnreal as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
ur_hist_mat_dec.ostatok_peni as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
ur_hist_mat_dec.ostatok_sud_izd as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
ur_hist_mat_dec.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod, /*number*/
a.opl_astrent_vvod as opl_astrent_vvod, /*number*/
a.opl_gp_vvod as opl_gp_vvod, /*number*/
a.opl_ogr_vvod as opl_ogr_vvod, /*number*/
a.opl_peni_vvod as opl_peni_vvod, /*number*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
ur_mat_peni_period.name as mat_peni_period_ym1/*Период*//*string*/

from (
--
select ur_mat_peni_period_a_d.kod_peni_period as kod_peni_period_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d on ur_mat_peni_period_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
kod_hist_mat_dec_a_d on kod_hist_mat_dec_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = kod_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
(ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
ur_mat_peni_period_a_d.kod_peni_period, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period on ur_mat_peni_period.kod_peni_period = dims.kod_peni_period_prm--\ur_mat_peni_period
)
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_doc as kod_doc, /*number*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_ret_isk as kod_ret_isk, /*number*/
a.num_otz as num_otz, /*№ документа возврата*//*string*/
a.dat_otz as dat_otz, /*Дата возврата*//*date*/
a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
a.fio_otz as fio_otz, /*За чьей подписью возврат*//*string*/
a.kod_subject as kod_subject, /*number*/
a.prichina_otz as prichina_otz, /*Основание для возврата*//*string*/
a.prim as prim, /*Примечание*//*string*/
a.kod_scan as kod_scan, /*number*/
kod_folders.kod_sdp as kod_sdp, /*number*/
0 as is_new, /*number*/
1 as is_not_new, /*number*/
a.kod_mat as kod_mat_isp, /*number*//*key*/
a.num_delo as num_delo/*Номер дела*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--uk_ret_isk
select a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
a.name as name/*Причина возврата документа*//*string*/

from uk_ret_isk
a
--\uk_ret_isk
)
kod_ret_isk_x_n on ur_mat.kod_ret_isk = kod_ret_isk_x_n.kod_ret_isk--\uk_ret_isk
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name/*Служба судебных приставов*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp_x_n on ur_mat.kod_ssp = kod_ssp_x_n.kod_ssp--\us_ssp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.adres as adres, /*Адрес*//*string*/
a.phone as phone/*Телефон секретариата*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</select-text>
      <columns>
        <column name="kod_mat" table="ur_mat" type="number" title="" parname="cur_kod_mat" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3" />
        <column name="dat_doc" table="ur_mat" type="date" title="Дата направл. ПСП" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="dat_doc" temp-col-name="d5" />
        <column name="kod_ssp" table="ur_mat" type="number" title="Подразделение судебных приставов" parname="kod_ssp" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_ssp" temp-col-name="n6">
          <sel-list-compiled>
            <root>
              <query order="name" class="1" title="Подразделение судебных приставов" timestamp="04.12.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_ssp.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="name">name</column>
                </order>
                <select>--a
select <column table="a" column="kod_ssp" type="number" key="1" as="kod_ssp" sourcetable="./a" sourcecolumn="kod_ssp" used="1" into="n1">a.kod_ssp as kod_ssp, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Служба судебных приставов" as="name" sourcetable="./a" sourcecolumn="name" key="0" used="1" into="s1">a.name as name, /*Служба судебных приставов*//*string*/
</column><column table="a" column="adres" type="string" title="Адрес" as="adres" sourcetable="./a" sourcecolumn="adres" key="0" used="1" into="s2">a.adres as adres, /*Адрес*//*string*/
</column><column table="a" column="phone" type="string" title="Телефон секретариата" as="phone" sourcetable="./a" sourcecolumn="phone" key="0" used="1" into="s3">a.phone as phone, /*Телефон секретариата*//*string*/
</column><column table="a" column="pr_active" type="number" as="pr_active" sourcetable="./a" sourcecolumn="pr_active" key="0" used="1" into="n2">a.pr_active as pr_active, /*number*/
</column><column table="a" column="is_new" type="number" sys="1" as="is_new" sourcetable="./a" sourcecolumn="is_new" key="0" used="1" into="n3">0 as is_new, /*number*/
</column><column table="a" column="is_not_new" type="number" sys="1" as="is_not_new" sourcetable="./a" sourcecolumn="is_not_new" key="0" used="1" into="n4">1 as is_not_new/*number*/
</column></select>
                <from>
from <table name="us_ssp" as="a" title="Подразделение судебных приставов" used="1">us_ssp
a
--\us_ssp
</table></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_ssp" type="number" key="1" as="kod_ssp" sourcetable="./a" sourcecolumn="kod_ssp" thissrc="kod_ssp">a.kod_ssp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_ssp" type="number" key="1" as="kod_ssp" sourcetable="./a" sourcecolumn="kod_ssp" thissrc="kod_ssp">a.kod_ssp</column><text txtype="func"> ) like lower( </text><const><text>:kod_ssp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" type="string" title="Служба судебных приставов" as="name" sourcetable="./a" sourcecolumn="name" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="adres" type="string" title="Адрес" as="adres" sourcetable="./a" sourcecolumn="adres" thissrc="adres">a.adres</column><text txtype="func"> ) like lower( </text><const><text>:adres_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="phone" type="string" title="Телефон секретариата" as="phone" sourcetable="./a" sourcecolumn="phone" thissrc="phone">a.phone</column><text txtype="func"> ) like lower( </text><const><text>:phone_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="pr_active" type="number" as="pr_active" sourcetable="./a" sourcecolumn="pr_active" thissrc="pr_active">a.pr_active</column><text txtype="func"> ) like lower( </text><const><text>:pr_active_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="is_new" type="number" sys="1" as="is_new" sourcetable="./a" sourcecolumn="is_new" thissrc="is_new">0</column><text txtype="func"> ) like lower( </text><const><text>:is_new_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="is_not_new" type="number" sys="1" as="is_not_new" sourcetable="./a" sourcecolumn="is_not_new" thissrc="is_not_new">1</column><text txtype="func"> ) like lower( </text><const><text>:is_not_new_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by name</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="name" class="1" title="Подразделение судебных приставов" timestamp="04.12.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_ssp.xml" haskeys="1" as="a">
              <queries>
                <query order="name" class="1" title="Подразделение судебных приставов" timestamp="04.12.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_ssp.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_ssp_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="adres_filter" type="string" />
                    <param name="phone_filter" type="string" />
                    <param name="pr_active_filter" type="string" />
                    <param name="is_new_filter" type="string" />
                    <param name="is_not_new_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_ssp" type="number" key="1" as="kod_ssp" />
                    <column table="a" column="name" type="string" title="Служба судебных приставов" as="name" />
                    <column table="a" column="adres" type="string" title="Адрес" as="adres" />
                    <column table="a" column="phone" type="string" title="Телефон секретариата" as="phone" />
                    <column table="a" column="pr_active" type="number" as="pr_active" />
                    <column table="a" column="is_new" type="number" sys="1" as="is_new" />
                    <column table="a" column="is_not_new" type="number" sys="1" as="is_not_new" />
                  </select>
                  <from>
                    <table name="us_ssp" as="a" title="Подразделение судебных приставов" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_ssp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_ssp" />
                        <useparam name="kod_ssp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="adres" />
                        <useparam name="adres_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="phone" />
                        <useparam name="phone_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="pr_active" />
                        <useparam name="pr_active_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="is_new" />
                        <useparam name="is_new_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="is_not_new" />
                        <useparam name="is_not_new_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="name" />
                  </order>
                  <order>
                    <column column="name" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_ssp_filter" />
                    <useparam name="name_filter" />
                    <useparam name="adres_filter" />
                    <useparam name="phone_filter" />
                    <useparam name="pr_active_filter" />
                    <useparam name="is_new_filter" />
                    <useparam name="is_not_new_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_ssp_filter" type="string">
                  <const>:kod_ssp_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="adres_filter" type="string">
                  <const>:adres_filter </const>
                </param>
                <param name="phone_filter" type="string">
                  <const>:phone_filter </const>
                </param>
                <param name="pr_active_filter" type="string">
                  <const>:pr_active_filter </const>
                </param>
                <param name="is_new_filter" type="string">
                  <const>:is_new_filter </const>
                </param>
                <param name="is_not_new_filter" type="string">
                  <const>:is_not_new_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ssp.adres as adres, /*Адрес*//*string*/
kod_ssp.phone as phone, /*Телефон секретариата*//*string*/
kod_ssp_x_n.name as kod_ssp_x_n, /*Подразделение судебных приставов*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name/*Служба судебных приставов*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp_x_n on ur_mat.kod_ssp = kod_ssp_x_n.kod_ssp--\us_ssp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.adres as adres, /*Адрес*//*string*/
a.phone as phone/*Телефон секретариата*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="adres" table="ur_mat" />
            <dependant name="phone" table="ur_mat" />
            <dependant name="kod_ssp_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="num_delo" table="ur_mat" type="string" title="Номер постановления" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s1" />
        <column name="kod_doc" table="ur_mat" type="number" title="Документ" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_doc" temp-col-name="n5">
          <sel-list-compiled>
            <root>
              <query class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" elid="2635" ord="2635" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_doc" into="n1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" used="1" sourcetable="./a/a" sourcecolumn="abbr" into="s1">a.abbr as abbr, /*Аббревиатура*//*string*/
</column><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name" into="s2">a.name as name/*Вид документа*//*string*/
</column></select>
                <from>
from <query name="us_doc" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*/
</column><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name, /*Вид документа*//*string*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from>)
a
--\us_doc
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp">a.kod_sdp</column><text txtype="func"> in </text><const><text>:kod_sdp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" thissrc="kod_doc">a.kod_doc</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" thissrc="kod_doc">a.kod_doc</column><text txtype="func"> ) like lower( </text><const><text>:kod_doc_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" thissrc="abbr">a.abbr</column><text txtype="func"> ) like lower( </text><const><text>:abbr_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" elid="2635" ord="2635" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" elid="2635" ord="2635" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kod_sdp" type="number" column="kod_sdp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_doc_filter" type="string" />
                    <param name="abbr_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" />
                    <column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" />
                    <column table="a" column="name" type="string" title="Вид документа" as="name" key="0" />
                  </select>
                  <from>
                    <query name="us_doc" as="a" title="Документ" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="in" optional="1">
                          <column table="a" column="kod_sdp" />
                          <useparam name="kod_sdp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_doc" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_doc" />
                        <useparam name="kod_doc_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="abbr" />
                        <useparam name="abbr_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kod_sdp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_doc_filter" />
                    <useparam name="abbr_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_sdp" type="number" column="kod_sdp">
                  <const>:kod_sdp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_doc_filter" type="string">
                  <const>:kod_doc_filter </const>
                </param>
                <param name="abbr_filter" type="string">
                  <const>:abbr_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kod_sdp" type="number" column="kod_sdp" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_doc_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="kod_subject" table="ur_mat" type="number" title="Предмет" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_subject" temp-col-name="n8">
          <sel-list-compiled>
            <root>
              <query class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" elid="3024" ord="3024" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_subject" as="kod_subject" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_subject" into="n1">a.kod_subject as kod_subject, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Предмет иска" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Предмет иска*//*string*/
</column></select>
                <from>
from <query name="us_subject" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_subject
select <column table="a" column="kod_subject" type="number" key="1" as="kod_subject" used="1" sourcetable="./a/a" sourcecolumn="kod_subject">a.kod_subject as kod_subject, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Предмет иска" vid="1" as="name" used="1" sourcetable="./a/a" sourcecolumn="name" key="0">a.name as name/*Предмет иска*//*string*/
</column></select><from>
from <table name="us_subject" as="a" title="Предмет" used="1">us_subject
a
--\us_subject
</table></from>)
a
--\us_subject
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_subject" as="kod_subject" title="" key="1" thissrc="kod_subject">a.kod_subject</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_subject" as="kod_subject" title="" key="1" thissrc="kod_subject">a.kod_subject</column><text txtype="func"> ) like lower( </text><const><text>:kod_subject_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Предмет иска" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" elid="3024" ord="3024" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" elid="3024" ord="3024" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_subject_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_subject" as="kod_subject" title="" key="1" />
                    <column table="a" column="name" as="name" title="Предмет иска" />
                  </select>
                  <from>
                    <query name="us_subject" as="a" title="Предмет" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_subject" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_subject" />
                        <useparam name="kod_subject_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_subject_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_subject_filter" type="string">
                  <const>:kod_subject_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_subject as kod_subject, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_subject as kod_subject,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n8 as kod_subject,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_subject as kod_subject,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n8 as kod_subject,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_subject_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="ur_hist_mat_ostatok_zadol_all" table="ur_mat" type="number" title="Всего" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1/*Остаток задолженности (Всего)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec.sud_izd_dubl as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_osnreal" table="ur_mat" type="number" title="Осн. реал." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal, /*Осн. реал.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1/*Осн. реал.*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1/*Остаток задолженности по осн. реал*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1/*Остаток задолженности по осн. реал*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1/*Остаток задолженности по осн. реал*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_osnreal as ur_hist_mat_ostatok_osnreal1/*Остаток задолженности по осн. реал*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_osnreal1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_peni" table="ur_mat" type="number" title="Проценты (пени)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni, /*Проценты (пени)*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1/*Проценты (пени)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1/*Остаток задолженности по пени*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1/*Остаток задолженности по пени*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1/*Остаток задолженности по пени*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_peni as ur_hist_mat_ostatok_peni1/*Остаток задолженности по пени*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_peni1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="mat_peni_period_str" table="ur_mat" type="string" title="Период пени" ColumnVisible="is_customer10_flag" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
max( vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 ) )  as mat_peni_period_str1/*Период пени*//*string*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1/*Период*//*string*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_mat_peni_period.name as mat_peni_period_ym1/*Период*//*string*/

from (
--
select ur_mat_peni_period_a_d.kod_peni_period as kod_peni_period_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d on ur_mat_peni_period_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
kod_hist_mat_dec_a_d on kod_hist_mat_dec_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = kod_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_mat_peni_period_a_d.kod_peni_period, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period on ur_mat_peni_period.kod_peni_period = dims.kod_peni_period_prm--\ur_mat_peni_period
)
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_ogr" table="ur_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1/*Расх. за введ. огр. реж. энергопотр.*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1/*Остаток задолженности по расходам на ограничения*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1/*Остаток задолженности по расходам на ограничения*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1/*Остаток задолженности по расходам на ограничения*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_ogr as ur_hist_mat_ostatok_ogr1/*Остаток задолженности по расходам на ограничения*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_ogr1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_gp_otv" table="ur_mat" type="number" title="Гос. пошлина" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv, /*Гос. пошлина*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1/*Гос. пошлина*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1/*Остаток задолженности по гос.пошлине*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1/*Остаток задолженности по гос.пошлине*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1/*Остаток задолженности по гос.пошлине*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_gp_otv as ur_hist_mat_ostatok_gp_otv1/*Остаток задолженности по гос.пошлине*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_gp_otv1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_astrent" table="ur_mat" type="number" title="Астрент" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent, /*Астрент*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1/*Астрент*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1/*Остаток задолженности по астренту*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1/*Остаток задолженности по астренту*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1/*Остаток задолженности по астренту*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_astrent as ur_hist_mat_ostatok_astrent1/*Остаток задолженности по астренту*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_astrent1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_ostatok_sud_izd" table="ur_mat" type="number" title="Судебные издержки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1/*Судебные издержки*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1/*Остаток задолженности по судебным издержкам*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1/*Остаток задолженности по судебным издержкам*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1/*Остаток задолженности по судебным издержкам*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_sud_izd as ur_hist_mat_ostatok_sud_izd1/*Остаток задолженности по судебным издержкам*//*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_sud_izd1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_after_isp_list_all" table="ur_mat" type="number" title="Всего" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_after_isp_list_all1 as ur_isp_opl_after_isp_list_all, /*Всего*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_opl_after_isp_list_all1/*Оплачено всего после выдачи исп листа (ручной ввод, карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod, /*number*/
a.opl_astrent_vvod as opl_astrent_vvod, /*number*/
a.opl_gp_vvod as opl_gp_vvod, /*number*/
a.opl_ogr_vvod as opl_ogr_vvod, /*number*/
a.opl_peni_vvod as opl_peni_vvod, /*number*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_osnreal_vvod" table="ur_mat" type="number" title="Осн. реал." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod, /*Осн. реал.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1/*Осн. реал.*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_osnreal_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_peni_vvod" table="ur_mat" type="number" title="Проценты (пени)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod, /*Проценты (пени)*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1/*Проценты (пени)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_peni_vvod as opl_peni_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_peni_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_ogr_vvod" table="ur_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1/*Расх. за введ. огр. реж. энергопотр.*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_ogr_vvod as opl_ogr_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_ogr_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_gp_vvod" table="ur_mat" type="number" title="Гос. пошлина" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod, /*Гос. пошлина*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1/*Гос. пошлина*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_gp_vvod as opl_gp_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_gp_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_astrent_vvod" table="ur_mat" type="number" title="Астрент" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod, /*Астрент*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1/*Астрент*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_astrent_vvod as opl_astrent_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_astrent_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_opl_sud_izd_vvod" table="ur_mat" type="number" title="Судебные издержки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod, /*Судебные издержки*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(qube.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1/*Судебные издержки*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_all" table="ur_mat" type="number" title="Всего" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_all1 as ur_isp_ostatok_zadol_all, /*Всего*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( ( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  ,0)  -nvl( ( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  ,0) )  as ur_isp_ostatok_zadol_all1/*Остаток задолженности Всего (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod, /*number*/
a.opl_astrent_vvod as opl_astrent_vvod, /*number*/
a.opl_gp_vvod as opl_gp_vvod, /*number*/
a.opl_ogr_vvod as opl_ogr_vvod, /*number*/
a.opl_peni_vvod as opl_peni_vvod, /*number*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_osnreal" table="ur_mat" type="number" title="Осн. реал." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_osnreal1 as ur_isp_ostatok_zadol_osnreal, /*Осн. реал.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_osnreal1 ,0)  -nvl( qube.ur_isp_opl_osnreal_vvod1 ,0) )  as ur_isp_ostatok_zadol_osnreal1/*Остаток задолженности осн. реализация (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_osnreal as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
null as ur_isp_opl_osnreal_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_isp_opl_osnreal_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_peni" table="ur_mat" type="number" title="Проценты (пени)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_peni1 as ur_isp_ostatok_zadol_peni, /*Проценты (пени)*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_peni1 ,0)  -nvl( qube.ur_isp_opl_peni_vvod1 ,0) )  as ur_isp_ostatok_zadol_peni1/*Остаток задолженности пени (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_peni as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
null as ur_isp_opl_peni_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_peni1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_peni_vvod as opl_peni_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_isp_opl_peni_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_ogr" table="ur_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_ogr1 as ur_isp_ostatok_zadol_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_ogr1 ,0)  -nvl( qube.ur_isp_opl_ogr_vvod1 ,0) )  as ur_isp_ostatok_zadol_ogr1/*Остаток задолженности ограничение режима (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_ogr as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
null as ur_isp_opl_ogr_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_ogr_vvod as opl_ogr_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_isp_opl_ogr_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_gp" table="ur_mat" type="number" title="Гос. пошлина" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_gp1 as ur_isp_ostatok_zadol_gp, /*Гос. пошлина*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_gp_otv1 ,0)  -nvl( qube.ur_isp_opl_gp_vvod1 ,0) )  as ur_isp_ostatok_zadol_gp1/*Остаток задолженности ГП (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_gp_otv as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
null as ur_isp_opl_gp_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_gp_vvod as opl_gp_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_isp_opl_gp_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_astrent" table="ur_mat" type="number" title="Астрент" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_astrent1 as ur_isp_ostatok_zadol_astrent, /*Астрент*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_astrent1 ,0)  -nvl( qube.ur_isp_opl_astrent_vvod1 ,0) )  as ur_isp_ostatok_zadol_astrent1/*Остаток задолженности астрент (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_astrent as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
null as ur_isp_opl_astrent_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_astrent_vvod as opl_astrent_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_isp_opl_astrent_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_isp_ostatok_zadol_sud_izd" table="ur_mat" type="number" title="Судебные издержки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_isp_ostatok_zadol_sud_izd1 as ur_isp_ostatok_zadol_sud_izd, /*Судебные издержки*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_ostatok_sud_izd1 ,0)  -nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_ostatok_zadol_sud_izd1/*Остаток задолженности судебные издержки (Карточка ПИР, вкладка ИЛ)*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum(un.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_hist_mat_dec.ostatok_sud_izd as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_otz" table="ur_mat" type="date" title="Дата возврата" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_otz" temp-col-name="d4" />
        <column name="kod_ret_isk" table="ur_mat" type="number" title="Причина возврата документа" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="kod_ret_isk" temp-col-name="n7">
          <sel-list-compiled>
            <root>
              <query class="1" title="Причина возврата документа" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_ret_isk.xml" elid="2960" ord="2960" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_ret_isk" as="kod_ret_isk" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_ret_isk" into="n1">a.kod_ret_isk as kod_ret_isk, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Причина возврата документа" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Причина возврата документа*//*string*/
</column></select>
                <from>
from <query name="uk_ret_isk" as="a" path="./a/a" haskeys="1" used="1">(
<select>--uk_ret_isk
select <column table="a" column="kod_ret_isk" type="number" as="kod_ret_isk" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_ret_isk">a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Причина возврата документа" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name">a.name as name/*Причина возврата документа*//*string*/
</column></select><from>
from <table name="uk_ret_isk" as="a" title="Причина возврата документа" used="1">uk_ret_isk
a
--\uk_ret_isk
</table></from>)
a
--\uk_ret_isk
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_ret_isk" as="kod_ret_isk" title="" key="1" thissrc="kod_ret_isk">a.kod_ret_isk</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_ret_isk" as="kod_ret_isk" title="" key="1" thissrc="kod_ret_isk">a.kod_ret_isk</column><text txtype="func"> ) like lower( </text><const><text>:kod_ret_isk_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Причина возврата документа" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Причина возврата документа" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_ret_isk.xml" elid="2960" ord="2960" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Причина возврата документа" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_ret_isk.xml" elid="2960" ord="2960" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_ret_isk_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_ret_isk" as="kod_ret_isk" title="" key="1" />
                    <column table="a" column="name" as="name" title="Причина возврата документа" />
                  </select>
                  <from>
                    <query name="uk_ret_isk" as="a" title="Причина возврата документа" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_ret_isk" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_ret_isk" />
                        <useparam name="kod_ret_isk_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_ret_isk_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_ret_isk_filter" type="string">
                  <const>:kod_ret_isk_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ret_isk_x_n.name as kod_ret_isk_x_n, /*Причина возврата документа*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ret_isk as kod_ret_isk, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ret_isk as kod_ret_isk,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n7 as kod_ret_isk,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ret_isk as kod_ret_isk,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n7 as kod_ret_isk,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--uk_ret_isk
select a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
a.name as name/*Причина возврата документа*//*string*/

from uk_ret_isk
a
--\uk_ret_isk
)
kod_ret_isk_x_n on ur_mat.kod_ret_isk = kod_ret_isk_x_n.kod_ret_isk--\uk_ret_isk
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_ret_isk_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="num_otz" table="ur_mat" type="string" title="№ документа возврата" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="num_otz" temp-col-name="s4" />
        <column name="fio_otz" table="ur_mat" type="string" title="За чьей подписью возврат" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="fio_otz" temp-col-name="s5" />
        <column name="prichina_otz" table="ur_mat" type="string" title="Основание для возврата" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="prichina_otz" temp-col-name="s6" />
        <column name="prim" table="ur_mat" type="string" title="Примечание" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="prim" temp-col-name="s7" />
        <column name="adres" table="kod_ssp" type="string" title="Адрес" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ssp.adres as adres, /*Адрес*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.adres as adres/*Адрес*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="phone" table="kod_ssp" type="string" title="Телефон секретариата" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ssp.phone as phone, /*Телефон секретариата*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.phone as phone/*Телефон секретариата*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kr_dog_name" table="ur_mat" type="string" title="Договор" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg_dist(qube.kr_dog_name1)  as kr_dog_name1/*Договор*//*string*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1/*Договор*//*string*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1/*Договор*//*string*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1/*Договор*//*string*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
kr_dogovor.name as kr_dog_name1/*Договор*//*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = kod_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1/*string*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_dp_ym_min_priz" table="ur_mat" type="number" title="Период задолж. с" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz, /*Период задолж. с*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
min(qube.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1/*Период задолж. с*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1/*Период начисления с (призн.)*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1/*Период начисления с (призн.)*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
min(un.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1/*Период начисления с (призн.)*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_dogplat.ym_min_priz as ur_dp_ym_min_priz1/*Период начисления с (призн.)*//*number*/

from (
--
select ur_dogplat_a_d.kod_dogplat as kod_dogplat_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat/*number*//*key*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = ur_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_dogplat_a_d.kod_dogplat, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_min_priz/*Период начисления с (призн.)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat on ur_dogplat.kod_dogplat = dims.kod_dogplat_prm--\ur_dogplat
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_dp_ym_min_priz1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_dp_ym_max_priz" table="ur_mat" type="number" title="Период задолж. по" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz, /*Период задолж. по*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
max(qube.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1/*Период задолж. по*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1/*Период начисления по (призн.)*//*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1/*Период начисления по (призн.)*//*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
max(un.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1/*Период начисления по (призн.)*//*number*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
ur_dogplat.ym_max_priz as ur_dp_ym_max_priz1/*Период начисления по (призн.)*//*number*/

from (
--
select ur_dogplat_a_d.kod_dogplat as kod_dogplat_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat/*number*//*key*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = ur_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_dogplat_a_d.kod_dogplat, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_max_priz/*Период начисления по (призн.)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat on ur_dogplat.kod_dogplat = dims.kod_dogplat_prm--\ur_dogplat
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as ur_dp_ym_max_priz1/*number*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan" table="ur_mat" type="number" title="Файл" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_scan" temp-col-name="n30">
          <sel-list-compiled>
            <root>
              <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_scan" as="kod_scan" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_scan" into="n1">a.kod_scan as kod_scan, /**//*number*//*key*/
</column><column table="a" column="file_name" as="file_name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="file_name" into="s1">a.file_name as file_name/**//*string*/
</column></select>
                <from>
from <query name="ur_scan_docs" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_scan_docs
select <column table="a" column="kod_scan" type="number" comment="уникальный ключ" as="kod_scan" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_scan" used="1">a.kod_scan as kod_scan, /*number*//*key*/
</column><column table="a" column="file_name" type="string" title="" comment="имя файла" vid="1" spec-column="file-name" as="file_name" key="0" sourcetable="./a/a" sourcecolumn="file_name" used="1">a.file_name as file_name/**//*string*/
</column></select><from>
from <table name="ur_scan_docs" as="a" title="Файл" used="1">ur_scan_docs
a
--\ur_scan_docs
</table></from>)
a
--\ur_scan_docs
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> ) like lower( </text><const><text>:kod_scan_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="file_name" as="file_name" title="" thissrc="file_name">a.file_name</column><text txtype="func"> ) like lower( </text><const><text>:file_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_scan_filter" type="string" />
                    <param name="file_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_scan" as="kod_scan" title="" key="1" />
                    <column table="a" column="file_name" as="file_name" title="" />
                  </select>
                  <from>
                    <query name="ur_scan_docs" as="a" title="Файл" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="kod_scan_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="file_name" />
                        <useparam name="file_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_scan_filter" />
                    <useparam name="file_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_scan_filter" type="string">
                  <const>:kod_scan_filter </const>
                </param>
                <param name="file_name_filter" type="string">
                  <const>:file_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_scan as kod_scan, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_scan_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="is_not_new" table="ur_mat" type="number" title="" parname="item_is_not_new" ColumnVisible="0" />
        <column name="kod_ssp_x_n" table="ur_mat.kod_ssp" type="string" title="Подразделение судебных приставов" text-source-for="kod_ssp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ssp_x_n.name as kod_ssp_x_n, /*Подразделение судебных приставов*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ssp as kod_ssp,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n6 as kod_ssp,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name/*Служба судебных приставов*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp_x_n on ur_mat.kod_ssp = kod_ssp_x_n.kod_ssp--\us_ssp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_doc_x_n" table="ur_mat.kod_doc" type="string" title="Документ" text-source-for="kod_doc" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_subject_x_n" table="ur_mat.kod_subject" type="string" title="Предмет" text-source-for="kod_subject" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_subject as kod_subject, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_subject as kod_subject,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n8 as kod_subject,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_subject as kod_subject,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n8 as kod_subject,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_ret_isk_x_n" table="ur_mat.kod_ret_isk" type="string" title="Причина возврата документа" text-source-for="kod_ret_isk" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_ret_isk_x_n.name as kod_ret_isk_x_n, /*Причина возврата документа*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_ret_isk as kod_ret_isk, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_ret_isk as kod_ret_isk,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n7 as kod_ret_isk,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_ret_isk as kod_ret_isk,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n7 as kod_ret_isk,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--uk_ret_isk
select a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
a.name as name/*Причина возврата документа*//*string*/

from uk_ret_isk
a
--\uk_ret_isk
)
kod_ret_isk_x_n on ur_mat.kod_ret_isk = kod_ret_isk_x_n.kod_ret_isk--\uk_ret_isk
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan_x_n" table="ur_mat.kod_scan" type="string" title="Файл" text-source-for="kod_scan" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_scan as kod_scan, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp" table="ur_mat" type="number" title="" is-user-editable="1" is-refreshed="1">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" elid="2961" ord="2961" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_sdp" into="n1">a.kod_sdp as kod_sdp, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Юридический документ" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Юридический документ*//*string*/
</column></select>
                <from>
from <query name="uk_sdp" as="a" path="./a/a" haskeys="1" used="1">(
<select>--uk_sdp
select <column table="a" column="kod_sdp" type="number" as="kod_sdp" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Юридический документ" vid="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Юридический документ*//*string*/
</column></select><from>
from <table name="uk_sdp" as="a" used="1">uk_sdp
a
--\uk_sdp
</table></from>)
a
--\uk_sdp
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" thissrc="kod_sdp">a.kod_sdp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" thissrc="kod_sdp">a.kod_sdp</column><text txtype="func"> ) like lower( </text><const><text>:kod_sdp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Юридический документ" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" elid="2961" ord="2961" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" elid="2961" ord="2961" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_sdp_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" />
                    <column table="a" column="name" as="name" title="Юридический документ" />
                  </select>
                  <from>
                    <query name="uk_sdp" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_sdp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_sdp" />
                        <useparam name="kod_sdp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_sdp_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_sdp_filter" type="string">
                  <const>:kod_sdp_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
kod_folders.kod_sdp as kod_sdp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="kod_folders" table="ur_mat" type="number" title="Папка" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_folders" as="kod_folders" title="" key="1" used="1" type="number" agg="count" sourcetable="./a/a" sourcecolumn="kod_folders" into="n1">a.kod_folders as kod_folders, /**//*number*//*key*/
</column><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="dat_create" into="d1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" key="0" used="1" type="date" visible="is_not_new" sourcetable="./a/a" sourcecolumn="dat_finish" into="d2">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" key="0" used="1" type="string" visible="is_not_new" sourcetable="./a/a" sourcecolumn="num_doc" into="s1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_category" reference="us_category" refcol="kod_category" into="n2">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" key="0" used="1" type="string" into="s2">kod_category.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
</column><column table="a" column="ndog" as="ndog" title="Номер договора" key="0" used="1" type="string" agg="max" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" into="s3">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="name" as="name" title="Договор" key="0" used="1" type="string" agg="max" into="s4">a.name as name, /*Договор*//*string*/
</column><column table="a" column="is_active" as="is_active" title="Статус папки" key="0" used="1" type="number" into="n3">a.is_active as is_active, /*Статус папки*//*number*/
</column><column table="a" column="font_color" as="font_color" title="Цвет текста" key="0" used="1" type="string" into="s5">a.font_color as font_color, /*Цвет текста*//*string*/
</column><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" key="0" used="1" type="string" into="s6">a.info_reminder as info_reminder/*Напоминание*//*string*/
</column></select>
                <from>
from <query name="ur_folders" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="dat_create" type="date" title="Дата создания папки" column-mandatory="1" column-default="today" as="dat_create" key="0" sourcetable="./a/a" sourcecolumn="dat_create" used="1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" sourcetable="./a/a" sourcecolumn="dat_finish" used="1">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" type="string" title="Документ (основание для сброса папки в архив)" comment="док-т - основание для архивации папки" visible="is_not_new" as="num_doc" key="0" sourcetable="./a/a" sourcecolumn="num_doc" used="1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" type="number" comment="категория абонента" title="Категория потребителя" as="kod_category" reference="us_category" refcol="kod_category" key="0" sourcetable="./a/a" sourcecolumn="kod_category" used="1">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_dog" column="ndog" is-fact="1" fact="ur_folders_ndog" agg="max" as="ndog" key="0" used="1" type="string" title="Номер договора" sourcetable="./a/a/kod_dog" sourcecolumn="ndog">kod_dog.ndog as ndog, /*Номер договора*//*string*/
</column><column table="kod_dog" column="name" is-fact="1" fact="ur_folders_dog_name" agg="max" as="name" key="0" used="1" type="string" title="Договор">kod_dog.name as name, /*Договор*//*string*/
</column><call function="true if null" as="is_active" title="Статус папки" key="0" pth="" type="number" used="1"><text txtype="func"> decode ( </text><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ,null,1,0) </text> as is_active, /*Статус папки*//*number*/
</call><call as="font_color" function="case" title="Цвет текста" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder1" dgroup="max">ur_mat.mat_reminder1</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'102,51,99'</text></const></call><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder2" dgroup="max">ur_mat.mat_reminder2</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'139,0,0'</text></const></call><text txtype="func"> end </text> as font_color, /*Цвет текста*//*string*/
</call><call function="||" as="info_reminder" title="Напоминание" key="0" pth="" type="string" used="1"><column table="ur_mat" column="mat_reminder1">ur_mat.mat_reminder1</column><text txtype="func"> || </text><column table="ur_mat" column="mat_reminder2">ur_mat.mat_reminder2</column> as info_reminder/*Напоминание*//*string*/
</call></select><from>
from <table name="ur_folders" as="a" title="Папка" used="1">ur_folders
a
--\ur_folders
</table><query as="ur_mat" join="left outer" path="./a/a/ur_mat" used="1">left outer join
(
<select>--
select <column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders as kod_folders, /*number*//*key*/
</column><column table="ur_mat" group="max" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">max(ur_mat.mat_reminder1)  as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="ur_mat" group="max" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">max(ur_mat.mat_reminder2)  as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <query name="ur_mat" as="ur_mat" path="./a/a/ur_mat/ur_mat" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_folders" type="number" as="kod_folders" reference="ur_folders" refcol="kod_folders" key="0" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*/
</column><column table="kod_mat_reminder" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">kod_mat_reminder.mat_reminder1 as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="kod_mat_reminder" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">kod_mat_reminder.mat_reminder2 as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="uv_mat_reminders" as="kod_mat_reminder" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder" used="1">left outer join
(
<select>--uv_mat_reminders
select <column table="a" column="kod_mat" as="kod_mat" key="0" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat, /*number*/
</column><call function="if" as="mat_reminder1" title="Напоминание 1" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="lt" pth="" type="bool">(<column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> &lt; </text><call function="add_months" pth="" type="date">(<text txtype="func"> add_months( </text><const type="date"><text>sysdate</text></const><text txtype="func"> , </text><const type="number"><text>-1</text></const><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl0" pth="" type="number">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_count1" table="qube" as="ur_hist_mat_count1">qube.ur_hist_mat_count1</column><text txtype="func"> ,0) </text>) </call><text txtype="func"> = </text><const type="number"><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'История не заполнена. '</text></const><text txtype="func"> end </text> as mat_reminder1, /*Напоминание 1*//*string*/
</call><call function="if" as="mat_reminder2" title="Напоминание 2" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="!=0" pth="" type="bool">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_dec_pr_resh1" table="qube" as="ur_hist_mat_dec_pr_resh1">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0)!=0 </text>) </call><text txtype="func"> and </text><call function="is null" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_entry1" table="qube" as="ur_hist_mat_dec_dat_entry1">qube.ur_hist_mat_dec_dat_entry1</column><text txtype="func"> is null </text>) </call><text txtype="func"> and </text><call function="lt" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_resh1" table="qube" as="ur_hist_mat_dec_dat_resh1">qube.ur_hist_mat_dec_dat_resh1</column><text txtype="func"> &lt; </text><call function="-" pth="" type="number">(<const type="date"><text>sysdate</text></const><text txtype="func"> - </text><const type="number"><text>40</text></const>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl" pth="">(<text txtype="func"> nvl( </text><column column="qube_mat_pp_cld_inf_cnt_nd1" table="qube" as="qube_mat_pp_cld_inf_cnt_nd1">qube.qube_mat_pp_cld_inf_cnt_nd1</column><text txtype="func"> , </text><const><text>0</text></const><text txtype="func"> ) </text>) </call><text txtype="func"> = </text><const><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'Не введена дата вступления решения в законную силу. '</text></const><text txtype="func"> end </text> as mat_reminder2/*Напоминание 2*//*string*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" group="sum" key="0" used="1" type="number" agg="sum">sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" group="max" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(qube.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" group="max" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(qube.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" group="sum" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(qube.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="qube_mat_pp_cld_inf_cnt_nd1" group="sum" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(un.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="un" column="ur_hist_mat_count1" group="sum" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="un" column="ur_hist_mat_dec_dat_entry1" group="max" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="un" column="ur_hist_mat_dec_dat_resh1" group="max" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(un.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube_mat_pp_cld_inf_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube_mat_pp_cld_inf_a_d" column="cnt_nd" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube_mat_pp_cld_inf_a_d.cnt_nd as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="qube_mat_pp_cld_inf" as="qube_mat_pp_cld_inf_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d" used="1">(
<select>--qube_mat_pp_cld_inf
select <column table="kod_mat_pp" column="kod_parent" as="kod_mat_pp" key-dimension="kod_mat_pp" dimension="kod_mat_pp" key="0" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">kod_mat_pp.kod_parent as kod_mat_pp, /*number*/
</column><call function="-nvl" as="cnt_nd" agg="sum" key="0" pth="" type="number" used="1" title="Судебный акт - решение"><text txtype="func"> nvl( </text><call function="()" as="cnt" type="number" agg="sum" pth="">(<const><text>1</text></const>) </call><text txtype="func"> ,0) </text><text txtype="func"> -nvl( </text><column column="ur_hist_mat_dec_pr_resh1" as="cnt_dec" agg="sum" is-fact-use="1" thissrc="cnt_dec" table="qube">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0) </text> as cnt_nd/*Судебный акт - решение*//*number*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" agg="sum" is-fact-use="1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="kod_mat_pp" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat">kod_mat_pp.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
kod_mat_pp
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from>)
qube_mat_pp_cld_inf_a_d
--\qube_mat_pp_cld_inf
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp">qube_mat_pp_cld_inf_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where /></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><column table="ur_hist_mat_a_d" column="cnt" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
</column><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_hist_mat" dimension="kod_hist_mat" as="ur_hist_mat_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><const type="number" as="cnt" fact="ur_hist_mat_count" agg="sum" key="0" used="1"><text>1</text> as cnt, /*number*/
</const><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat_pp" reference="ur_mat" refcol="kod_mat" key="0" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*/
</column></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat" used="1">ur_hist_mat
a
--\ur_hist_mat
</table></from>)
ur_hist_mat_a_d
--\ur_hist_mat
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_a_d" column="kod_mat_pp">ur_hist_mat_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><column table="ur_hist_mat_dec_a_d" column="dat_entry_dec" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="ur_hist_mat_dec_a_d" column="dat_resh" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">ur_hist_mat_dec_a_d.dat_resh as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><column table="a" column="dat_post" as="dat_resh" agg="max" title="Дата принятия решения" dimension="dat" is-final-dimension="1" is-private-dimension="1" is-fact="1" fact="ur_hist_mat_dec_dat_resh" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post" used="1">a.dat_post as dat_resh, /*Дата принятия решения*/
</column><column table="a" column="dat_entry" type="date" title="Дата вст. реш. в зак. силу" comment="дата вступления решения в законную силу,  Емцов - поменял условие валидации по 38755" valid="dat_entry_vld" as="dat_entry_dec" key="0" thissrc="dat_entry" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry" used="1">a.dat_entry as dat_entry_dec, /*Дата вст. реш. в зак. силу*//*date*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="a" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="a" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
a
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="dat_doc" type="date" title="Дата подачи в суд" mandatory="dat_otz" fact="ur_mat_dat_doc_max" agg="max" as="dat_doc" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="dat_doc" used="1">a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from><call function="=" type="bool">)
kod_mat_reminder on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_reminder" column="kod_mat">kod_mat_reminder.kod_mat</column></call>--\uv_mat_reminders
</query></from>)
ur_mat
--\ur_mat
</query></from><group> group by
<column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
ur_mat on <column table="ur_mat" column="kod_folders">ur_mat.kod_folders</column><text txtype="func"> = </text><column table="a" column="kod_folders">a.kod_folders</column></call>--\
</query><query name="kr_dogovor" as="kod_dog" join="left outer" path="./a/a/kod_dog" haskeys="1" used="1">left outer join
(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a/kod_dog" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><call function="||" as="name" title="Договор" agg="stragg_dist" key="0" pth="" type="string" used="1"><column table="a" column="ndog">a.ndog</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_dog">a.dat_dog</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Договор*//*string*/
</call></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from><call function="=" type="bool">)
kod_dog on <column table="a" column="kod_dog">a.kod_dog</column><text txtype="func"> = </text><column table="kod_dog" column="kod_dog">kod_dog.kod_dog</column></call>--\kr_dogovor
</query></from>)
a
--\ur_folders
</query><query name="us_category" as="kod_category" join="left outer" path="./a/kod_category" haskeys="1" used="1">left outer join
(
<select>--us_category
select <column table="а" column="kod_category" type="number" key="1" as="kod_category" sourcetable="./a/kod_category" sourcecolumn="kod_category" used="1">а.kod_category as kod_category, /*number*//*key*/
</column><call function="||" as="sp_col_name" title="" pth="" type="string" key="0" used="1"><column table="а" column="name" type="string" is-name="1">а.name</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><column table="а" column="abbr" type="string" is-name="1">а.abbr</column> as sp_col_name/**//*string*/
</call></select><from>
from <table name="us_category" as="а" title="Категория потребителей (юристы)" used="1">us_category
а
--\us_category
</table></from><call function="=" type="bool">)
kod_category on <column table="a" column="kod_category">a.kod_category</column><text txtype="func"> = </text><column table="kod_category" column="kod_category">kod_category.kod_category</column></call>--\us_category
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> ) like lower( </text><const><text>:kod_folders_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" thissrc="dat_create">a.dat_create</column><text txtype="func"> ) like lower( </text><const><text>:dat_create_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ) like lower( </text><const><text>:dat_finish_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" thissrc="num_doc">a.num_doc</column><text txtype="func"> ) like lower( </text><const><text>:num_doc_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" thissrc="kod_category">a.kod_category</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" thissrc="kod_category_x_n">kod_category.sp_col_name</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" title="Номер договора" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Договор" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="is_active" as="is_active" title="Статус папки" thissrc="is_active">a.is_active</column><text txtype="func"> ) like lower( </text><const><text>:is_active_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="font_color" as="font_color" title="Цвет текста" thissrc="font_color">a.font_color</column><text txtype="func"> ) like lower( </text><const><text>:font_color_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" thissrc="info_reminder">a.info_reminder</column><text txtype="func"> ) like lower( </text><const><text>:info_reminder_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_folders_filter" type="string" />
                    <param name="dat_create_filter" type="string" />
                    <param name="dat_finish_filter" type="string" />
                    <param name="num_doc_filter" type="string" />
                    <param name="kod_category_filter" type="string" />
                    <param name="kod_category_x_n_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="is_active_filter" type="string" />
                    <param name="font_color_filter" type="string" />
                    <param name="info_reminder_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_folders" as="kod_folders" title="" key="1" />
                    <column table="a" column="dat_create" as="dat_create" title="Дата создания папки" />
                    <column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" />
                    <column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" />
                    <column table="a" column="kod_category" as="kod_category" title="Категория потребителя" />
                    <column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" />
                    <column table="a" column="ndog" as="ndog" title="Номер договора" />
                    <column table="a" column="name" as="name" title="Договор" />
                    <column table="a" column="is_active" as="is_active" title="Статус папки" />
                    <column table="a" column="font_color" as="font_color" title="Цвет текста" />
                    <column table="a" column="info_reminder" as="info_reminder" title="Напоминание" />
                  </select>
                  <from>
                    <query name="ur_folders" as="a" title="Папка">
                      <link name="kod_category" as="kod_category" table="us_category" child="ur_folders" field="kod_category" parent="us_category" back="ur_folders" title="Категория потребителей (юристы)" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="kod_folders_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_create" />
                        <useparam name="dat_create_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_finish" />
                        <useparam name="dat_finish_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_doc" />
                        <useparam name="num_doc_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category" />
                        <useparam name="kod_category_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category_x_n" />
                        <useparam name="kod_category_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="is_active" />
                        <useparam name="is_active_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="font_color" />
                        <useparam name="font_color_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="info_reminder" />
                        <useparam name="info_reminder_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_folders_filter" />
                    <useparam name="dat_create_filter" />
                    <useparam name="dat_finish_filter" />
                    <useparam name="num_doc_filter" />
                    <useparam name="kod_category_filter" />
                    <useparam name="kod_category_x_n_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="name_filter" />
                    <useparam name="is_active_filter" />
                    <useparam name="font_color_filter" />
                    <useparam name="info_reminder_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_folders_filter" type="string">
                  <const>:kod_folders_filter </const>
                </param>
                <param name="dat_create_filter" type="string">
                  <const>:dat_create_filter </const>
                </param>
                <param name="dat_finish_filter" type="string">
                  <const>:dat_finish_filter </const>
                </param>
                <param name="num_doc_filter" type="string">
                  <const>:num_doc_filter </const>
                </param>
                <param name="kod_category_filter" type="string">
                  <const>:kod_category_filter </const>
                </param>
                <param name="kod_category_x_n_filter" type="string">
                  <const>:kod_category_x_n_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="is_active_filter" type="string">
                  <const>:is_active_filter </const>
                </param>
                <param name="font_color_filter" type="string">
                  <const>:font_color_filter </const>
                </param>
                <param name="info_reminder_filter" type="string">
                  <const>:info_reminder_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal, /*Осн. реал.*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni, /*Проценты (пени)*//*number*/
qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv, /*Гос. пошлина*//*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent, /*Астрент*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd, /*Судебные издержки*//*number*/
qube.ur_isp_opl_after_isp_list_all1 as ur_isp_opl_after_isp_list_all, /*Всего*//*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod, /*Осн. реал.*//*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod, /*Проценты (пени)*//*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod, /*Гос. пошлина*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod, /*Астрент*//*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod, /*Судебные издержки*//*number*/
qube.ur_isp_ostatok_zadol_all1 as ur_isp_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_isp_ostatok_zadol_osnreal1 as ur_isp_ostatok_zadol_osnreal, /*Осн. реал.*//*number*/
qube.ur_isp_ostatok_zadol_peni1 as ur_isp_ostatok_zadol_peni, /*Проценты (пени)*//*number*/
qube.ur_isp_ostatok_zadol_ogr1 as ur_isp_ostatok_zadol_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_ostatok_zadol_gp1 as ur_isp_ostatok_zadol_gp, /*Гос. пошлина*//*number*/
qube.ur_isp_ostatok_zadol_astrent1 as ur_isp_ostatok_zadol_astrent, /*Астрент*//*number*/
qube.ur_isp_ostatok_zadol_sud_izd1 as ur_isp_ostatok_zadol_sud_izd, /*Судебные издержки*//*number*/
kod_ssp.adres as adres, /*Адрес*//*string*/
kod_ssp.phone as phone, /*Телефон секретариата*//*string*/
qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz, /*Период задолж. с*//*number*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz, /*Период задолж. по*//*number*/
kod_ssp_x_n.name as kod_ssp_x_n, /*Подразделение судебных приставов*//*string*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
kod_ret_isk_x_n.name as kod_ret_isk_x_n, /*Причина возврата документа*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1, /*Остаток задолженности (Всего)*//*number*/
sum(qube.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Осн. реал.*//*number*/
sum(qube.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Проценты (пени)*//*number*/
max( vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 ) )  as mat_peni_period_str1, /*Период пени*//*string*/
sum(qube.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Гос. пошлина*//*number*/
sum(qube.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Астрент*//*number*/
sum(qube.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Судебные издержки*//*number*/
sum( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_opl_after_isp_list_all1, /*Оплачено всего после выдачи исп листа (ручной ввод, карточка ПИР, вкладка ИЛ)*//*number*/
sum(qube.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*Осн. реал.*//*number*/
sum(qube.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*Проценты (пени)*//*number*/
sum(qube.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*Гос. пошлина*//*number*/
sum(qube.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*Астрент*//*number*/
sum(qube.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*Судебные издержки*//*number*/
sum( nvl( ( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  ,0)  -nvl( ( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  ,0) )  as ur_isp_ostatok_zadol_all1, /*Остаток задолженности Всего (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_osnreal1 ,0)  -nvl( qube.ur_isp_opl_osnreal_vvod1 ,0) )  as ur_isp_ostatok_zadol_osnreal1, /*Остаток задолженности осн. реализация (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_peni1 ,0)  -nvl( qube.ur_isp_opl_peni_vvod1 ,0) )  as ur_isp_ostatok_zadol_peni1, /*Остаток задолженности пени (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_ogr1 ,0)  -nvl( qube.ur_isp_opl_ogr_vvod1 ,0) )  as ur_isp_ostatok_zadol_ogr1, /*Остаток задолженности ограничение режима (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_gp_otv1 ,0)  -nvl( qube.ur_isp_opl_gp_vvod1 ,0) )  as ur_isp_ostatok_zadol_gp1, /*Остаток задолженности ГП (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_astrent1 ,0)  -nvl( qube.ur_isp_opl_astrent_vvod1 ,0) )  as ur_isp_ostatok_zadol_astrent1, /*Остаток задолженности астрент (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_sud_izd1 ,0)  -nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_ostatok_zadol_sud_izd1, /*Остаток задолженности судебные издержки (Карточка ПИР, вкладка ИЛ)*//*number*/
stragg_dist(qube.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
min(qube.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период задолж. с*//*number*/
max(qube.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1/*Период задолж. по*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
max(un.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
min(un.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
sum(un.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
sum(un.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
sum(un.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
sum(un.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
sum(un.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*number*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
kr_dogovor.name as kr_dog_name1, /*Договор*//*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = kod_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
ur_dogplat.ym_max_priz as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
ur_dogplat.ym_min_priz as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_dogplat_a_d.kod_dogplat as kod_dogplat_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat/*number*//*key*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = ur_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_dogplat_a_d.kod_dogplat, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_min_priz, /*Период начисления с (призн.)*//*number*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_max_priz/*Период начисления по (призн.)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat on ur_dogplat.kod_dogplat = dims.kod_dogplat_prm--\ur_dogplat
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
ur_hist_mat_dec.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec.ostatok_astrent as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
ur_hist_mat_dec.ostatok_gp_otv as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
ur_hist_mat_dec.ostatok_ogr as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
ur_hist_mat_dec.ostatok_osnreal as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
ur_hist_mat_dec.ostatok_peni as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
ur_hist_mat_dec.ostatok_sud_izd as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
ur_hist_mat_dec.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod, /*number*/
a.opl_astrent_vvod as opl_astrent_vvod, /*number*/
a.opl_gp_vvod as opl_gp_vvod, /*number*/
a.opl_ogr_vvod as opl_ogr_vvod, /*number*/
a.opl_peni_vvod as opl_peni_vvod, /*number*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
ur_mat_peni_period.name as mat_peni_period_ym1/*Период*//*string*/

from (
--
select ur_mat_peni_period_a_d.kod_peni_period as kod_peni_period_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d on ur_mat_peni_period_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
kod_hist_mat_dec_a_d on kod_hist_mat_dec_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = kod_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_mat_peni_period_a_d.kod_peni_period, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period on ur_mat_peni_period.kod_peni_period = dims.kod_peni_period_prm--\ur_mat_peni_period
)
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc, /*number*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_ret_isk as kod_ret_isk, /*number*/
a.kod_subject as kod_subject, /*number*/
a.kod_scan as kod_scan, /*number*/
kod_folders.kod_sdp as kod_sdp, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_ssp as kod_ssp,a.kod_ret_isk as kod_ret_isk,a.kod_subject as kod_subject,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n6 as kod_ssp,t.n7 as kod_ret_isk,t.n8 as kod_subject,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc,a.kod_ssp as kod_ssp,a.kod_ret_isk as kod_ret_isk,a.kod_subject as kod_subject,a.kod_scan as kod_scan,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n5 as kod_doc,t.n6 as kod_ssp,t.n7 as kod_ret_isk,t.n8 as kod_subject,t.n30 as kod_scan,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--uk_ret_isk
select a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
a.name as name/*Причина возврата документа*//*string*/

from uk_ret_isk
a
--\uk_ret_isk
)
kod_ret_isk_x_n on ur_mat.kod_ret_isk = kod_ret_isk_x_n.kod_ret_isk--\uk_ret_isk
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name/*Служба судебных приставов*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp_x_n on ur_mat.kod_ssp = kod_ssp_x_n.kod_ssp--\us_ssp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.adres as adres, /*Адрес*//*string*/
a.phone as phone/*Телефон секретариата*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ur_hist_mat_ostatok_zadol_all" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_osnreal" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_peni" table="ur_mat" />
            <dependant name="mat_peni_period_str" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_ogr" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_gp_otv" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_astrent" table="ur_mat" />
            <dependant name="ur_hist_mat_ostatok_sud_izd" table="ur_mat" />
            <dependant name="ur_isp_opl_after_isp_list_all" table="ur_mat" />
            <dependant name="ur_isp_opl_osnreal_vvod" table="ur_mat" />
            <dependant name="ur_isp_opl_peni_vvod" table="ur_mat" />
            <dependant name="ur_isp_opl_ogr_vvod" table="ur_mat" />
            <dependant name="ur_isp_opl_gp_vvod" table="ur_mat" />
            <dependant name="ur_isp_opl_astrent_vvod" table="ur_mat" />
            <dependant name="ur_isp_opl_sud_izd_vvod" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_all" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_osnreal" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_peni" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_ogr" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_gp" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_astrent" table="ur_mat" />
            <dependant name="ur_isp_ostatok_zadol_sud_izd" table="ur_mat" />
            <dependant name="adres" table="ur_mat" />
            <dependant name="phone" table="ur_mat" />
            <dependant name="kr_dog_name" table="ur_mat" />
            <dependant name="ur_dp_ym_min_priz" table="ur_mat" />
            <dependant name="ur_dp_ym_max_priz" table="ur_mat" />
            <dependant name="kod_ssp_x_n" table="ur_mat" />
            <dependant name="kod_doc_x_n" table="ur_mat" />
            <dependant name="kod_subject_x_n" table="ur_mat" />
            <dependant name="kod_ret_isk_x_n" table="ur_mat" />
            <dependant name="kod_scan_x_n" table="ur_mat" />
            <dependant name="kod_sdp" table="ur_mat" />
          </dependants>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_mat as kod_mat 
,:dat_doc as dat_doc 
,:kod_ssp as kod_ssp 
,:num_delo as num_delo 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:dat_otz as dat_otz 
,:kod_ret_isk as kod_ret_isk 
,:num_otz as num_otz 
,:fio_otz as fio_otz 
,:prichina_otz as prichina_otz 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_mat 
(kod_mat 
,dat_doc 
,kod_ssp 
,num_delo 
,kod_doc 
,kod_subject 
,dat_otz 
,kod_ret_isk 
,num_otz 
,fio_otz 
,prichina_otz 
,prim 
,kod_scan 
,kod_folders 
) 
 values  
(r.kod_mat 
,r.dat_doc 
,r.kod_ssp 
,r.num_delo 
,r.kod_doc 
,r.kod_subject 
,r.dat_otz 
,r.kod_ret_isk 
,r.num_otz 
,r.fio_otz 
,r.prichina_otz 
,r.prim 
,r.kod_scan 
,r.kod_folders 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_mat' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_mat as kod_mat 
,:dat_doc as dat_doc 
,:kod_ssp as kod_ssp 
,:num_delo as num_delo 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:dat_otz as dat_otz 
,:kod_ret_isk as kod_ret_isk 
,:num_otz as num_otz 
,:fio_otz as fio_otz 
,:prichina_otz as prichina_otz 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,d5 
,n6 
,s1 
,n5 
,n8 
,d4 
,n7 
,s4 
,s5 
,s6 
,s7 
,n30 
,n4 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
,r.dat_doc 
,r.kod_ssp 
,r.num_delo 
,r.kod_doc 
,r.kod_subject 
,r.dat_otz 
,r.kod_ret_isk 
,r.num_otz 
,r.fio_otz 
,r.prichina_otz 
,r.prim 
,r.kod_scan 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kod_mat as kod_mat 
,:dat_doc as dat_doc 
,:kod_ssp as kod_ssp 
,:num_delo as num_delo 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:dat_otz as dat_otz 
,:kod_ret_isk as kod_ret_isk 
,:num_otz as num_otz 
,:fio_otz as fio_otz 
,:prichina_otz as prichina_otz 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_folders as kod_folders 
,a.num_reg 
,a.dat_otv 
,a.dat_prin 
,a.u_m 
,a.d_m 
,a.sum_gp 
,a.dat_gp 
,a.kod_sud 
,a.num_pp_gp 
,a.kod_parent 
,a.kodp 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.dat_post_mat_pio 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,d5 
,n6 
,s1 
,n5 
,n8 
,d4 
,n7 
,s4 
,s5 
,s6 
,s7 
,n30 
,n4 
,s2 
,d1 
,d2 
,s3 
,d3 
,n9 
,d6 
,n10 
,s8 
,n11 
,n1 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,d7 
,s9 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,s10 
,s11 
,n28 
,s12 
,d8 
,n29 
,s13 
,d9 
,n31 
,d10 
,d11 
,n32 
,d12 
,s14 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
,r.dat_doc 
,r.kod_ssp 
,r.num_delo 
,r.kod_doc 
,r.kod_subject 
,r.dat_otz 
,r.kod_ret_isk 
,r.num_otz 
,r.fio_otz 
,r.prichina_otz 
,r.prim 
,r.kod_scan 
,r.kod_folders 
,r.num_reg 
,r.dat_otv 
,r.dat_prin 
,r.u_m 
,r.d_m 
,r.sum_gp 
,r.dat_gp 
,r.kod_sud 
,r.num_pp_gp 
,r.kod_parent 
,r.kodp 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.dat_post_mat_pio 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(kod_mat 
,dat_doc 
,kod_ssp 
,num_delo 
,kod_doc 
,kod_subject 
,dat_otz 
,kod_ret_isk 
,num_otz 
,fio_otz 
,prichina_otz 
,prim 
,kod_scan 
,kod_folders 
) 
= 
 ( select  
:kod_mat as kod_mat 
,:dat_doc as dat_doc 
,:kod_ssp as kod_ssp 
,:num_delo as num_delo 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:dat_otz as dat_otz 
,:kod_ret_isk as kod_ret_isk 
,:num_otz as num_otz 
,:fio_otz as fio_otz 
,:prichina_otz as prichina_otz 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction action-type="execute-update" call="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat_isp" as="ur_mat">
          <columns>
            <column name="kod_mat" type="number" title="" visible="0" />
            <column name="dat_doc" type="date" title="Дата направл. ПСП" />
            <column name="kod_ssp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_delo" type="string" title="Номер постановления" />
            <column name="kod_doc" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_subject" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_hist_mat_ostatok_zadol_all" type="number" title="Всего" />
            <column name="ur_hist_mat_ostatok_osnreal" type="number" title="Осн. реал." />
            <column name="ur_hist_mat_ostatok_peni" type="number" title="Проценты (пени)" />
            <column name="mat_peni_period_str" type="string" title="Период пени" />
            <column name="ur_hist_mat_ostatok_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="ur_hist_mat_ostatok_gp_otv" type="number" title="Гос. пошлина" />
            <column name="ur_hist_mat_ostatok_astrent" type="number" title="Астрент" />
            <column name="ur_hist_mat_ostatok_sud_izd" type="number" title="Судебные издержки" />
            <column name="ur_isp_opl_after_isp_list_all" type="number" title="Всего" />
            <column name="ur_isp_opl_osnreal_vvod" type="number" title="Осн. реал." />
            <column name="ur_isp_opl_peni_vvod" type="number" title="Проценты (пени)" />
            <column name="ur_isp_opl_ogr_vvod" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="ur_isp_opl_gp_vvod" type="number" title="Гос. пошлина" />
            <column name="ur_isp_opl_astrent_vvod" type="number" title="Астрент" />
            <column name="ur_isp_opl_sud_izd_vvod" type="number" title="Судебные издержки" />
            <column name="ur_isp_ostatok_zadol_all" type="number" title="Всего" />
            <column name="ur_isp_ostatok_zadol_osnreal" type="number" title="Осн. реал." />
            <column name="ur_isp_ostatok_zadol_peni" type="number" title="Проценты (пени)" />
            <column name="ur_isp_ostatok_zadol_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="ur_isp_ostatok_zadol_gp" type="number" title="Гос. пошлина" />
            <column name="ur_isp_ostatok_zadol_astrent" type="number" title="Астрент" />
            <column name="ur_isp_ostatok_zadol_sud_izd" type="number" title="Судебные издержки" />
            <column name="dat_otz" type="date" title="Дата возврата" />
            <column name="kod_ret_isk" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_otz" type="string" title="№ документа возврата" />
            <column name="fio_otz" type="string" title="За чьей подписью возврат" />
            <column name="prichina_otz" type="string" title="Основание для возврата" />
            <column name="prim" type="string" title="Примечание" />
            <column name="adres" type="string" title="Адрес" />
            <column name="phone" type="string" title="Телефон секретариата" />
            <column name="kr_dog_name" type="string" title="Договор" />
            <column name="ur_dp_ym_min_priz" type="number" format="F2" edit-mask="F2" title="Период задолж. с" />
            <column name="ur_dp_ym_max_priz" type="number" format="F2" edit-mask="F2" title="Период задолж. по" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" title="" visible="0" />
            <column name="kod_ssp_x_n" type="string" title="Подразделение судебных приставов" />
            <column name="kod_doc_x_n" type="string" title="Документ" />
            <column name="kod_subject_x_n" type="string" title="Предмет" />
            <column name="kod_ret_isk_x_n" type="string" title="Причина возврата документа" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod_mat" type="number" title="" visible="0" />
            <column name="dat_doc" type="date" title="Дата направл. ПСП" />
            <column name="kod_ssp_x_n" type="string" title="Подразделение судебных приставов" />
            <column name="kod_ssp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_delo" type="string" title="Номер постановления" />
            <column name="kod_doc_x_n" type="string" title="Документ" />
            <column name="kod_doc" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_subject_x_n" type="string" title="Предмет" />
            <column name="kod_subject" type="number" invisible-in-column-chooser="1" visible="0" />
            <band title="Задолженность">
              <column name="ur_hist_mat_ostatok_zadol_all" type="number" title="Всего" />
              <column name="ur_hist_mat_ostatok_osnreal" type="number" title="Осн. реал." />
              <column name="ur_hist_mat_ostatok_peni" type="number" title="Проценты (пени)" />
              <column name="mat_peni_period_str" type="string" title="Период пени" />
              <column name="ur_hist_mat_ostatok_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="ur_hist_mat_ostatok_gp_otv" type="number" title="Гос. пошлина" />
              <column name="ur_hist_mat_ostatok_astrent" type="number" title="Астрент" />
              <column name="ur_hist_mat_ostatok_sud_izd" type="number" title="Судебные издержки" />
            </band>
            <band title="Оплата по ИП">
              <column name="ur_isp_opl_after_isp_list_all" type="number" title="Всего" />
              <column name="ur_isp_opl_osnreal_vvod" type="number" title="Осн. реал." />
              <column name="ur_isp_opl_peni_vvod" type="number" title="Проценты (пени)" />
              <column name="ur_isp_opl_ogr_vvod" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="ur_isp_opl_gp_vvod" type="number" title="Гос. пошлина" />
              <column name="ur_isp_opl_astrent_vvod" type="number" title="Астрент" />
              <column name="ur_isp_opl_sud_izd_vvod" type="number" title="Судебные издержки" />
            </band>
            <band title="Остаток задолженности">
              <column name="ur_isp_ostatok_zadol_all" type="number" title="Всего" />
              <column name="ur_isp_ostatok_zadol_osnreal" type="number" title="Осн. реал." />
              <column name="ur_isp_ostatok_zadol_peni" type="number" title="Проценты (пени)" />
              <column name="ur_isp_ostatok_zadol_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="ur_isp_ostatok_zadol_gp" type="number" title="Гос. пошлина" />
              <column name="ur_isp_ostatok_zadol_astrent" type="number" title="Астрент" />
              <column name="ur_isp_ostatok_zadol_sud_izd" type="number" title="Судебные издержки" />
            </band>
            <column name="dat_otz" type="date" title="Дата возврата" />
            <column name="kod_ret_isk_x_n" type="string" title="Причина возврата документа" />
            <column name="kod_ret_isk" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_otz" type="string" title="№ документа возврата" />
            <column name="fio_otz" type="string" title="За чьей подписью возврат" />
            <column name="prichina_otz" type="string" title="Основание для возврата" />
            <column name="prim" type="string" title="Примечание" />
            <column name="adres" type="string" title="Адрес" />
            <column name="phone" type="string" title="Телефон секретариата" />
            <column name="kr_dog_name" type="string" title="Договор" />
            <column name="ur_dp_ym_min_priz" type="number" format="F2" edit-mask="F2" title="Период задолж. с" />
            <column name="ur_dp_ym_max_priz" type="number" format="F2" edit-mask="F2" title="Период задолж. по" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" title="" visible="0" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.dat_doc as dat_doc, /*Дата направл. ПСП*//*date*/
ur_mat.kod_ssp as kod_ssp, /*number*/
ur_mat.num_delo as num_delo, /*Номер постановления*//*string*/
ur_mat.kod_doc as kod_doc, /*number*/
ur_mat.kod_subject as kod_subject, /*number*/
qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal, /*Осн. реал.*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni, /*Проценты (пени)*//*number*/
qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv, /*Гос. пошлина*//*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent, /*Астрент*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd, /*Судебные издержки*//*number*/
qube.ur_isp_opl_after_isp_list_all1 as ur_isp_opl_after_isp_list_all, /*Всего*//*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod, /*Осн. реал.*//*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod, /*Проценты (пени)*//*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod, /*Гос. пошлина*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod, /*Астрент*//*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod, /*Судебные издержки*//*number*/
qube.ur_isp_ostatok_zadol_all1 as ur_isp_ostatok_zadol_all, /*Всего*//*number*/
qube.ur_isp_ostatok_zadol_osnreal1 as ur_isp_ostatok_zadol_osnreal, /*Осн. реал.*//*number*/
qube.ur_isp_ostatok_zadol_peni1 as ur_isp_ostatok_zadol_peni, /*Проценты (пени)*//*number*/
qube.ur_isp_ostatok_zadol_ogr1 as ur_isp_ostatok_zadol_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
qube.ur_isp_ostatok_zadol_gp1 as ur_isp_ostatok_zadol_gp, /*Гос. пошлина*//*number*/
qube.ur_isp_ostatok_zadol_astrent1 as ur_isp_ostatok_zadol_astrent, /*Астрент*//*number*/
qube.ur_isp_ostatok_zadol_sud_izd1 as ur_isp_ostatok_zadol_sud_izd, /*Судебные издержки*//*number*/
ur_mat.dat_otz as dat_otz, /*Дата возврата*//*date*/
ur_mat.kod_ret_isk as kod_ret_isk, /*number*/
ur_mat.num_otz as num_otz, /*№ документа возврата*//*string*/
ur_mat.fio_otz as fio_otz, /*За чьей подписью возврат*//*string*/
ur_mat.prichina_otz as prichina_otz, /*Основание для возврата*//*string*/
ur_mat.prim as prim, /*Примечание*//*string*/
kod_ssp.adres as adres, /*Адрес*//*string*/
kod_ssp.phone as phone, /*Телефон секретариата*//*string*/
qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz, /*Период задолж. с*//*number*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz, /*Период задолж. по*//*number*/
ur_mat.kod_scan as kod_scan, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
kod_ssp_x_n.name as kod_ssp_x_n, /*Подразделение судебных приставов*//*string*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
kod_ret_isk_x_n.name as kod_ret_isk_x_n, /*Причина возврата документа*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.kod_folders as kod_folders/*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1, /*Остаток задолженности (Всего)*//*number*/
sum(qube.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Осн. реал.*//*number*/
sum(qube.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Проценты (пени)*//*number*/
max( vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 ) )  as mat_peni_period_str1, /*Период пени*//*string*/
sum(qube.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Гос. пошлина*//*number*/
sum(qube.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Астрент*//*number*/
sum(qube.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Судебные издержки*//*number*/
sum( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_opl_after_isp_list_all1, /*Оплачено всего после выдачи исп листа (ручной ввод, карточка ПИР, вкладка ИЛ)*//*number*/
sum(qube.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*Осн. реал.*//*number*/
sum(qube.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*Проценты (пени)*//*number*/
sum(qube.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
sum(qube.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*Гос. пошлина*//*number*/
sum(qube.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*Астрент*//*number*/
sum(qube.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*Судебные издержки*//*number*/
sum( nvl( ( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  ,0)  -nvl( ( nvl( qube.ur_isp_opl_osnreal_vvod1 ,0)  +nvl( qube.ur_isp_opl_peni_vvod1 ,0)  +nvl( qube.ur_isp_opl_ogr_vvod1 ,0)  +nvl( qube.ur_isp_opl_gp_vvod1 ,0)  +nvl( qube.ur_isp_opl_astrent_vvod1 ,0)  +nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  ,0) )  as ur_isp_ostatok_zadol_all1, /*Остаток задолженности Всего (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_osnreal1 ,0)  -nvl( qube.ur_isp_opl_osnreal_vvod1 ,0) )  as ur_isp_ostatok_zadol_osnreal1, /*Остаток задолженности осн. реализация (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_peni1 ,0)  -nvl( qube.ur_isp_opl_peni_vvod1 ,0) )  as ur_isp_ostatok_zadol_peni1, /*Остаток задолженности пени (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_ogr1 ,0)  -nvl( qube.ur_isp_opl_ogr_vvod1 ,0) )  as ur_isp_ostatok_zadol_ogr1, /*Остаток задолженности ограничение режима (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_gp_otv1 ,0)  -nvl( qube.ur_isp_opl_gp_vvod1 ,0) )  as ur_isp_ostatok_zadol_gp1, /*Остаток задолженности ГП (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_astrent1 ,0)  -nvl( qube.ur_isp_opl_astrent_vvod1 ,0) )  as ur_isp_ostatok_zadol_astrent1, /*Остаток задолженности астрент (Карточка ПИР, вкладка ИЛ)*//*number*/
sum( nvl( qube.ur_hist_mat_ostatok_sud_izd1 ,0)  -nvl( qube.ur_isp_opl_sud_izd_vvod1 ,0) )  as ur_isp_ostatok_zadol_sud_izd1, /*Остаток задолженности судебные издержки (Карточка ПИР, вкладка ИЛ)*//*number*/
stragg_dist(qube.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
min(qube.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период задолж. с*//*number*/
max(qube.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1/*Период задолж. по*//*number*/

from (
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
(
(
--
select qube.kod_mat_isp as kod_mat_isp, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dp_ym_max_priz1 as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
qube.ur_dp_ym_min_priz1 as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_ostatok_astrent1 as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
qube.ur_hist_mat_ostatok_gp_otv1 as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
qube.ur_hist_mat_ostatok_ogr1 as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
qube.ur_hist_mat_ostatok_osnreal1 as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
qube.ur_hist_mat_ostatok_peni1 as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
qube.ur_hist_mat_ostatok_sud_izd1 as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
qube.ur_isp_opl_astrent_vvod1 as ur_isp_opl_astrent_vvod1, /*number*/
qube.ur_isp_opl_gp_vvod1 as ur_isp_opl_gp_vvod1, /*number*/
qube.ur_isp_opl_ogr_vvod1 as ur_isp_opl_ogr_vvod1, /*number*/
qube.ur_isp_opl_osnreal_vvod1 as ur_isp_opl_osnreal_vvod1, /*number*/
qube.ur_isp_opl_peni_vvod1 as ur_isp_opl_peni_vvod1, /*number*/
qube.ur_isp_opl_sud_izd_vvod1 as ur_isp_opl_sud_izd_vvod1/*number*/

from (
--
select un.kod_mat_isp as kod_mat_isp, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
max(un.ur_dp_ym_max_priz1)  as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
min(un.ur_dp_ym_min_priz1)  as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_ostatok_astrent1)  as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
sum(un.ur_hist_mat_ostatok_gp_otv1)  as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
sum(un.ur_hist_mat_ostatok_ogr1)  as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
sum(un.ur_hist_mat_ostatok_osnreal1)  as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
sum(un.ur_hist_mat_ostatok_peni1)  as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
sum(un.ur_hist_mat_ostatok_sud_izd1)  as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_isp_opl_astrent_vvod1)  as ur_isp_opl_astrent_vvod1, /*number*/
sum(un.ur_isp_opl_gp_vvod1)  as ur_isp_opl_gp_vvod1, /*number*/
sum(un.ur_isp_opl_ogr_vvod1)  as ur_isp_opl_ogr_vvod1, /*number*/
sum(un.ur_isp_opl_osnreal_vvod1)  as ur_isp_opl_osnreal_vvod1, /*number*/
sum(un.ur_isp_opl_peni_vvod1)  as ur_isp_opl_peni_vvod1, /*number*/
sum(un.ur_isp_opl_sud_izd_vvod1)  as ur_isp_opl_sud_izd_vvod1, /*number*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
kr_dogovor.name as kr_dog_name1, /*Договор*//*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = kod_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
ur_dogplat.ym_max_priz as ur_dp_ym_max_priz1, /*Период начисления по (призн.)*//*number*/
ur_dogplat.ym_min_priz as ur_dp_ym_min_priz1, /*Период начисления с (призн.)*//*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_dogplat_a_d.kod_dogplat as kod_dogplat_prm, /*number*//*key*/
kod_dp_isp_a_d.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat/*number*//*key*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_dp_isp
select a.kod_dp_isp as kod_dp_isp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_dogplat as kod_dogplat/*number*/

from ur_dp_isp
a
--\ur_dp_isp
)
kod_dp_isp_a_d on kod_dp_isp_a_d.kod_dogplat = ur_dogplat_a_d.kod_dogplat--\ur_dp_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on kod_dp_isp_a_d.kod_mat = ur_mat.kod_mat--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_dogplat_a_d.kod_dogplat, /*number*//*key*/
kod_dp_isp_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_min_priz, /*Период начисления с (призн.)*//*number*/
 case  when ( nvl( a.sum_v ,0)!=0 )  then ( case  when (a.vid_real not in (7 , 9) )  then a.ym end )  end  as ym_max_priz/*Период начисления по (призн.)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat on ur_dogplat.kod_dogplat = dims.kod_dogplat_prm--\ur_dogplat
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
ur_hist_mat_dec.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec.ostatok_astrent as ur_hist_mat_ostatok_astrent1, /*Остаток задолженности по астренту*//*number*/
ur_hist_mat_dec.ostatok_gp_otv as ur_hist_mat_ostatok_gp_otv1, /*Остаток задолженности по гос.пошлине*//*number*/
ur_hist_mat_dec.ostatok_ogr as ur_hist_mat_ostatok_ogr1, /*Остаток задолженности по расходам на ограничения*//*number*/
ur_hist_mat_dec.ostatok_osnreal as ur_hist_mat_ostatok_osnreal1, /*Остаток задолженности по осн. реал*//*number*/
ur_hist_mat_dec.ostatok_peni as ur_hist_mat_ostatok_peni1, /*Остаток задолженности по пени*//*number*/
ur_hist_mat_dec.ostatok_sud_izd as ur_hist_mat_ostatok_sud_izd1, /*Остаток задолженности по судебным издержкам*//*number*/
ur_hist_mat_dec.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = ur_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_hist_mat_dec_a_d.kod_hist_mat, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec on ur_hist_mat_dec.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec
)
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_isp.opl_astrent_vvod as ur_isp_opl_astrent_vvod1, /*number*/
ur_isp.opl_gp_vvod as ur_isp_opl_gp_vvod1, /*number*/
ur_isp.opl_ogr_vvod as ur_isp_opl_ogr_vvod1, /*number*/
ur_isp.opl_osnreal_vvod as ur_isp_opl_osnreal_vvod1, /*number*/
ur_isp.opl_peni_vvod as ur_isp_opl_peni_vvod1, /*number*/
ur_isp.opl_sud_izd_vvod as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select ur_isp_a_d.kod_isp as kod_isp_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_isp
select a.kod_isp as kod_isp/*number*//*key*/

from ur_isp
a
--\ur_isp
)
ur_isp_a_d
--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = ur_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_isp_a_d.kod_isp, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.opl_sud_izd_vvod as opl_sud_izd_vvod, /*number*/
a.opl_astrent_vvod as opl_astrent_vvod, /*number*/
a.opl_gp_vvod as opl_gp_vvod, /*number*/
a.opl_ogr_vvod as opl_ogr_vvod, /*number*/
a.opl_peni_vvod as opl_peni_vvod, /*number*/
a.opl_osnreal_vvod as opl_osnreal_vvod/*number*/

from ur_isp
a
--\ur_isp
)
ur_isp on ur_isp.kod_isp = dims.kod_isp_prm--\ur_isp
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat
--\ur_mat_isp
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select dims.kod_mat_isp as kod_mat_isp, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dp_ym_max_priz1, /*number*/
null as ur_dp_ym_min_priz1, /*number*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_ostatok_astrent1, /*number*/
null as ur_hist_mat_ostatok_gp_otv1, /*number*/
null as ur_hist_mat_ostatok_ogr1, /*number*/
null as ur_hist_mat_ostatok_osnreal1, /*number*/
null as ur_hist_mat_ostatok_peni1, /*number*/
null as ur_hist_mat_ostatok_sud_izd1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_isp_opl_astrent_vvod1, /*number*/
null as ur_isp_opl_gp_vvod1, /*number*/
null as ur_isp_opl_ogr_vvod1, /*number*/
null as ur_isp_opl_osnreal_vvod1, /*number*/
null as ur_isp_opl_peni_vvod1, /*number*/
null as ur_isp_opl_sud_izd_vvod1, /*number*/
ur_mat_peni_period.name as mat_peni_period_ym1/*Период*//*string*/

from (
--
select ur_mat_peni_period_a_d.kod_peni_period as kod_peni_period_prm, /*number*//*key*/
ur_mat.kod_mat as kod_mat_isp/*number*//*key*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d on ur_mat_peni_period_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
kod_hist_mat_dec_a_d on kod_hist_mat_dec_a_d.kod_mat = kod_mat_a_d.kod_mat--\ur_hist_mat_dec
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat/*number*/

from ur_isp
a
--\ur_isp
)
kod_isp_a_d on kod_isp_a_d.kod_hist_mat = kod_hist_mat_dec_a_d.kod_hist_mat--\ur_isp
left outer join
(
--ur_folders_isp
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_isp as kod_isp, /*number*/
a.kod_folders as kod_folders_isp/*number*//*key*/

from ur_folders
a
--\ur_folders
where
a.kod_sdp = 2)
kod_folders_isp_a_d on kod_folders_isp_a_d.kod_isp = kod_isp_a_d.kod_isp--\ur_folders_isp
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat_isp/*number*//*key*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_folders = kod_folders_isp_a_d.kod_folders_isp--\ur_mat_isp
where
ur_mat.kod_mat is not null  group by
ur_mat_peni_period_a_d.kod_peni_period, /*number*//*key*/
ur_mat.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period on ur_mat_peni_period.kod_peni_period = dims.kod_peni_period_prm--\ur_mat_peni_period
)
--\
)
--\
)
un
--\
 group by
un.kod_mat_isp/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat_isp/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat_isp
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_doc as kod_doc, /*number*/
a.kod_ssp as kod_ssp, /*number*/
a.kod_ret_isk as kod_ret_isk, /*number*/
a.num_otz as num_otz, /*№ документа возврата*//*string*/
a.dat_otz as dat_otz, /*Дата возврата*//*date*/
a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
a.fio_otz as fio_otz, /*За чьей подписью возврат*//*string*/
a.kod_subject as kod_subject, /*number*/
a.prichina_otz as prichina_otz, /*Основание для возврата*//*string*/
a.prim as prim, /*Примечание*//*string*/
a.kod_scan as kod_scan, /*number*/
kod_folders.kod_sdp as kod_sdp, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
a.kod_mat as kod_mat_isp, /*number*//*key*/
a.num_delo as num_delo/*Номер дела*//*string*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders,a.kod_doc as kod_doc,a.kod_ssp as kod_ssp,a.kod_ret_isk as kod_ret_isk,a.num_otz as num_otz,a.dat_otz as dat_otz,a.dat_doc as dat_doc,a.fio_otz as fio_otz,a.kod_subject as kod_subject,a.prichina_otz as prichina_otz,a.prim as prim,a.kod_scan as kod_scan,0 as is_new,1 as is_not_new,a.num_delo as num_delo  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders,t.n5 as kod_doc,t.n6 as kod_ssp,t.n7 as kod_ret_isk,t.s4 as num_otz,t.d4 as dat_otz,t.d5 as dat_doc,t.s5 as fio_otz,t.n8 as kod_subject,t.s6 as prichina_otz,t.s7 as prim,t.n30 as kod_scan,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.s1 as num_delo  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders,a.kod_doc as kod_doc,a.kod_ssp as kod_ssp,a.kod_ret_isk as kod_ret_isk,a.num_otz as num_otz,a.dat_otz as dat_otz,a.dat_doc as dat_doc,a.fio_otz as fio_otz,a.kod_subject as kod_subject,a.prichina_otz as prichina_otz,a.prim as prim,a.kod_scan as kod_scan,0 as is_new,1 as is_not_new,a.num_delo as num_delo  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n4 as kod_folders,t.n5 as kod_doc,t.n6 as kod_ssp,t.n7 as kod_ret_isk,t.s4 as num_otz,t.d4 as dat_otz,t.d5 as dat_doc,t.s5 as fio_otz,t.n8 as kod_subject,t.s6 as prichina_otz,t.s7 as prim,t.n30 as kod_scan,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.s1 as num_delo  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
where
kod_folders.kod_sdp = 2)
ur_mat on ur_mat.kod_mat = qube.kod_mat_isp--\ur_mat_isp
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--uk_ret_isk
select a.kod_ret_isk as kod_ret_isk, /*number*//*key*/
a.name as name/*Причина возврата документа*//*string*/

from uk_ret_isk
a
--\uk_ret_isk
)
kod_ret_isk_x_n on ur_mat.kod_ret_isk = kod_ret_isk_x_n.kod_ret_isk--\uk_ret_isk
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name/*Служба судебных приставов*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp_x_n on ur_mat.kod_ssp = kod_ssp_x_n.kod_ssp--\us_ssp
left outer join
(
--us_ssp
select a.kod_ssp as kod_ssp, /*number*//*key*/
a.name as name, /*Служба судебных приставов*//*string*/
a.adres as adres, /*Адрес*//*string*/
a.phone as phone/*Телефон секретариата*//*string*/

from us_ssp
a
--\us_ssp
)
kod_ssp on ur_mat.kod_ssp = kod_ssp.kod_ssp--\us_ssp
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_hist_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_hist_mat" key="kod_hist_mat" parent-table="ur_mat" parent-key="kod_mat" is-ms-upd="1" key-dimension="kod_hist_mat">
      <select-text>
--
select ur_hist_mat.ukaz as empty_vld, /*Указания*//*string*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.kod_zased as kod_zased, /*Судебный пристав*//*number*/
kod_zased.phone as phone, /*Телефон*//*string*/
ur_hist_mat.dat_post as dat_post, /*Дата вынесения постановления*//*date*/
ur_hist_mat.dat_vz as dat_vz, /*Дата поступления документа взыскателю*//*date*/
ur_hist_mat.result_kod_post as result_kod_post, /*Постановление*//*number*/
ur_hist_mat.kod_result as kod_result, /*Результат постановления*//*number*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судебный пристав*//*string*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Постановление*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат постановления*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.ukaz as ukaz, /*Указания*//*string*/
a.dat_vz as dat_vz, /*Дата поступления документа взыскателю*//*date*/
a.kod_scan as kod_scan, /*number*/
kod_result.kod_post as result_kod_post, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone/*Телефон*//*string*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
where
ur_hist_mat.kod_mat = :fk_kod_mat --\
</select-text>
      <columns>
        <column name="empty_vld" table="ur_hist_mat" type="string" title="Указания" parname="empty_vld" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="ukaz" temp-col-name="s3" />
        <column name="kod_mat" table="ur_hist_mat" type="number" title="Материалы переданные в суд" parname="cur_kod_mat1" ColumnVisible="0" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_mat_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_zased" table="ur_hist_mat" type="number" title="Судебный пристав" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_zased" temp-col-name="n5">
          <sel-list-compiled>
            <root>
              <query order="fio" class="1" timestamp="22.06.2016 21:13:51" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" elid="2652" ord="2652" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="fio">fio</column>
                </order>
                <select>--a
select <column table="a" column="kod_zased" as="kod_zased" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_zased" into="n1">a.kod_zased as kod_zased, /*number*//*key*/
</column><column table="a" column="fio" title="Судья" as="fio" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="fio" into="s1">a.fio as fio/*Судья*//*string*/
</column></select>
                <from>
from <query name="us_zased" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_zased
select <column table="a" column="kod_zased" type="number" key="1" as="kod_zased" sourcetable="./a/a" sourcecolumn="kod_zased" used="1">a.kod_zased as kod_zased, /*number*//*key*/
</column><column table="a" column="kod_ssp" type="number" as="kod_ssp" reference="us_ssp" refcol="kod_ssp" key="0" sourcetable="./a/a" sourcecolumn="kod_ssp" used="1">a.kod_ssp as kod_ssp, /*number*/
</column><column table="a" column="fio" type="string" title="Судья" as="fio" key="0" sourcetable="./a/a" sourcecolumn="fio" used="1">a.fio as fio/*Судья*//*string*/
</column></select><from>
from <table name="us_zased" as="a" used="1">us_zased
a
--\us_zased
</table></from>)
a
--\us_zased
</query><query name="us_ssp" as="kod_ssp" join="left outer" path="./a/kod_ssp" order="name" haskeys="1" used="1">left outer join
(
<order notext="1"><column column="name">name</column></order><select>--us_ssp
select <column table="a" column="kod_ssp" type="number" key="1" as="kod_ssp" sourcetable="./a/kod_ssp" sourcecolumn="kod_ssp" used="1">a.kod_ssp as kod_ssp, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Служба судебных приставов" as="name" key="0" sourcetable="./a/kod_ssp" sourcecolumn="name" used="1">a.name as name/*Служба судебных приставов*//*string*/
</column></select><from>
from <table name="us_ssp" as="a" title="Подразделение судебных приставов" used="1">us_ssp
a
--\us_ssp
</table></from><call function="=" type="bool">)
kod_ssp on <column table="a" column="kod_ssp">a.kod_ssp</column><text txtype="func"> = </text><column table="kod_ssp" column="kod_ssp">kod_ssp.kod_ssp</column></call>--\us_ssp
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="kod_ssp" column="kod_ssp">kod_ssp.kod_ssp</column><text txtype="func"> = </text><const><text>:kod_ssp </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_zased" as="kod_zased" key="1" thissrc="kod_zased">a.kod_zased</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_zased" as="kod_zased" key="1" thissrc="kod_zased">a.kod_zased</column><text txtype="func"> ) like lower( </text><const><text>:kod_zased_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="fio" title="Судья" as="fio" key="0" thissrc="fio">a.fio</column><text txtype="func"> ) like lower( </text><const><text>:fio_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by fio</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="fio" class="1" timestamp="22.06.2016 21:13:51" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" elid="2652" ord="2652" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query order="fio" class="1" timestamp="22.06.2016 21:13:51" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" elid="2652" ord="2652" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="kod_ssp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_zased_filter" type="string" />
                    <param name="fio_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_zased" as="kod_zased" key="1" />
                    <column table="a" column="fio" title="Судья" as="fio" key="0" />
                  </select>
                  <from>
                    <query name="us_zased" as="a">
                      <link name="kod_ssp" as="kod_ssp" table="us_ssp" child="us_zased" field="kod_ssp" parent="us_ssp" back="us_zased" title="Подразделение судебных приставов" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="=">
                        <column table="kod_ssp" column="kod_ssp" />
                        <useparam name="kod_ssp" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="kod_zased_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="fio" />
                        <useparam name="fio_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="fio" />
                  </order>
                  <withparams>
                    <useparam name="kod_ssp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_zased_filter" />
                    <useparam name="fio_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="kod_ssp">
                  <const>:kod_ssp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_zased_filter" type="string">
                  <const>:kod_zased_filter </const>
                </param>
                <param name="fio_filter" type="string">
                  <const>:fio_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="kod_ssp" parname="kod_ssp" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased.phone as phone, /*Телефон*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судебный пристав*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone/*Телефон*//*string*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="phone" table="ur_hist_mat" />
            <dependant name="kod_zased_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="phone" table="kod_zased" type="string" title="Телефон" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased.phone as phone, /*Телефон*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone/*Телефон*//*string*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_post" table="ur_hist_mat" type="date" title="Дата вынесения постановления" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_post" temp-col-name="d1" />
        <column name="dat_vz" table="ur_hist_mat" type="date" title="Дата поступления документа взыскателю" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_vz" temp-col-name="d5" />
        <column name="result_kod_post" table="ur_hist_mat" type="number" title="Постановление" ColumnEditable="1" is-user-editable="1" ColumnMandatory="1" is-updateable-ext="1" is-refreshed="1" update-target="result_kod_post" temp-col-name="n37">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" elid="2640" ord="2640" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_post" into="n1">a.kod_post as kod_post, /*number*//*key*/
</column><column table="a" column="name" as="name" key="0" used="1" type="string" title="Судебный акт" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Судебный акт*//*string*/
</column></select>
                <from>
from <query name="us_post" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_post
select <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*/
</column><column table="a" column="name" type="string" title="Судебный акт" vid="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Судебный акт*//*string*/
</column></select><from>
from <table name="us_post" as="a" title="Судебный акт" used="1">us_post
a
--\us_post
</table></from>)
a
--\us_post
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp">a.kod_sdp</column><text txtype="func"> = </text><const><text>:kod_sdp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" thissrc="kod_post">a.kod_post</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" thissrc="kod_post">a.kod_post</column><text txtype="func"> ) like lower( </text><const><text>:kod_post_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" elid="2640" ord="2640" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" elid="2640" ord="2640" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kod_sdp" type="number" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_post_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" />
                    <column table="a" column="name" as="name" key="0" />
                  </select>
                  <from>
                    <query name="us_post" as="a" title="Судебный акт" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="=" optional="1">
                          <column table="a" column="kod_sdp" />
                          <useparam name="kod_sdp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_post" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_post" />
                        <useparam name="kod_post_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kod_sdp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_post_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_sdp" type="number">
                  <const>:kod_sdp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_post_filter" type="string">
                  <const>:kod_post_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="folder_kod_sdp" parname="kod_sdp" />
            </withparams>
          </sel-list-cl-fact-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*Постановление*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*Постановление*//*number*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Постановление*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="result_kod_post" table="ur_hist_mat" />
            <dependant name="result_kod_post_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_result" table="ur_hist_mat" type="number" title="Результат постановления" is-user-editable="1" ColumnMandatory="1" ClientValid="empty_vld" is-updateable="1" is-updateable-ext="1" update-target="kod_result" temp-col-name="n1">
          <sel-list-compiled>
            <root>
              <query name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" haskeys="1" noname="1" path="." used="1">
                <select>--us_result_list
select <column table="a" column="kod_result" as="kod_result" key="1" fixed="1" used="1" type="number" sourcetable="./a" sourcecolumn="kod_result" into="n1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="name" title="Результат рассмотрения" as="name" key="0" used="1" type="string" sourcetable="./a" sourcecolumn="name" into="s1">a.name as name/*Результат рассмотрения*//*string*/
</column></select>
                <from>
from <query name="us_result" as="a" path="./a" haskeys="1" used="1">(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="name" type="string" title="Результат рассмотрения" vid="1" as="name" key="0" sourcetable="./a" sourcecolumn="name" used="1">a.name as name/*Результат рассмотрения*//*string*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from>)
a
--\us_result
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kod_post">a.kod_post</column><text txtype="func"> = </text><const><text>:kod_post </text></const>) </call><text txtype="func"> } </text></call></where>--\us_result_list
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" elid="2646" ord="2646" leaf="0" lvl="2" pelid="" haskeys="1">
              <queries>
                <query name="us_result_list" as="a">
                  <withparams>
                    <useparam name="kod_post" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_post" type="number" column="result_kod_post">
                  <const>:kod_post </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kod_post" type="number" column="result_kod_post" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*Постановление*//*number*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Постановление*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат постановления*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result, /*number*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,null as result_kod_post  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n1 as kod_result,t.n37 as result_kod_post  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,null as result_kod_post  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n1 as kod_result,t.n37 as result_kod_post  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="result_kod_post" table="ur_hist_mat" />
            <dependant name="result_kod_post_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="prim" table="ur_hist_mat" type="string" title="Примечание" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="prim" temp-col-name="s1" />
        <column name="kod_scan" table="ur_hist_mat" type="number" title="Файл" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_scan" temp-col-name="n31">
          <sel-list-compiled>
            <root>
              <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_scan" as="kod_scan" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_scan" into="n1">a.kod_scan as kod_scan, /**//*number*//*key*/
</column><column table="a" column="file_name" as="file_name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="file_name" into="s1">a.file_name as file_name/**//*string*/
</column></select>
                <from>
from <query name="ur_scan_docs" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_scan_docs
select <column table="a" column="kod_scan" type="number" comment="уникальный ключ" as="kod_scan" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_scan" used="1">a.kod_scan as kod_scan, /*number*//*key*/
</column><column table="a" column="file_name" type="string" title="" comment="имя файла" vid="1" spec-column="file-name" as="file_name" key="0" sourcetable="./a/a" sourcecolumn="file_name" used="1">a.file_name as file_name/**//*string*/
</column></select><from>
from <table name="ur_scan_docs" as="a" title="Файл" used="1">ur_scan_docs
a
--\ur_scan_docs
</table></from>)
a
--\ur_scan_docs
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> ) like lower( </text><const><text>:kod_scan_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="file_name" as="file_name" title="" thissrc="file_name">a.file_name</column><text txtype="func"> ) like lower( </text><const><text>:file_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" elid="3005" ord="3005" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_scan_filter" type="string" />
                    <param name="file_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_scan" as="kod_scan" title="" key="1" />
                    <column table="a" column="file_name" as="file_name" title="" />
                  </select>
                  <from>
                    <query name="ur_scan_docs" as="a" title="Файл" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="kod_scan_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="file_name" />
                        <useparam name="file_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_scan_filter" />
                    <useparam name="file_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_scan_filter" type="string">
                  <const>:kod_scan_filter </const>
                </param>
                <param name="file_name_filter" type="string">
                  <const>:file_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n31 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n31 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_scan_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_mat_x_n" table="ur_hist_mat.kod_mat" type="string" title="Материалы переданные в суд" text-source-for="kod_mat" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_zased_x_n" table="ur_hist_mat.kod_zased" type="string" title="Судебный пристав" text-source-for="kod_zased" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased_x_n.fio as kod_zased_x_n, /*Судебный пристав*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n5 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="result_kod_post_x_n" table="ur_hist_mat.result_kod_post" type="string" title="Постановление" text-source-for="result_kod_post" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select result_kod_post_x_n.name as result_kod_post_x_n, /*Постановление*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n37 as result_kod_post,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result_x_n" table="ur_hist_mat.kod_result" type="string" title="Результат постановления" text-source-for="kod_result" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_result_x_n.name as kod_result_x_n, /*Результат постановления*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n1 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan_x_n" table="ur_hist_mat.kod_scan" type="string" title="Файл" text-source-for="kod_scan" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n31 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n31 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
        <column name="kod_hist_mat" table="ur_hist_mat" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_hist_mat" temp-col-name="n2" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:empty_vld as empty_vld 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_post as dat_post 
,:dat_vz as dat_vz 
,:kod_result as kod_result 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
loop 
insert into ur_hist_mat 
(ukaz 
,kod_mat 
,kod_zased 
,dat_post 
,dat_vz 
,kod_result 
,prim 
,kod_scan 
,kod_hist_mat 
) 
 values  
(r.empty_vld 
,r.kod_mat 
,r.kod_zased 
,r.dat_post 
,r.dat_vz 
,r.kod_result 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
) 
 returning  
kod_hist_mat into :kod_hist_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_hist_mat where kod_hist_mat=:kod_hist_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_hist_mat' 
and 
names=:form_id 
and 
f2=:kod_hist_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:empty_vld as empty_vld 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_post as dat_post 
,:dat_vz as dat_vz 
,:result_kod_post as result_kod_post 
,:kod_result as kod_result 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s3 
,n3 
,n5 
,d1 
,d5 
,n37 
,n1 
,s1 
,n31 
,n2 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.empty_vld 
,r.kod_mat 
,r.kod_zased 
,r.dat_post 
,r.dat_vz 
,r.result_kod_post 
,r.kod_result 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
); 
end loop; 
else 
for r in  
 ( select  
:empty_vld as empty_vld 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_post as dat_post 
,:dat_vz as dat_vz 
,:result_kod_post as result_kod_post 
,:kod_result as kod_result 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
,a.dat_rassm 
,a.gp_es 
,a.u_m 
,a.d_m 
,a.gp_otv 
,a.kod_stage 
,a.kod_busin 
,a.dat_mor 
,a.kod_hist_mat_new 
,a.sud_izd 
,a.astrent 
,a.proc 
,a.kodp 
,a.opl_peni 
,a.opl_proc 
,a.opl_astrent 
,a.opl_osnreal 
,a.opl_gpotv 
,a.ogr 
,a.data_prinyat 
,a.snum_z 
,a.fio_court 
,a.osnreal 
,a.shtraf 
,a.peni 
,a.manual_sums 
,a.gp_ret 
,a.opl_ogr 
,a.dat_entry 
,a.dat_srok 
,a.proc_calc 
,a.kod_vid_proc 
,a.proc_const 
,a.opl_sud_izd 
,a.dat_mor_out 
,a.dat_send_il 
,a.opl_ogr_dat 
,a.opl_sud_izd_dat 
,a.dat_send_zv 
,a.dat_receipt_post 
,a.dat_send_petition_il 
,a.gosposhlina 
,a.dat_um_mor_dolg 
,a.sum_um_mor_dolg 
,a.kod_osn_um_mor_dolg 
,a.comment_um_mor_dolg 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
 
from ur_hist_mat a  where kod_hist_mat=:kod_hist_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s3 
,n3 
,n5 
,d1 
,d5 
,n37 
,n1 
,s1 
,n31 
,n2 
,d2 
,n4 
,s2 
,d3 
,n6 
,n7 
,n8 
,d4 
,n9 
,n10 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,d6 
,s4 
,s5 
,n21 
,n22 
,n23 
,n24 
,n25 
,n26 
,d7 
,d8 
,n27 
,n28 
,n29 
,n30 
,d9 
,d10 
,d11 
,d12 
,d13 
,d14 
,d15 
,n32 
,d16 
,n33 
,n34 
,s6 
,n35 
,n36 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.empty_vld 
,r.kod_mat 
,r.kod_zased 
,r.dat_post 
,r.dat_vz 
,r.result_kod_post 
,r.kod_result 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
,r.dat_rassm 
,r.gp_es 
,r.u_m 
,r.d_m 
,r.gp_otv 
,r.kod_stage 
,r.kod_busin 
,r.dat_mor 
,r.kod_hist_mat_new 
,r.sud_izd 
,r.astrent 
,r.proc 
,r.kodp 
,r.opl_peni 
,r.opl_proc 
,r.opl_astrent 
,r.opl_osnreal 
,r.opl_gpotv 
,r.ogr 
,r.data_prinyat 
,r.snum_z 
,r.fio_court 
,r.osnreal 
,r.shtraf 
,r.peni 
,r.manual_sums 
,r.gp_ret 
,r.opl_ogr 
,r.dat_entry 
,r.dat_srok 
,r.proc_calc 
,r.kod_vid_proc 
,r.proc_const 
,r.opl_sud_izd 
,r.dat_mor_out 
,r.dat_send_il 
,r.opl_ogr_dat 
,r.opl_sud_izd_dat 
,r.dat_send_zv 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.gosposhlina 
,r.dat_um_mor_dolg 
,r.sum_um_mor_dolg 
,r.kod_osn_um_mor_dolg 
,r.comment_um_mor_dolg 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_hist_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_hist_mat set  
(ukaz 
,kod_mat 
,kod_zased 
,dat_post 
,dat_vz 
,kod_result 
,prim 
,kod_scan 
,kod_hist_mat 
) 
= 
 ( select  
:empty_vld as empty_vld 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_post as dat_post 
,:dat_vz as dat_vz 
,:kod_result as kod_result 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
where 
kod_hist_mat=:kod_hist_mat 
;
end;
</update-text>
      <scheme>
        <table name="ur_hist_mat" as="ur_hist_mat">
          <columns>
            <column name="empty_vld" type="string" title="Указания" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_zased" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="phone" type="string" title="Телефон" />
            <column name="dat_post" type="date" title="Дата вынесения постановления" />
            <column name="dat_vz" type="date" title="Дата поступления документа взыскателю" />
            <column name="result_kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat_x_n" type="string" title="Материалы переданные в суд" visible="0" />
            <column name="kod_zased_x_n" type="string" title="Судебный пристав" />
            <column name="result_kod_post_x_n" type="string" title="Постановление" />
            <column name="kod_result_x_n" type="string" title="Результат постановления" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_hist_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="empty_vld" type="string" title="Указания" visible="0" />
            <column name="kod_mat_x_n" type="string" title="Материалы переданные в суд" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_zased_x_n" type="string" title="Судебный пристав" />
            <column name="kod_zased" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="phone" type="string" title="Телефон" />
            <column name="dat_post" type="date" title="Дата вынесения постановления" />
            <column name="dat_vz" type="date" title="Дата поступления документа взыскателю" />
            <column name="result_kod_post_x_n" type="string" title="Постановление" />
            <column name="result_kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result_x_n" type="string" title="Результат постановления" />
            <column name="kod_result" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_hist_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_hist_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_hist_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_hist_mat.ukaz as empty_vld, /*Указания*//*string*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.kod_zased as kod_zased, /*Судебный пристав*//*number*/
kod_zased.phone as phone, /*Телефон*//*string*/
ur_hist_mat.dat_post as dat_post, /*Дата вынесения постановления*//*date*/
ur_hist_mat.dat_vz as dat_vz, /*Дата поступления документа взыскателю*//*date*/
ur_hist_mat.result_kod_post as result_kod_post, /*Постановление*//*number*/
ur_hist_mat.kod_result as kod_result, /*Результат постановления*//*number*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судебный пристав*//*string*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Постановление*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат постановления*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.ukaz as ukaz, /*Указания*//*string*/
a.dat_vz as dat_vz, /*Дата поступления документа взыскателю*//*date*/
a.kod_scan as kod_scan, /*number*/
a.result_kod_post as result_kod_post, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.ukaz as ukaz,a.dat_vz as dat_vz,a.kod_scan as kod_scan,null as result_kod_post,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat,t.n1 as kod_result,t.d1 as dat_post,t.s1 as prim,t.n5 as kod_zased,t.s3 as ukaz,t.d5 as dat_vz,t.n31 as kod_scan,t.n37 as result_kod_post,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.ukaz as ukaz,a.dat_vz as dat_vz,a.kod_scan as kod_scan,null as result_kod_post,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n2 as kod_hist_mat,t.n3 as kod_mat,t.n1 as kod_result,t.d1 as dat_post,t.s1 as prim,t.n5 as kod_zased,t.s3 as ukaz,t.d5 as dat_vz,t.n31 as kod_scan,t.n37 as result_kod_post,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone/*Телефон*//*string*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="f10" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="is_customer10_flag" key="val" is-ms-upd="0" is-top="1">
      <select-text>
--
select f10.val as val/*number*/

from (
--is_customer10_flag
select  case  when (a.customer_id = 10)  then 1 else 0 end  as val/*number*/

from (
--rs_rep_sets
select a.customer_id as customer_id/**//*number*/

from rs_rep_sets
a
--\rs_rep_sets
)
a
--\rs_rep_sets
)
f10
--\is_customer10_flag
--\
</select-text>
      <columns>
        <column name="val" table="f10" type="number" title="" parname="f10" ColumnVisible="0" is-refreshed="1" />
      </columns>
      <scheme>
        <table name="is_customer10_flag" as="f10">
          <columns>
            <column name="val" type="number" title="" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
    </table>
  </dataset>
</root>