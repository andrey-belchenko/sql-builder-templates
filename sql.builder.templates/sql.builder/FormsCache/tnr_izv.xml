<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="tnr_izv" timestamp="28.12.2023 14:43:33" title="Счет" show-toolbar="1" with-behavior="0" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms\tnr_izv.xml" elid="190" ord="190" leaf="0" lvl="2" pelid="">
    <fieldgroup title="Счет" id="41890175">
      <field table="a" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="42551780" />
      <field table="a" name="kod_dog" title="Договор" controlType="UICombo" rows-limit="100" id="25958465">
        <listquery id="47541680">
          <query name="kr_dogovor(kodp)" id="54077622">
            <withparams id="40272686">
              <useparam name="kodp" id="13421911" />
            </withparams>
          </query>
        </listquery>
      </field>
      <field table="a" name="num_izv" title="Номер счета" controlType="UIText" edit-mask="N2" rows-limit="100" id="36681098" />
      <field table="a" name="date_izv" title="Дата счета" controlType="UIDate" rows-limit="100" id="40163678" />
      <field table="a" name="ym" title="Отчетный период счета" controlType="UICombo" rows-limit="100" id="1150210" />
      <field table="a" name="tnr_acc_nach" title="Начислено" controlType="UIText" edit-mask="N2" rows-limit="100" id="48631208" />
    </fieldgroup>
    <fieldgroup title="Начисления" id="55670221">
      <grid table="acc" show-toolbar="1" id="17511046">
        <toolbar id="27663729">
          <uicommand button-type="grid-save" column-visible="0" name="grid-save" control-name="ButtonCommit" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="365" ord="365" leaf="1" lvl="2" pelid="" title="" id="5586777" />
        </toolbar>
        <columns id="63640646">
          <field table="acc" name="dat_priem" title="" controlType="UIDate" rows-limit="100" id="56891545" />
          <field table="acc" name="kod_dog" title="Договор" controlType="UICombo" rows-limit="100" id="63195061" />
          <field table="acc" name="vid_t" title="Вид начисления" controlType="UICombo" rows-limit="100" id="34270638" />
          <field table="acc" name="ym" title="Период" controlType="UICombo" rows-limit="100" id="6447604" />
          <field table="acc" name="cust" title="Количество" controlType="UIText" edit-mask="N2" rows-limit="100" id="3932406" />
          <field table="acc" name="price" title="Цена" controlType="UIText" edit-mask="N2" rows-limit="100" id="60759078" />
          <field table="acc" name="nachisl" title="Начислено" controlType="UIText" edit-mask="N2" rows-limit="100" id="15002099" />
        </columns>
      </grid>
    </fieldgroup>
  </form>
  <params>
    <param name="kodp" type="number" />
    <param type="number" name="kod_izv">
      <const>506201573</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="kodp" type="number" />
      <param type="number" name="kod_izv">
        <const>506201573</const>
      </param>
    </params>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="a_has_changes" parname="a_has_changes" />
      <field type="string" name="acc_has_changes" parname="acc_has_changes" />
    </fields>
    <table name="a" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" new-rows-vis-for-other-tbls="1" update-target="tnr_izv" key="kod_izv" is-ms-upd="1" is-top="1" key-dimension="kod_izv">
      <select-text>
--
select kod_dog.kodp as kodp, /*number*/
a.kod_dog as kod_dog, /*number*/
a.num_izv as num_izv, /*Номер счета*//*number*/
a.date_izv as date_izv, /*Дата счета*//*date*/
a.ym as ym, /*Отчетный период счета*//*number*/
qube.tnr_acc_nach1 as tnr_acc_nach, /*Начислено*//*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
ym_x_n.name as ym_x_n, /*Отчетный период счета*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
sum(qube.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select un.kod_izv as kod_izv, /*number*//*key*/
sum(un.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from tnr_account
a
--\tnr_account
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from tnr_izv
a
--\tnr_izv
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
(a.kod_izv = :kod_izv )  and (a.kod_izv is not null ) )
--\
union all
(
--
select a.kod_izv as kod_izv, /*number*//*key*/
null as tnr_acc_nach1/*number*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from tnr_izv
a
--\tnr_izv
)
a
--\tnr_izv
where
(a.kod_izv = :kod_izv )  and (a.kod_izv is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_izv/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_izv/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.num_izv as num_izv, /*Номер счета*//*number*/
a.ym as ym, /*Отчетный период счета*//*number*/
a.kod_dog as kod_dog, /*number*/
a.date_izv as date_izv, /*Дата счета*//*date*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from tnr_izv
a
--\tnr_izv
)
a on a.kod_izv = qube.kod_izv--\tnr_izv
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on a.ym = ym_x_n.ym--\spr_time_ym
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on a.kod_dog = kod_dog.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_dog.kodp = kodp_x_n.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="kodp" table="kod_dog" type="number" title="Абонент" ColumnEditable="0" ClientDefault="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog.kodp as kodp, /*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on a.kod_dog = kod_dog.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_dog" table="a" type="number" title="Договор" parname="kod_dog" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_dog" temp-col-name="n1">
          <sel-list-compiled>
            <root>
              <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_dog" into="n1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" as="ndog" key="0" used="1" type="string" title="Номер договора" agg="stragg_dist" sourcetable="./a/a" sourcecolumn="ndog" into="s1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="dep" column="name" as="dep_name" title="Отделение" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="name" into="s2">dep.name as dep_name, /*Отделение*//*string*/
</column><column table="kodp" column="nump" as="nump" key="0" used="1" type="string" title="Код абонента" sourcetable="./a/kodp" sourcecolumn="nump" into="s3">kodp.nump as nump, /*Код абонента*//*string*/
</column><column table="kodp" column="name" as="payer_name" key="0" used="1" type="string" title="Наименование абонента" agg="list" sourcetable="./a/kodp" sourcecolumn="name" into="s4">kodp.name as payer_name/*Наименование абонента*//*string*/
</column></select>
                <from>
from <query name="kr_dogovor" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/a" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
a
--\kr_dogovor
</query><query name="kr_org" as="dep" join="left outer" path="./a/dep" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/dep" sourcecolumn="name" used="1">a.name as name/*Отделение*//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="a" column="dep">a.dep</column><text txtype="func"> = </text><column table="dep" column="kodp">dep.kodp</column></call>--\kr_org
</query><query name="kr_payer" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1" as="nump" key="0" sourcetable="./a/kodp" sourcecolumn="nump" used="1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list" as="name" fact="kr_payer_name" key="0" sourcetable="./a/kodp" sourcecolumn="name" used="1">a.name as name/*Наименование абонента*//*string*/
</column></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><const><text>:kodp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" key="0" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="name" as="dep_name" title="Отделение" key="0" thissrc="dep_name">dep.name</column><text txtype="func"> ) like lower( </text><const><text>:dep_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="nump" as="nump" key="0" thissrc="nump">kodp.nump</column><text txtype="func"> ) like lower( </text><const><text>:nump_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="name" as="payer_name" key="0" thissrc="payer_name">kodp.name</column><text txtype="func"> ) like lower( </text><const><text>:payer_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="kodp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="dep_name_filter" type="string" />
                    <param name="nump_filter" type="string" />
                    <param name="payer_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" />
                    <column table="a" column="ndog" as="ndog" key="0" />
                    <column table="dep" column="name" as="dep_name" title="Отделение" key="0" />
                    <column table="kodp" column="nump" as="nump" key="0" />
                    <column table="kodp" column="name" as="payer_name" key="0" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="a" title="Договор">
                      <link name="kodp" as="kodp" table="kr_payer" child="kr_dogovor" field="kodp" parent="kr_payer" back="kr_dogovor" title="Абонент" />
                      <link name="dep" as="dep" table="kr_org" child="kr_dogovor" field="dep" parent="kr_org" back="kr_dog_dep" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="=" optional="1">
                          <column table="a" column="kodp" />
                          <useparam name="kodp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_name" />
                        <useparam name="dep_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nump" />
                        <useparam name="nump_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="payer_name" />
                        <useparam name="payer_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kodp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="dep_name_filter" />
                    <useparam name="nump_filter" />
                    <useparam name="payer_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="kodp">
                  <const>:kodp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="dep_name_filter" type="string">
                  <const>:dep_name_filter </const>
                </param>
                <param name="nump_filter" type="string">
                  <const>:nump_filter </const>
                </param>
                <param name="payer_name_filter" type="string">
                  <const>:payer_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="kodp" parname="kodp" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog.kodp as kodp, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on a.kod_dog = kod_dog.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_dog.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
where
acc.kod_account is not null )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from ( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp" table="a" />
            <dependant name="kodp_x_n" table="a" />
            <dependant name="kod_dog_x_n" table="a" />
            <dependant name="tnr_izv_kod_dog" table="acc" />
          </dependants>
        </column>
        <column name="num_izv" table="a" type="number" title="Номер счета" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="num_izv" temp-col-name="n2" />
        <column name="date_izv" table="a" type="date" title="Дата счета" is-user-editable="1" ColumnDefault="cur-date" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="date_izv" temp-col-name="d1" />
        <column name="ym" table="a" type="number" title="Отчетный период счета" ColumnEditable="0" ColumnDefault="kr_calc_cur2" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="ym" temp-col-name="n3">
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ym_x_n.name as ym_x_n, /*Отчетный период счета*//*string*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.ym as ym/*Отчетный период счета*//*number*/

from (select a.kod_izv as kod_izv,a.ym as ym  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n3 as ym  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.ym as ym  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n3 as ym  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on a.ym = ym_x_n.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ym_x_n" table="a" />
          </dependants>
        </column>
        <column name="tnr_acc_nach" table="a" type="number" title="Начислено" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_acc_nach1 as tnr_acc_nach, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
sum(qube.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select un.kod_izv as kod_izv, /*number*//*key*/
sum(un.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from ( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
a
--\(select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select a.kod_izv as kod_izv, /*number*//*key*/
null as tnr_acc_nach1/*number*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
where
a.kod_izv is not null )
--\
)
--\
)
un
--\
 group by
un.kod_izv/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_izv/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on a.kod_izv = qube.kod_izv--\tnr_izv
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_x_n" table="kod_dog.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on a.kod_dog = kod_dog.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_dog.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_dog_x_n" table="a.kod_dog" type="string" title="Договор" text-source-for="kod_dog" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ym_x_n" table="a.ym" type="string" title="Отчетный период счета" text-source-for="ym" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ym_x_n.name as ym_x_n, /*Отчетный период счета*//*string*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.ym as ym/*Отчетный период счета*//*number*/

from (select a.kod_izv as kod_izv,a.ym as ym  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n3 as ym  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.ym as ym  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n3 as ym  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on a.ym = ym_x_n.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="kod_izv" table="a" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_izv" temp-col-name="n4" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_dog as kod_dog 
,:num_izv as num_izv 
,:date_izv as date_izv 
,:ym as ym 
,:kod_izv as kod_izv 
 
from dual ) 
 
loop 
insert into tnr_izv 
(kod_dog 
,num_izv 
,date_izv 
,ym 
,kod_izv 
) 
 values  
(r.kod_dog 
,r.num_izv 
,r.date_izv 
,r.ym 
,r.kod_izv 
) 
 returning  
kod_izv into :kod_izv; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from tnr_izv where kod_izv=:kod_izv</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='a' 
and 
names=:form_id 
and 
f2=:kod_izv; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_dog as kod_dog 
,:num_izv as num_izv 
,:date_izv as date_izv 
,:ym as ym 
,:kod_izv as kod_izv 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,d1 
,n3 
,n4 
) 
 values  
('a' 
,:form_id 
,:kod_izv 
,:row_state_id 
,r.kod_dog 
,r.num_izv 
,r.date_izv 
,r.ym 
,r.kod_izv 
); 
end loop; 
else 
for r in  
 ( select  
:kod_dog as kod_dog 
,:num_izv as num_izv 
,:date_izv as date_izv 
,:ym as ym 
,:kod_izv as kod_izv 
,a.r_sch 
,a.l_sch 
,a.adres 
,a.oplata 
,a.d_m 
,a.u_m 
,a.type_izv 
,a.dat_bzad 
,a.pr_old 
,a.tep_el 
,a.dep 
,a.date_print 
,a.dat_bzad_peni 
,a.kod_dog_post 
,a.platezh_rec 
 
from tnr_izv a  where kod_izv=:kod_izv) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,d1 
,n3 
,n4 
,s1 
,s2 
,s3 
,n5 
,d2 
,s4 
,n6 
,d3 
,n7 
,n8 
,n9 
,d4 
,d5 
,n10 
,n11 
) 
 values  
('a' 
,:form_id 
,:kod_izv 
,:row_state_id 
,r.kod_dog 
,r.num_izv 
,r.date_izv 
,r.ym 
,r.kod_izv 
,r.r_sch 
,r.l_sch 
,r.adres 
,r.oplata 
,r.d_m 
,r.u_m 
,r.type_izv 
,r.dat_bzad 
,r.pr_old 
,r.tep_el 
,r.dep 
,r.date_print 
,r.dat_bzad_peni 
,r.kod_dog_post 
,r.platezh_rec 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='a' and names=:form_id</clear-temp-text>
      <update-text>begin
update tnr_izv set  
(kod_dog 
,num_izv 
,date_izv 
,ym 
,kod_izv 
) 
= 
 ( select  
:kod_dog as kod_dog 
,:num_izv as num_izv 
,:date_izv as date_izv 
,:ym as ym 
,:kod_izv as kod_izv 
 
from dual ) 
 
where 
kod_izv=:kod_izv 
;
end;
</update-text>
      <scheme>
        <table name="tnr_izv" as="a">
          <columns>
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_izv" type="number" title="Номер счета" />
            <column name="date_izv" type="date" title="Дата счета" />
            <column name="ym" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="tnr_acc_nach" type="number" title="Начислено" />
            <column name="kodp_x_n" type="string" title="Абонент" />
            <column name="kod_dog_x_n" type="string" title="Договор" />
            <column name="ym_x_n" type="string" title="Отчетный период счета" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_izv" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_izv_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_izv_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select kod_dog.kodp as kodp, /*number*/
a.kod_dog as kod_dog, /*number*/
a.num_izv as num_izv, /*Номер счета*//*number*/
a.date_izv as date_izv, /*Дата счета*//*date*/
a.ym as ym, /*Отчетный период счета*//*number*/
qube.tnr_acc_nach1 as tnr_acc_nach, /*Начислено*//*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
ym_x_n.name as ym_x_n, /*Отчетный период счета*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
sum(qube.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select un.kod_izv as kod_izv, /*number*//*key*/
sum(un.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from ( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
a
--\(select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select a.kod_izv as kod_izv, /*number*//*key*/
null as tnr_acc_nach1/*number*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
where
a.kod_izv is not null )
--\
)
--\
)
un
--\
 group by
un.kod_izv/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_izv/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.num_izv as num_izv, /*Номер счета*//*number*/
a.ym as ym, /*Отчетный период счета*//*number*/
a.kod_dog as kod_dog, /*number*/
a.date_izv as date_izv, /*Дата счета*//*date*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_izv as kod_izv,a.num_izv as num_izv,a.ym as ym,a.kod_dog as kod_dog,a.date_izv as date_izv,0 as is_new,1 as is_not_new  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n2 as num_izv,t.n3 as ym,t.n1 as kod_dog,t.d1 as date_izv,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv,a.num_izv as num_izv,a.ym as ym,a.kod_dog as kod_dog,a.date_izv as date_izv,0 as is_new,1 as is_not_new  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv,t.n2 as num_izv,t.n3 as ym,t.n1 as kod_dog,t.d1 as date_izv,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on a.kod_izv = qube.kod_izv--\tnr_izv
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on a.ym = ym_x_n.ym--\spr_time_ym
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on a.kod_dog = kod_dog.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_dog.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="acc" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" new-rows-vis-for-other-tbls="1" update-target="tnr_account" key="kod_account" parent-table="a" parent-key="kod_izv" is-ms-upd="1" key-dimension="kod_acc_byt">
      <select-text>
--
select acc.dat_priem as dat_priem, /*date*/
acc.kod_dog as kod_dog, /*number*/
acc.vid_t as vid_t, /*number*/
acc.ym as ym, /*Период*//*number*/
acc.cust as cust, /*Количество*//*number*/
acc.price as price, /*Цена*//*number*/
acc.nachisl as nachisl, /*Начислено*//*number*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
vid_t_x_n.sp_col_name as vid_t_x_n, /*Вид начисления*//*string*/
ym_x_n.name as ym_x_n, /*Период*//*string*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.calc_nachisl as calc_nachisl, /*Цена*//*number*/
acc.is_new as is_new, /*number*/
acc.is_not_new as is_not_new, /*number*/
acc.kod_account as kod_account, /*number*//*key*/
acc.kod_izv as kod_izv/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from tnr_account
a
--\tnr_account
)
acc
--\tnr_account
where
(acc.kod_izv = :fk_kod_izv )  and (acc.kod_account is not null ) )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from tnr_izv
a
--\tnr_izv
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from tnr_account
a
--\tnr_account
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
(acc.kod_izv = :fk_kod_izv )  and (acc.kod_account is not null )  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from tnr_izv
a
--\tnr_izv
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.ym as ym, /*Период*//*number*/
a.dat_priem as dat_priem, /**//*date*/
a.vid_t as vid_t, /**//*number*/
a.cust as cust, /*Количество*//*number*/
a.price as price, /*Цена*//*number*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv, /*number*/
a.price * a.cust as calc_nachisl, /*Цена*//*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from tnr_account
a
--\tnr_account
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on acc.ym = ym_x_n.ym--\spr_time_ym
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on acc.vid_t = vid_t_x_n.vid_t--\sk_nachisl
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on acc.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</select-text>
      <columns>
        <column name="dat_priem" table="acc" type="date" title="" ColumnVisible="0" ColumnDefault="cur-date" is-updateable="1" is-updateable-ext="1" update-target="dat_priem" temp-col-name="d1" />
        <column name="kod_dog" table="acc" type="number" title="Договор" is-user-editable="1" ClientDefault="kod_dog" NewVal="qube.tnr_izv_kod_dog" is-updateable="1" is-updateable-ext="1" update-target="kod_dog" temp-col-name="n1">
          <sel-list-compiled>
            <root>
              <query title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_dog" as="kod_dog" title="" key="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_dog" into="n1">a.kod_dog as kod_dog, /**//*number*//*key*/
</column><column table="a" column="kodp" as="kodp" title="" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kodp" reference="kr_payer" refcol="kodp" into="n2">a.kodp as kodp, /**//*number*/
</column><column table="kodp" column="sp_col_name" as="kodp_x_n" title="" key="0" used="1" type="string" agg="list" into="s1">kodp.sp_col_name as kodp_x_n, /**//*string*/
</column><column table="a" column="ndog" as="ndog" title="Номер договора" key="0" used="1" type="string" agg="stragg_dist" sourcetable="./a/a" sourcecolumn="ndog" into="s2">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="dat_dog" into="d1">a.dat_dog as dat_dog, /*Дата начала действия*//*date*/
</column><column table="a" column="dep" as="dep" title="" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="dep" into="n3">a.dep as dep, /**//*number*/
</column><column table="dep" column="name" as="dep_x_n" title="" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="name" into="s3">dep.name as dep_x_n/**//*string*/
</column></select>
                <from>
from <query name="kr_dogovor" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dat_dog" type="date" comment="дата начала договора" title="Дата начала действия" vid="1" dimension="dat_s" is-final-dimension="1" is-private-dimension="1" as="dat_dog" key="0" sourcetable="./a/a" sourcecolumn="dat_dog" used="1">a.dat_dog as dat_dog, /*Дата начала действия*//*date*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/a" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
a
--\kr_dogovor
</query><query name="kr_org" as="dep" join="left outer" path="./a/dep" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/dep" sourcecolumn="name" used="1">a.name as name/*Отделение*//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="a" column="dep">a.dep</column><text txtype="func"> = </text><column table="dep" column="kodp">dep.kodp</column></call>--\kr_org
</query><query name="kr_payer" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><call function="||" as="sp_col_name" title="" key="0" pth="" type="string" used="1" agg="list"><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1">a.nump</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list">a.name</column> as sp_col_name/**//*string*/
</call></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_dog" as="kod_dog" title="" key="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_dog" as="kod_dog" title="" key="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kodp" as="kodp" title="" thissrc="kodp">a.kodp</column><text txtype="func"> ) like lower( </text><const><text>:kodp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="sp_col_name" as="kodp_x_n" title="" thissrc="kodp_x_n">kodp.sp_col_name</column><text txtype="func"> ) like lower( </text><const><text>:kodp_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" title="Номер договора" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" thissrc="dat_dog">a.dat_dog</column><text txtype="func"> ) like lower( </text><const><text>:dat_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dep" as="dep" title="" thissrc="dep">a.dep</column><text txtype="func"> ) like lower( </text><const><text>:dep_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="name" as="dep_x_n" title="" thissrc="dep_x_n">dep.name</column><text txtype="func"> ) like lower( </text><const><text>:dep_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="kodp_filter" type="string" />
                    <param name="kodp_x_n_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="dat_dog_filter" type="string" />
                    <param name="dep_filter" type="string" />
                    <param name="dep_x_n_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_dog" as="kod_dog" title="" key="1" />
                    <column table="a" column="kodp" as="kodp" title="" />
                    <column table="kodp" column="sp_col_name" as="kodp_x_n" title="" />
                    <column table="a" column="ndog" as="ndog" title="Номер договора" />
                    <column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" />
                    <column table="a" column="dep" as="dep" title="" />
                    <column table="dep" column="name" as="dep_x_n" title="" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="a" title="Договор">
                      <link name="kodp" as="kodp" table="kr_payer" child="kr_dogovor" field="kodp" parent="kr_payer" back="kr_dogovor" title="Абонент" />
                      <link name="dep" as="dep" table="kr_org" child="kr_dogovor" field="dep" parent="kr_org" back="kr_dog_dep" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="kodp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp_x_n" />
                        <useparam name="kodp_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_dog" />
                        <useparam name="dat_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep" />
                        <useparam name="dep_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_x_n" />
                        <useparam name="dep_x_n_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="kodp_filter" />
                    <useparam name="kodp_x_n_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="dat_dog_filter" />
                    <useparam name="dep_filter" />
                    <useparam name="dep_x_n_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="kodp_filter" type="string">
                  <const>:kodp_filter </const>
                </param>
                <param name="kodp_x_n_filter" type="string">
                  <const>:kodp_x_n_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="dat_dog_filter" type="string">
                  <const>:dat_dog_filter </const>
                </param>
                <param name="dep_filter" type="string">
                  <const>:dep_filter </const>
                </param>
                <param name="dep_x_n_filter" type="string">
                  <const>:dep_x_n_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
where
acc.kod_account is not null )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from ( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_dog_x_n" table="acc" />
          </dependants>
        </column>
        <column name="vid_t" table="acc" type="number" title="Вид начисления" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="vid_t" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" elid="2886" ord="2886" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="vid_t" as="vid_t" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="vid_t" into="n1">a.vid_t as vid_t, /**//*number*//*key*/
</column><column table="a" column="num_t" as="num_t" title="Код вида начисления" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="num_t" into="s1">a.num_t as num_t, /*Код вида начисления*//*string*/
</column><column table="a" column="name" as="name" title="Наименование вида начисления" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s2">a.name as name, /*Наименование вида начисления*//*string*/
</column><column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" key="0" used="1" type="number" sourcetable="./a/a/vid_real" sourcecolumn="vid_real" reference="sk_vid_real" refcol="vid_real" into="n2">a.vid_real_num as vid_real_num, /*Код вида реализации*//*number*/
</column><column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" key="0" used="1" type="string" sourcetable="./a/a/vid_real" sourcecolumn="name" into="s3">a.vid_real_name as vid_real_name/*Вид реализации*//*string*/
</column></select>
                <from>
from <query name="sk_nachisl" as="a" path="./a/a" haskeys="1" used="1">(
<select>--sk_nachisl
select <column table="a" column="vid_t" type="number" title="" comment="vid_t=25 -население&#xA;vid_t=30 - самовольное подкл.электроприемников" key-dimension="vid_t" key="1" as="vid_t" sourcetable="./a/a" sourcecolumn="vid_t" used="1">a.vid_t as vid_t, /**//*number*//*key*/
</column><column table="a" column="num_t" type="string" title="Код вида начисления" vid="1" is-name="1" as="num_t" key="0" sourcetable="./a/a" sourcecolumn="num_t" used="1">a.num_t as num_t, /*Код вида начисления*//*string*/
</column><column table="a" column="name" type="string" title="Наименование вида начисления" vid="1" is-name="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name, /*Наименование вида начисления*//*string*/
</column><column table="vid_real" column="vid_real" vid="1" as="vid_real_num" title="Код вида реализации" reference="sk_vid_real" refcol="vid_real" key="0" used="1" type="number" sourcetable="./a/a/vid_real" sourcecolumn="vid_real">vid_real.vid_real as vid_real_num, /*Код вида реализации*//*number*/
</column><column table="vid_real" column="name" vid="1" as="vid_real_name" key="0" used="1" type="string" title="Вид реализации" sourcetable="./a/a/vid_real" sourcecolumn="name">vid_real.name as vid_real_name/*Вид реализации*//*string*/
</column></select><from>
from <table name="sk_nachisl" as="a" title="Вид начисления" used="1">sk_nachisl
a
--\sk_nachisl
</table><query name="sk_vid_real" dimension="1" as="vid_real" join="left outer" path="./a/a/vid_real" haskeys="1" used="1">left outer join
(
<select>--sk_vid_real
select <column table="a" column="vid_real" type="number" title="" as="vid_real" key="1" fixed="1" used="1" sourcetable="./a/a/vid_real" sourcecolumn="vid_real">a.vid_real as vid_real, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Вид реализации" comment="полное наименование- уже не печатается в назначение платежа" as="name" key="0" used="1" sourcetable="./a/a/vid_real" sourcecolumn="name">a.name as name/*Вид реализации*//*string*/
</column></select><from>
from <table name="sk_vid_real" as="a" title="Вид реализации" dimension="1" used="1">sk_vid_real
a
--\sk_vid_real
</table></from><call function="=" type="bool">)
vid_real on <column table="a" column="vid_real">a.vid_real</column><text txtype="func"> = </text><column table="vid_real" column="vid_real">vid_real.vid_real</column></call>--\sk_vid_real
</query></from>)
a
--\sk_nachisl
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="vid_t" as="vid_t" title="" key="1" thissrc="vid_t">a.vid_t</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_t" as="vid_t" title="" key="1" thissrc="vid_t">a.vid_t</column><text txtype="func"> ) like lower( </text><const><text>:vid_t_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_t" as="num_t" title="Код вида начисления" thissrc="num_t">a.num_t</column><text txtype="func"> ) like lower( </text><const><text>:num_t_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование вида начисления" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" thissrc="vid_real_num">a.vid_real_num</column><text txtype="func"> ) like lower( </text><const><text>:vid_real_num_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" thissrc="vid_real_name">a.vid_real_name</column><text txtype="func"> ) like lower( </text><const><text>:vid_real_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" elid="2886" ord="2886" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" elid="2886" ord="2886" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="vid_t_filter" type="string" />
                    <param name="num_t_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="vid_real_num_filter" type="string" />
                    <param name="vid_real_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="vid_t" as="vid_t" title="" key="1" />
                    <column table="a" column="num_t" as="num_t" title="Код вида начисления" />
                    <column table="a" column="name" as="name" title="Наименование вида начисления" />
                    <column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" />
                    <column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" />
                  </select>
                  <from>
                    <query name="sk_nachisl" as="a" title="Вид начисления" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="vid_t" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_t" />
                        <useparam name="vid_t_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_t" />
                        <useparam name="num_t_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_real_num" />
                        <useparam name="vid_real_num_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_real_name" />
                        <useparam name="vid_real_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="vid_t_filter" />
                    <useparam name="num_t_filter" />
                    <useparam name="name_filter" />
                    <useparam name="vid_real_num_filter" />
                    <useparam name="vid_real_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="vid_t_filter" type="string">
                  <const>:vid_t_filter </const>
                </param>
                <param name="num_t_filter" type="string">
                  <const>:num_t_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="vid_real_num_filter" type="string">
                  <const>:vid_real_num_filter </const>
                </param>
                <param name="vid_real_name_filter" type="string">
                  <const>:vid_real_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vid_t_x_n.sp_col_name as vid_t_x_n, /*Вид начисления*//*string*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.vid_t as vid_t/**//*number*/

from (select a.kod_account as kod_account,a.vid_t as vid_t  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n2 as vid_t  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.vid_t as vid_t  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n2 as vid_t  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on acc.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="vid_t_x_n" table="acc" />
          </dependants>
        </column>
        <column name="ym" table="acc" type="number" title="Период" ColumnEditable="0" ColumnDefault="kr_calc_cur2" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="ym" temp-col-name="n3">
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ym_x_n.name as ym_x_n, /*Период*//*string*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.ym as ym/*Период*//*number*/

from (select a.kod_account as kod_account,a.ym as ym  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n3 as ym  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.ym as ym  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n3 as ym  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on acc.ym = ym_x_n.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ym_x_n" table="acc" />
          </dependants>
        </column>
        <column name="cust" table="acc" type="number" title="Количество" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="cust" temp-col-name="n4">
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select acc.calc_nachisl as calc_nachisl, /*Цена*//*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.price * a.cust as calc_nachisl/*Цена*//*number*/

from (select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="calc_nachisl" table="acc" />
          </dependants>
        </column>
        <column name="price" table="acc" type="number" title="Цена" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="price" temp-col-name="n5">
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select acc.calc_nachisl as calc_nachisl, /*Цена*//*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.price * a.cust as calc_nachisl/*Цена*//*number*/

from (select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="calc_nachisl" table="acc" />
          </dependants>
        </column>
        <column name="nachisl" table="acc" type="number" title="Начислено" is-user-editable="1" ColumnMandatory="1" NewVal="calc_nachisl" is-updateable="1" is-updateable-ext="1" update-target="nachisl" temp-col-name="n6">
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_acc_nach1 as tnr_acc_nach, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
sum(qube.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select un.kod_izv as kod_izv, /*number*//*key*/
sum(un.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from ( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
a
--\(select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select a.kod_izv as kod_izv, /*number*//*key*/
null as tnr_acc_nach1/*number*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
where
a.kod_izv is not null )
--\
)
--\
)
un
--\
 group by
un.kod_izv/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_izv/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on a.kod_izv = qube.kod_izv--\tnr_izv
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="tnr_acc_nach" table="a" />
          </dependants>
        </column>
        <column name="kod_dog_x_n" table="acc.kod_dog" type="string" title="Договор" text-source-for="kod_dog" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_account as kod_account,a.kod_dog as kod_dog  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n1 as kod_dog  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_dog as kod_dog  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n1 as kod_dog  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on acc.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="vid_t_x_n" table="acc.vid_t" type="string" title="Вид начисления" text-source-for="vid_t" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vid_t_x_n.sp_col_name as vid_t_x_n, /*Вид начисления*//*string*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.vid_t as vid_t/**//*number*/

from (select a.kod_account as kod_account,a.vid_t as vid_t  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n2 as vid_t  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.vid_t as vid_t  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n2 as vid_t  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on acc.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ym_x_n" table="acc.ym" type="string" title="Период" text-source-for="ym" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ym_x_n.name as ym_x_n, /*Период*//*string*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.ym as ym/*Период*//*number*/

from (select a.kod_account as kod_account,a.ym as ym  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n3 as ym  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.ym as ym  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n3 as ym  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on acc.ym = ym_x_n.ym--\spr_time_ym
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="tnr_izv_kod_dog" table="acc" type="number" title="" is-user-editable="1" is-refreshed="1">
          <sel-list-compiled>
            <root>
              <query title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_dog" as="kod_dog" title="" key="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_dog" into="n1">a.kod_dog as kod_dog, /**//*number*//*key*/
</column><column table="a" column="kodp" as="kodp" title="" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kodp" reference="kr_payer" refcol="kodp" into="n2">a.kodp as kodp, /**//*number*/
</column><column table="kodp" column="sp_col_name" as="kodp_x_n" title="" key="0" used="1" type="string" agg="list" into="s1">kodp.sp_col_name as kodp_x_n, /**//*string*/
</column><column table="a" column="ndog" as="ndog" title="Номер договора" key="0" used="1" type="string" agg="stragg_dist" sourcetable="./a/a" sourcecolumn="ndog" into="s2">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="dat_dog" into="d1">a.dat_dog as dat_dog, /*Дата начала действия*//*date*/
</column><column table="a" column="dep" as="dep" title="" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="dep" into="n3">a.dep as dep, /**//*number*/
</column><column table="dep" column="name" as="dep_x_n" title="" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="name" into="s3">dep.name as dep_x_n/**//*string*/
</column></select>
                <from>
from <query name="kr_dogovor" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dat_dog" type="date" comment="дата начала договора" title="Дата начала действия" vid="1" dimension="dat_s" is-final-dimension="1" is-private-dimension="1" as="dat_dog" key="0" sourcetable="./a/a" sourcecolumn="dat_dog" used="1">a.dat_dog as dat_dog, /*Дата начала действия*//*date*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/a" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
a
--\kr_dogovor
</query><query name="kr_org" as="dep" join="left outer" path="./a/dep" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/dep" sourcecolumn="name" used="1">a.name as name/*Отделение*//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="a" column="dep">a.dep</column><text txtype="func"> = </text><column table="dep" column="kodp">dep.kodp</column></call>--\kr_org
</query><query name="kr_payer" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><call function="||" as="sp_col_name" title="" key="0" pth="" type="string" used="1" agg="list"><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1">a.nump</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list">a.name</column> as sp_col_name/**//*string*/
</call></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_dog" as="kod_dog" title="" key="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_dog" as="kod_dog" title="" key="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kodp" as="kodp" title="" thissrc="kodp">a.kodp</column><text txtype="func"> ) like lower( </text><const><text>:kodp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="sp_col_name" as="kodp_x_n" title="" thissrc="kodp_x_n">kodp.sp_col_name</column><text txtype="func"> ) like lower( </text><const><text>:kodp_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" title="Номер договора" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" thissrc="dat_dog">a.dat_dog</column><text txtype="func"> ) like lower( </text><const><text>:dat_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dep" as="dep" title="" thissrc="dep">a.dep</column><text txtype="func"> ) like lower( </text><const><text>:dep_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="name" as="dep_x_n" title="" thissrc="dep_x_n">dep.name</column><text txtype="func"> ) like lower( </text><const><text>:dep_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Договор" class="1" timestamp="04.02.2022 22:11:27" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_dogovor.xml" elid="2793" ord="2793" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="kodp_filter" type="string" />
                    <param name="kodp_x_n_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="dat_dog_filter" type="string" />
                    <param name="dep_filter" type="string" />
                    <param name="dep_x_n_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_dog" as="kod_dog" title="" key="1" />
                    <column table="a" column="kodp" as="kodp" title="" />
                    <column table="kodp" column="sp_col_name" as="kodp_x_n" title="" />
                    <column table="a" column="ndog" as="ndog" title="Номер договора" />
                    <column table="a" column="dat_dog" as="dat_dog" title="Дата начала действия" />
                    <column table="a" column="dep" as="dep" title="" />
                    <column table="dep" column="name" as="dep_x_n" title="" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="a" title="Договор">
                      <link name="kodp" as="kodp" table="kr_payer" child="kr_dogovor" field="kodp" parent="kr_payer" back="kr_dogovor" title="Абонент" />
                      <link name="dep" as="dep" table="kr_org" child="kr_dogovor" field="dep" parent="kr_org" back="kr_dog_dep" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="kodp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp_x_n" />
                        <useparam name="kodp_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_dog" />
                        <useparam name="dat_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep" />
                        <useparam name="dep_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_x_n" />
                        <useparam name="dep_x_n_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="kodp_filter" />
                    <useparam name="kodp_x_n_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="dat_dog_filter" />
                    <useparam name="dep_filter" />
                    <useparam name="dep_x_n_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="kodp_filter" type="string">
                  <const>:kodp_filter </const>
                </param>
                <param name="kodp_x_n_filter" type="string">
                  <const>:kodp_x_n_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="dat_dog_filter" type="string">
                  <const>:dat_dog_filter </const>
                </param>
                <param name="dep_filter" type="string">
                  <const>:dep_filter </const>
                </param>
                <param name="dep_x_n_filter" type="string">
                  <const>:dep_x_n_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
where
acc.kod_account is not null )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from ( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="calc_nachisl" table="acc" type="number" title="Цена" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select acc.calc_nachisl as calc_nachisl, /*Цена*//*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.price * a.cust as calc_nachisl/*Цена*//*number*/

from (select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.price as price,a.cust as cust  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n5 as price,t.n4 as cust  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="acc" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="acc" type="number" title="" is-user-editable="1" />
        <column name="kod_account" table="acc" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_account" temp-col-name="n7" />
        <column name="kod_izv" table="acc" type="number" title="Счет" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_izv" temp-col-name="n8">
          <sel-list-compiled>
            <root>
              <query class="1" timestamp="24.03.2016 15:55:21" title="Счет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\tnr_izv.xml" elid="2945" ord="2945" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_izv" as="kod_izv" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_izv" into="n1">a.kod_izv as kod_izv, /**//*number*//*key*/
</column><column table="a" column="num_izv" as="num_izv" title="Номер счета" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="num_izv" into="n2">a.num_izv as num_izv, /*Номер счета*//*number*/
</column><column table="a" column="ym" as="ym" title="Отчетный период счета" key="0" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="ym" into="n3">a.ym as ym, /*Отчетный период счета*//*number*/
</column><column table="ym" column="name" as="ym_x_n" title="Отчетный период счета" key="0" used="1" type="string" into="s1">ym.name as ym_x_n, /*Отчетный период счета*//*string*/
</column><column table="a" column="date_izv" as="date_izv" title="Дата счета" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="date_izv" into="d1">a.date_izv as date_izv, /*Дата счета*//*date*/
</column><column table="a" column="name" as="name" title="Аббревиатура" key="0" used="1" type="string" sourcetable="./a/a/type_izv" sourcecolumn="abbr" into="s2">a.name as name/*Аббревиатура*//*string*/
</column></select>
                <from>
from <query name="tnr_izv" as="a" path="./a/a" haskeys="1" used="1">(
<select>--tnr_izv
select <column table="a" column="kod_izv" type="number" key-dimension="kod_izv" as="kod_izv" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_izv" used="1">a.kod_izv as kod_izv, /*number*//*key*/
</column><column table="a" column="num_izv" type="number" title="Номер счета" as="num_izv" key="0" sourcetable="./a/a" sourcecolumn="num_izv" used="1">a.num_izv as num_izv, /*Номер счета*//*number*/
</column><column table="a" column="ym" type="number" title="Отчетный период счета" fact="tnr_izv_ym_max" agg="max" column-mandatory="1" as="ym" key="0" sourcetable="./a/a" sourcecolumn="ym" used="1">a.ym as ym, /*Отчетный период счета*//*number*/
</column><column table="a" column="date_izv" type="date" title="Дата счета" column-mandatory="1" as="date_izv" key="0" sourcetable="./a/a" sourcecolumn="date_izv" used="1">a.date_izv as date_izv, /*Дата счета*//*date*/
</column><call function="||" as="name" key="0" pth="" type="string" used="1" title="Аббревиатура" sourcetable="./a/a/type_izv" sourcecolumn="abbr"><column table="type_izv" column="abbr">type_izv.abbr</column><text txtype="func"> || </text><const><text>' №'</text></const><text txtype="func"> || </text><column table="a" column="num_izv">a.num_izv</column><text txtype="func"> || </text><const><text>' от  '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="date_izv">a.date_izv</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Аббревиатура*//*string*/
</call></select><from>
from <table name="tnr_izv" as="a" title="Счет" used="1">tnr_izv
a
--\tnr_izv
</table><query name="tk_vidizv" as="type_izv" join="left outer" path="./a/a/type_izv" haskeys="1" used="1">left outer join
(
<select>--tk_vidizv
select <column table="a" column="kod_vidizv" type="number" as="kod_vidizv" key="1" fixed="1" used="1" sourcetable="./a/a/type_izv" sourcecolumn="kod_vidizv">a.kod_vidizv as kod_vidizv, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" used="1" sourcetable="./a/a/type_izv" sourcecolumn="abbr">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="tk_vidizv" as="a" title="Тип счета" used="1">tk_vidizv
a
--\tk_vidizv
</table></from><call function="=" type="bool">)
type_izv on <column table="a" column="type_izv">a.type_izv</column><text txtype="func"> = </text><column table="type_izv" column="kod_vidizv">type_izv.kod_vidizv</column></call>--\tk_vidizv
</query></from>)
a
--\tnr_izv
</query><query name="spr_time_ym" as="ym" join="left outer" path="./a/ym" order="ym desc" haskeys="1" used="1">left outer join
(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym
select <column table="a" column="ym" key="1" as="ym" used="1" type="number">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период">a.name as name/*Период*//*string*/
</column></select><from>
from <query name="spr_time_ym_pre" as="a" path="./a/ym/a" order="ym" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym_pre
select <call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text> as ym, /*number*//*key*/
</call><call function="ym to char" as="name" title="Период" key="0" group="max" pth="" type="string" used="1">max(<text txtype="func"> trim(to_char( </text><call function="date to ym" as="ym" key="1" pth="" type="number" thissrc="ym">(<text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>) </call><text txtype="func"> ,'9999.99')) </text>)  as name/*Период*//*string*/
</call></select><from>
from <table name="vv_day" as="a" used="1">vv_day
a
--\vv_day
</table></from><group> group by
<call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>/*number*//*key*/
</call></group><order>
order by ym</order>)
a
--\spr_time_ym_pre
</query></from><call function="=" type="bool">)
ym on <column table="a" column="ym">a.ym</column><text txtype="func"> = </text><column table="ym" column="ym">ym.ym</column></call>--\spr_time_ym
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_izv" as="kod_izv" title="" key="1" thissrc="kod_izv">a.kod_izv</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_izv" as="kod_izv" title="" key="1" thissrc="kod_izv">a.kod_izv</column><text txtype="func"> ) like lower( </text><const><text>:kod_izv_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_izv" as="num_izv" title="Номер счета" thissrc="num_izv">a.num_izv</column><text txtype="func"> ) like lower( </text><const><text>:num_izv_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ym" as="ym" title="Отчетный период счета" thissrc="ym">a.ym</column><text txtype="func"> ) like lower( </text><const><text>:ym_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="ym" column="name" as="ym_x_n" title="Отчетный период счета" thissrc="ym_x_n">ym.name</column><text txtype="func"> ) like lower( </text><const><text>:ym_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="date_izv" as="date_izv" title="Дата счета" thissrc="date_izv">a.date_izv</column><text txtype="func"> ) like lower( </text><const><text>:date_izv_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Аббревиатура" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" timestamp="24.03.2016 15:55:21" title="Счет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\tnr_izv.xml" elid="2945" ord="2945" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" timestamp="24.03.2016 15:55:21" title="Счет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\tnr_izv.xml" elid="2945" ord="2945" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_izv_filter" type="string" />
                    <param name="num_izv_filter" type="string" />
                    <param name="ym_filter" type="string" />
                    <param name="ym_x_n_filter" type="string" />
                    <param name="date_izv_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_izv" as="kod_izv" title="" key="1" />
                    <column table="a" column="num_izv" as="num_izv" title="Номер счета" />
                    <column table="a" column="ym" as="ym" title="Отчетный период счета" />
                    <column table="ym" column="name" as="ym_x_n" title="Отчетный период счета" />
                    <column table="a" column="date_izv" as="date_izv" title="Дата счета" />
                    <column table="a" column="name" as="name" title="Аббревиатура" />
                  </select>
                  <from>
                    <query name="tnr_izv" as="a" title="Счет">
                      <link name="ym" as="ym" table="spr_time_ym" child="tnr_izv" field="ym" parent="spr_time_ym" back="tnr_izv" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_izv" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_izv" />
                        <useparam name="kod_izv_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_izv" />
                        <useparam name="num_izv_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="ym_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym_x_n" />
                        <useparam name="ym_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="date_izv" />
                        <useparam name="date_izv_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_izv_filter" />
                    <useparam name="num_izv_filter" />
                    <useparam name="ym_filter" />
                    <useparam name="ym_x_n_filter" />
                    <useparam name="date_izv_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_izv_filter" type="string">
                  <const>:kod_izv_filter </const>
                </param>
                <param name="num_izv_filter" type="string">
                  <const>:num_izv_filter </const>
                </param>
                <param name="ym_filter" type="string">
                  <const>:ym_filter </const>
                </param>
                <param name="ym_x_n_filter" type="string">
                  <const>:ym_x_n_filter </const>
                </param>
                <param name="date_izv_filter" type="string">
                  <const>:date_izv_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_izv_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_izv_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_acc_nach1 as tnr_acc_nach, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*//*key*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
sum(qube.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select qube.kod_izv as kod_izv, /*number*//*key*/
qube.tnr_acc_nach1 as tnr_acc_nach1/*Начислено*//*number*/

from (
--
select un.kod_izv as kod_izv, /*number*//*key*/
sum(un.tnr_acc_nach1)  as tnr_acc_nach1/*Начислено*//*number*/

from (
(
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from ( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n7 as kod_account,t.n6 as nachisl,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3 )
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select tnr_account_a_d.kod_izv as kod_izv, /*number*//*key*/
tnr_account_a_d.nachisl as tnr_acc_nach1/*Начислено*//*number*/

from (
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
a
--\(select a.kod_account as kod_account,a.nachisl as nachisl,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ))
)
tnr_account_a_d
--\tnr_account
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on tnr_account_a_d.kod_izv = a.kod_izv--\tnr_izv
where
a.kod_izv is not null )
--\
union all
(
--
select a.kod_izv as kod_izv, /*number*//*key*/
null as tnr_acc_nach1/*number*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a
--\tnr_izv
where
a.kod_izv is not null )
--\
)
--\
)
un
--\
 group by
un.kod_izv/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_izv/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ) and   a.kod_izv in :kod_izv_prm   union all  select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_izv_prm )
)
a on a.kod_izv = qube.kod_izv--\tnr_izv
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dep-refresh-cmd>
            <root table="acc">
              <params>
                <param name="kod_account_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_account_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.kod_account as kod_account/*number*//*key*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
where
acc.kod_account is not null )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from ( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="tnr_acc_nach" table="a" />
            <dependant name="tnr_izv_kod_dog" table="acc" />
          </dependants>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:dat_priem as dat_priem 
,:kod_dog as kod_dog 
,:vid_t as vid_t 
,:ym as ym 
,:cust as cust 
,:price as price 
,:nachisl as nachisl 
,:kod_account as kod_account 
,:kod_izv as kod_izv 
 
from dual ) 
 
loop 
insert into tnr_account 
(dat_priem 
,kod_dog 
,vid_t 
,ym 
,cust 
,price 
,nachisl 
,kod_account 
,kod_izv 
) 
 values  
(r.dat_priem 
,r.kod_dog 
,r.vid_t 
,r.ym 
,r.cust 
,r.price 
,r.nachisl 
,r.kod_account 
,r.kod_izv 
) 
 returning  
kod_account into :kod_account; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from tnr_account where kod_account=:kod_account</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='acc' 
and 
names=:form_id 
and 
f2=:kod_account; 
if :row_state_id=1  then 
for r in  
 ( select  
:dat_priem as dat_priem 
,:kod_dog as kod_dog 
,:vid_t as vid_t 
,:ym as ym 
,:cust as cust 
,:price as price 
,:nachisl as nachisl 
,:kod_account as kod_account 
,:kod_izv as kod_izv 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,d1 
,n1 
,n2 
,n3 
,n4 
,n5 
,n6 
,n7 
,n8 
) 
 values  
('acc' 
,:form_id 
,:kod_account 
,:row_state_id 
,r.dat_priem 
,r.kod_dog 
,r.vid_t 
,r.ym 
,r.cust 
,r.price 
,r.nachisl 
,r.kod_account 
,r.kod_izv 
); 
end loop; 
else 
for r in  
 ( select  
:dat_priem as dat_priem 
,:kod_dog as kod_dog 
,:vid_t as vid_t 
,:ym as ym 
,:cust as cust 
,:price as price 
,:nachisl as nachisl 
,:kod_account as kod_account 
,:kod_izv as kod_izv 
,a.num_priem 
,a.rym 
,a.tarif 
,a.kod_numobj 
,a.kod_f23 
,a.voltage 
,a.info 
,a.u_m 
,a.d_m 
,a.kod_numobj_sa 
,a.kod_f46 
,a.pr_hand 
,a.pr_sf 
,a.kod_sf 
,a.kod_vid_act 
,a.kod_priem 
,a.kod_parent 
,a.kod_typeaccount 
,a.d_r 
,a.u_r 
,a.pr_lg 
,a.kod_izv1 
,a.kod_tarif_rate 
,a.kod_stobj 
,a.kod_point_tar 
,a.pr_hand_attach 
,a.vid_recalc 
,a.kod_bupol 
,a.count_opl 
,a.t_zona 
,a.kod_pereras 
,a.dat_priem_last 
,a.declaration 
,a.potcust 
,a.kod_usl_vid 
,a.dep 
,a.ym_att 
,a.over_sn 
 
from tnr_account a  where kod_account=:kod_account) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,d1 
,n1 
,n2 
,n3 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,n10 
,n11 
,n12 
,n13 
,n14 
,s1 
,s2 
,d2 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,n22 
,n23 
,d3 
,s3 
,n24 
,n25 
,n26 
,n27 
,n28 
,n29 
,n30 
,n31 
,n32 
,n33 
,n34 
,d4 
,s4 
,n35 
,n36 
,n37 
,n38 
,n39 
) 
 values  
('acc' 
,:form_id 
,:kod_account 
,:row_state_id 
,r.dat_priem 
,r.kod_dog 
,r.vid_t 
,r.ym 
,r.cust 
,r.price 
,r.nachisl 
,r.kod_account 
,r.kod_izv 
,r.num_priem 
,r.rym 
,r.tarif 
,r.kod_numobj 
,r.kod_f23 
,r.voltage 
,r.info 
,r.u_m 
,r.d_m 
,r.kod_numobj_sa 
,r.kod_f46 
,r.pr_hand 
,r.pr_sf 
,r.kod_sf 
,r.kod_vid_act 
,r.kod_priem 
,r.kod_parent 
,r.kod_typeaccount 
,r.d_r 
,r.u_r 
,r.pr_lg 
,r.kod_izv1 
,r.kod_tarif_rate 
,r.kod_stobj 
,r.kod_point_tar 
,r.pr_hand_attach 
,r.vid_recalc 
,r.kod_bupol 
,r.count_opl 
,r.t_zona 
,r.kod_pereras 
,r.dat_priem_last 
,r.declaration 
,r.potcust 
,r.kod_usl_vid 
,r.dep 
,r.ym_att 
,r.over_sn 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='acc' and names=:form_id</clear-temp-text>
      <update-text>begin
update tnr_account set  
(dat_priem 
,kod_dog 
,vid_t 
,ym 
,cust 
,price 
,nachisl 
,kod_account 
,kod_izv 
) 
= 
 ( select  
:dat_priem as dat_priem 
,:kod_dog as kod_dog 
,:vid_t as vid_t 
,:ym as ym 
,:cust as cust 
,:price as price 
,:nachisl as nachisl 
,:kod_account as kod_account 
,:kod_izv as kod_izv 
 
from dual ) 
 
where 
kod_account=:kod_account 
;
end;
</update-text>
      <scheme>
        <table name="tnr_account" as="acc">
          <columns>
            <column name="dat_priem" type="date" title="" visible="0" />
            <column name="kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="vid_t" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ym" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="cust" type="number" title="Количество" />
            <column name="price" type="number" title="Цена" />
            <column name="nachisl" type="number" title="Начислено" />
            <column name="kod_dog_x_n" type="string" title="Договор" />
            <column name="vid_t_x_n" type="string" title="Вид начисления" />
            <column name="ym_x_n" type="string" title="Период" />
            <column name="tnr_izv_kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="calc_nachisl" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_account" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_izv" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="dat_priem" type="date" title="" visible="0" />
            <column name="kod_dog_x_n" type="string" title="Договор" />
            <column name="kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="vid_t_x_n" type="string" title="Вид начисления" />
            <column name="vid_t" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ym_x_n" type="string" title="Период" />
            <column name="ym" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="cust" type="number" title="Количество" />
            <column name="price" type="number" title="Цена" />
            <column name="nachisl" type="number" title="Начислено" />
            <column name="tnr_izv_kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="calc_nachisl" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_account" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_izv" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_account_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_account_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select acc.dat_priem as dat_priem, /*date*/
acc.kod_dog as kod_dog, /*number*/
acc.vid_t as vid_t, /*number*/
acc.ym as ym, /*Период*//*number*/
acc.cust as cust, /*Количество*//*number*/
acc.price as price, /*Цена*//*number*/
acc.nachisl as nachisl, /*Начислено*//*number*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
vid_t_x_n.sp_col_name as vid_t_x_n, /*Вид начисления*//*string*/
ym_x_n.name as ym_x_n, /*Период*//*string*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog, /*number*/
acc.calc_nachisl as calc_nachisl, /*Цена*//*number*/
acc.is_new as is_new, /*number*/
acc.is_not_new as is_not_new, /*number*/
acc.kod_account as kod_account, /*number*//*key*/
acc.kod_izv as kod_izv/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(qube.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select qube.kod_acc_byt as kod_acc_byt, /*number*//*key*/
qube.tnr_izv_kod_dog1 as tnr_izv_kod_dog1/*number*/

from (
--
select un.kod_acc_byt as kod_acc_byt, /*number*//*key*/
max(un.tnr_izv_kod_dog1)  as tnr_izv_kod_dog1/*number*/

from (
(
(
--
select acc.kod_account as kod_acc_byt, /*number*//*key*/
null as tnr_izv_kod_dog1/*number*/

from (
--tnr_account
select a.kod_account as kod_account/*number*//*key*/

from (select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc
--\tnr_account
where
acc.kod_account is not null )
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from ( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from ( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n4 as kod_izv,t.n1 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3 )
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
union all
(
--
select dims.kod_acc_byt as kod_acc_byt, /*number*//*key*/
tnr_izv.kod_dog as tnr_izv_kod_dog1/*number*/

from (
--
select tnr_izv_a_d.kod_izv as kod_izv_prm, /*number*//*key*/
acc.kod_account as kod_acc_byt/*number*//*key*/

from (
--tnr_izv
select a.kod_izv as kod_izv/*number*//*key*/

from (select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv_a_d
--\tnr_izv
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_izv as kod_izv/*number*/

from (select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_izv as kod_izv  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n8 as kod_izv  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_izv = tnr_izv_a_d.kod_izv--\tnr_account
where
acc.kod_account is not null  group by
tnr_izv_a_d.kod_izv, /*number*//*key*/
acc.kod_account/*number*//*key*/
)
dims
--\
left outer join
(
--tnr_izv
select a.kod_izv as kod_izv, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
a
--\(select a.kod_izv as kod_izv,a.kod_dog as kod_dog  from tnr_izv a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_izv=t.f2 ))
)
tnr_izv on tnr_izv.kod_izv = dims.kod_izv_prm--\tnr_izv
)
--\
)
--\
)
un
--\
 group by
un.kod_acc_byt/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_acc_byt/*number*//*key*/
)
qube
--\
left outer join
(
--tnr_account
select a.kod_account as kod_account, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.ym as ym, /*Период*//*number*/
a.dat_priem as dat_priem, /**//*date*/
a.vid_t as vid_t, /**//*number*/
a.cust as cust, /*Количество*//*number*/
a.price as price, /*Цена*//*number*/
a.nachisl as nachisl, /*Начислено*//*number*/
a.kod_izv as kod_izv, /*number*/
a.price * a.cust as calc_nachisl, /*Цена*//*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_account as kod_account,a.kod_dog as kod_dog,a.ym as ym,a.dat_priem as dat_priem,a.vid_t as vid_t,a.cust as cust,a.price as price,a.nachisl as nachisl,a.kod_izv as kod_izv,0 as is_new,1 as is_not_new  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n1 as kod_dog,t.n3 as ym,t.d1 as dat_priem,t.n2 as vid_t,t.n4 as cust,t.n5 as price,t.n6 as nachisl,t.n8 as kod_izv,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
a
--\(select a.kod_account as kod_account,a.kod_dog as kod_dog,a.ym as ym,a.dat_priem as dat_priem,a.vid_t as vid_t,a.cust as cust,a.price as price,a.nachisl as nachisl,a.kod_izv as kod_izv,0 as is_new,1 as is_not_new  from tnr_account a where not exists (select * from rr_temp t where t.skod ='acc' and t.names=:form_id  and a.kod_account=t.f2 ) and   a.kod_account in :kod_account_prm   union all  select t.n7 as kod_account,t.n1 as kod_dog,t.n3 as ym,t.d1 as dat_priem,t.n2 as vid_t,t.n4 as cust,t.n5 as price,t.n6 as nachisl,t.n8 as kod_izv,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='acc' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_account_prm )
)
acc on acc.kod_account = qube.kod_acc_byt--\tnr_account
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
ym_x_n on acc.ym = ym_x_n.ym--\spr_time_ym
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on acc.vid_t = vid_t_x_n.vid_t--\sk_nachisl
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on acc.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>