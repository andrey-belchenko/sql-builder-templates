<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="create_ur_sf" title="Создание счета" with-behavior="0" timestamp="28.12.2023 14:42:21" file="sql.builder.templates\sql.builder\projects\asuse2\forms\Арбитраж\create_ur_sf.xml" elid="157" ord="157" leaf="0" lvl="2" pelid="">
    <field table="a" name="num_delo" title="Номер дела" controlType="UIText" rows-limit="100" id="37024622" />
    <field table="s" name="kod_deb" title="" controlType="UICombo" rows-limit="100" id="50535408" />
    <fieldgroup title="Создание счета" noborder="1" id="43137846">
      <field table="a" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="52377123" />
      <field table="a" name="kr_dogovor_kod_dog" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="24709278" />
      <field id="17797097" controlType="UICombo" title="Договор" name="kod_dog" type="number" rows-limit="100" elid="589" ord="589" leaf="0" lvl="2" pelid="" column-mandatory="1" show-checkbox="0" editable="kod_sf_new" editable-invert="1" new-val="kod_dog_max">
        <listquery>
          <query name="kr_dogovor(kodp)" />
        </listquery>
      </field>
      <field id="3722067" controlType="UINumber" edit-mask="d" type="number" elid="393" ord="393" leaf="1" lvl="2" pelid="" name="kod_sf_new" checked="1" show-checkbox="0" column-visible="0" />
      <field id="63051842" controlType="UIDate" type="date" elid="397" ord="397" leaf="0" lvl="2" pelid="" name="dat" column-mandatory="1" title="Дата счета" show-checkbox="0" editable="kod_sf_new" editable-invert="1">
        <defaultquery>
          <query name="today" />
        </defaultquery>
      </field>
      <field id="53413337" name="ym" controlType="UICombo" type="number" title="Период" mandatory="1" elid="533" ord="533" leaf="0" lvl="2" pelid="" column-editable="0" show-checkbox="0" column-mandatory="1">
        <listquery>
          <query name="kr_calc_list"></query>
        </listquery>
        <defaultquery>
          <query name="kr_calc_max"></query>
        </defaultquery>
      </field>
      <field id="12334584" controlType="UIText" edit-mask="N2" type="number" elid="395" ord="395" leaf="1" lvl="2" pelid="" name="nach" default="nachisl" show-checkbox="0" column-mandatory="1" editable="kod_sf_new" editable-invert="1" valid="nach_vld" title="Сумма" />
      <field table="b" name="can_create_sf" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="49753208" />
      <field table="c" name="nach_vld" title="" controlType="UIText" rows-limit="100" id="40549877" />
      <field id="58141332" name="vid_real" controlType="UICombo" title="Вид реализации" type="number" elid="592" ord="592" leaf="0" lvl="2" pelid="" default="p_vid_real" show-checkbox="0" column-mandatory="1" column-editable="0">
        <listquery>
          <query name="sk_vid_real" as="a" />
        </listquery>
      </field>
      <field id="61591760" name="vid_t" controlType="UICombo" title="Вид начисления" type="number" elid="593" ord="593" leaf="0" lvl="2" pelid="" default="p_vid_t" show-checkbox="0" column-mandatory="1" editable="kod_sf_new" editable-invert="1">
        <listquery>
          <query name="sk_nachisl(vidreal)" />
        </listquery>
      </field>
    </fieldgroup>
    <empty-item id="4604511" />
    <label id="42712528" />
    <uicommand title="Создать счет" action-type="custom" editable="can_create_sf" id="47277441">
      <useaction name="sg_dop_plat.sf_create_with_ras" id="56772312">
        <useparam name="kod_mat" id="49171486" />
        <useparam name="kod_dog" id="55951974" />
        <useparam name="dat" id="12664652" />
        <useparam name="ym" id="137936" />
        <const id="7310646">null</const>
        <useparam name="vid_real" id="51919923" />
        <useparam name="vid_t" id="292538" />
        <useparam name="nach" id="15504518" />
        <useparam name="kod_sf_new" id="16433094" />
        <useparam name="kod_deb" id="65647629" />
      </useaction>
      <useaction action-type="execute-add" call="ur_dogplat_insert_pd" id="30355012">
        <const id="56142560">6</const>
        <useparam name="kod_mat" id="22765695" />
        <useparam name="kod_deb" id="65731172" />
        <useparam name="nach" id="61200088" />
        <useparam name="dat" id="22379216" />
        <useparam name="nach" id="45247761" />
        <const id="49321128">1</const>
        <useparam name="kod_sf_new" id="63882985" />
      </useaction>
      <useaction action-type="close" id="65311788" />
      <useaction action-type="dynamic-form" call="sr_facvip_ur" modal="1" id="19885101">
        <useparam name="kod_mat" id="38972745" />
        <useparam name="kod_sf_new" id="52289594" />
      </useaction>
    </uicommand>
  </form>
  <params>
    <param name="kod_mat" type="number" />
    <param name="nachisl" type="number" />
    <param name="p_vid_real" type="number" />
    <param name="p_vid_t" type="number" />
  </params>
  <dataset>
    <params>
      <param name="kod_mat" type="number">
        <const exclude="1">78</const>
      </param>
      <param name="nachisl" type="number">
        <const exclude="1">400</const>
      </param>
      <param name="p_vid_real" type="number">
        <const exclude="1" comment="пени">7</const>
        <const exclude="1" comment="госпошлина">9</const>
        <const exclude="1" comment="штрафы">4</const>
      </param>
      <param name="p_vid_t" type="number">
        <const exclude="1" comment="пени по решению суда">-44</const>
        <const exclude="1" comment="госпошлина">49</const>
        <const exclude="1" comment="штрафы">154</const>
      </param>
    </params>
    <fields>
      <field type="number" name="kod_dog" parname="kod_dog" title="Договор" ClientNewVal="kod_dog_max" EditableInvert="1" ClientEditable="kod_sf_new" ColumnMandatory="1" />
      <field type="number" name="kod_sf_new" parname="kod_sf_new" title="" ColumnVisible="0" />
      <field type="date" name="dat" parname="dat" title="Дата счета" EditableInvert="1" ClientEditable="kod_sf_new" ColumnMandatory="1" />
      <field type="number" name="ym" parname="ym" title="Период" ColumnEditable="0" ColumnMandatory="1" />
      <field type="number" name="nach" parname="nach" title="Сумма" EditableInvert="1" ClientEditable="kod_sf_new" ColumnMandatory="1" ClientDefault="nachisl" ClientValid="nach_vld" />
      <field type="number" name="vid_real" parname="vid_real" title="Вид реализации" ColumnEditable="0" ColumnMandatory="1" ClientDefault="p_vid_real" />
      <field type="number" name="vid_t" parname="vid_t" title="Вид начисления" EditableInvert="1" ClientEditable="kod_sf_new" ColumnMandatory="1" ClientDefault="p_vid_t" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="a_has_changes" parname="a_has_changes" />
      <field type="string" name="b_has_changes" parname="b_has_changes" />
      <field type="string" name="c_has_changes" parname="c_has_changes" />
      <field type="string" name="s_has_changes" parname="s_has_changes" />
    </fields>
    <table name="a" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" is-ms-upd="1" is-top="1" key-dimension="kod_mat">
      <select-text>
--
select a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /*Абонент*//*number*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max(qube.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1, /*number*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1, /*number*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1, /*number*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
max(un.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1, /*number*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.kod_dog as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on kod_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null )  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a
--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /**//*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
)
a on a.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="num_delo" table="a" type="string" title="Номер дела" parname="num_delo" ColumnEditable="0" Mandatory="qube.ur_hist_mat_count" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s1" />
        <column name="kodp" table="a" type="number" title="Абонент" parname="kodp" ColumnEditable="0" is-updateable="1" is-updateable-ext="1" update-target="kodp" temp-col-name="n1">
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kodp as kodp/**//*number*/

from (select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp_x_n" table="a" />
          </dependants>
        </column>
        <column name="kr_dogovor_kod_dog" table="a" type="number" title="" parname="kod_dog_max" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog, /*number*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max(qube.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
max(un.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1/*number*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.kod_dog as kr_dogovor_kod_dog1/*number*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on kod_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_x_n" table="a.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kodp as kodp/**//*number*/

from (select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_count" table="a" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="a" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat" table="a" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:num_delo as num_delo 
,:kodp as kodp 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat 
(num_delo 
,kodp 
,kod_mat 
) 
 values  
(r.num_delo 
,r.kodp 
,r.kod_mat 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='a' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:num_delo as num_delo 
,:kodp as kodp 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n1 
,n3 
) 
 values  
('a' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.kodp 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:num_delo as num_delo 
,:kodp as kodp 
,:kod_mat as kod_mat 
,a.kod_folders 
,a.kod_doc 
,a.kod_ssp 
,a.num_reg 
,a.dat_otv 
,a.kod_ret_isk 
,a.dat_prin 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.dat_otz 
,a.dat_doc 
,a.fio_otz 
,a.kod_subject 
,a.prichina_otz 
,a.sum_gp 
,a.prim 
,a.dat_gp 
,a.kod_sud 
,a.num_pp_gp 
,a.kod_parent 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.kod_scan 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.dat_post_mat_pio 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n1 
,n3 
,n4 
,n5 
,n6 
,s2 
,d1 
,n7 
,d2 
,s3 
,d3 
,s4 
,d4 
,d5 
,s5 
,n8 
,s6 
,n9 
,s7 
,d6 
,n10 
,s8 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,d7 
,s9 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,s10 
,s11 
,n28 
,s12 
,d8 
,n29 
,s13 
,d9 
,n30 
,n31 
,d10 
,d11 
,n32 
,d12 
,s14 
) 
 values  
('a' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.kodp 
,r.kod_mat 
,r.kod_folders 
,r.kod_doc 
,r.kod_ssp 
,r.num_reg 
,r.dat_otv 
,r.kod_ret_isk 
,r.dat_prin 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.dat_otz 
,r.dat_doc 
,r.fio_otz 
,r.kod_subject 
,r.prichina_otz 
,r.sum_gp 
,r.prim 
,r.dat_gp 
,r.kod_sud 
,r.num_pp_gp 
,r.kod_parent 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.kod_scan 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.dat_post_mat_pio 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='a' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(num_delo 
,kodp 
,kod_mat 
) 
= 
 ( select  
:num_delo as num_delo 
,:kodp as kodp 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction action-type="execute-update" call="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="a">
          <columns>
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kr_dogovor_kod_dog" type="number" title="" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /*Абонент*//*number*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max(qube.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1, /*number*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1, /*number*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dogovor_kod_dog1 as kr_dogovor_kod_dog1, /*number*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
max(un.kr_dogovor_kod_dog1)  as kr_dogovor_kod_dog1, /*number*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.kod_dog as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on kod_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as kr_dogovor_kod_dog1, /*number*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /**//*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,a.num_delo as num_delo,a.kodp as kodp,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,t.n1 as kodp,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.num_delo as num_delo,a.kodp as kodp,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,t.n1 as kodp,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="b" auto-refresh="1" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="create_ur_sf_can_create" key="can_create_sf" is-ms-upd="0" is-top="1">
      <select-text>
--
select b.val as can_create_sf/*number*/

from (
--create_ur_sf_can_create
select  case  when ((:is_form_valid  = 1)  and (:kod_sf_new  is null ) )  then 1 else 0 end  as val/*number*/

from (
--dual
select dual.dummy as dummy/*string*//*key*/

from dual
dual
--\dual
)
dual
--\dual
)
b
--\create_ur_sf_can_create
--\
</select-text>
      <columns>
        <column name="can_create_sf" table="b" type="number" title="" parname="can_create_sf" ColumnVisible="0" is-refreshed="1" />
      </columns>
      <scheme>
        <table name="create_ur_sf_can_create" as="b">
          <columns>
            <column name="can_create_sf" type="number" title="" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
    </table>
    <table name="c" auto-refresh="1" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="create_ur_sf_nachisl_vld" key="nach_vld" is-ms-upd="0" is-top="1">
      <select-text>
--
select c.val as nach_vld/*string*/

from (
--create_ur_sf_nachisl_vld
select  case  when (( nvl( :nach  , 0 ) )  &lt;= 0)  then 'Сумма должна быть больше нуля' end  as val/*string*/

from (
--dual
select dual.dummy as dummy/*string*//*key*/

from dual
dual
--\dual
)
dual
--\dual
)
c
--\create_ur_sf_nachisl_vld
--\
</select-text>
      <columns>
        <column name="nach_vld" table="c" type="string" title="" parname="nach_vld" ColumnVisible="0" is-refreshed="1" />
      </columns>
      <scheme>
        <table name="create_ur_sf_nachisl_vld" as="c">
          <columns>
            <column name="nach_vld" type="string" title="" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
    </table>
    <table name="s" auto-refresh="1" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="sr_facvip" key="kod_sf" is-ms-upd="1" is-top="1" key-dimension="kod_sf">
      <select-text>
--
select s.kod_deb as kod_deb, /*number*/
kod_deb_x_n.num_pl as kod_deb_x_n, /*Номер документа на оплату*//*number*/
s.is_new as is_new, /*number*/
s.is_not_new as is_not_new, /*number*/
s.kod_sf as kod_sf/*number*//*key*/

from (
--sr_facvip
select a.kod_sf as kod_sf, /*number*//*key*/
a.kod_deb as kod_deb, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from sr_facvip
a
--\sr_facvip
where
a.vid_sf not in (2 , 9) )
s
--\sr_facvip
left outer join
(
--sr_debet
select a.kod_deb as kod_deb, /*number*//*key*/
a.num_pl as num_pl/*Номер документа на оплату*//*number*/

from sr_debet
a
--\sr_debet
)
kod_deb_x_n on s.kod_deb = kod_deb_x_n.kod_deb--\sr_debet
where
s.kod_sf = :kod_sf_new --\
</select-text>
      <columns>
        <column name="kod_deb" table="s" type="number" title="" parname="kod_deb" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="kod_deb" temp-col-name="n3">
          <dep-refresh-cmd>
            <root table="s">
              <params>
                <param name="kod_sf_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_sf_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_deb_x_n.num_pl as kod_deb_x_n, /*Номер документа на оплату*//*number*/
s.kod_sf as kod_sf/*number*//*key*/

from (
--sr_facvip
select a.kod_sf as kod_sf, /*number*//*key*/
a.kod_deb as kod_deb/*number*/

from (select a.kod_sf as kod_sf,a.kod_deb as kod_deb,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
a
--\(select a.kod_sf as kod_sf,a.kod_deb as kod_deb,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
where
a.vid_sf not in (2 , 9) )
s
--\sr_facvip
left outer join
(
--sr_debet
select a.kod_deb as kod_deb, /*number*//*key*/
a.num_pl as num_pl/*Номер документа на оплату*//*number*/

from sr_debet
a
--\sr_debet
)
kod_deb_x_n on s.kod_deb = kod_deb_x_n.kod_deb--\sr_debet
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_deb_x_n" table="s" />
          </dependants>
        </column>
        <column name="kod_deb_x_n" table="s.kod_deb" type="number" title="" text-source-for="kod_deb" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_sf_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_sf_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_deb_x_n.num_pl as kod_deb_x_n, /*Номер документа на оплату*//*number*/
s.kod_sf as kod_sf/*number*//*key*/

from (
--sr_facvip
select a.kod_sf as kod_sf, /*number*//*key*/
a.kod_deb as kod_deb/*number*/

from (select a.kod_sf as kod_sf,a.kod_deb as kod_deb,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
a
--\(select a.kod_sf as kod_sf,a.kod_deb as kod_deb,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
where
a.vid_sf not in (2 , 9) )
s
--\sr_facvip
left outer join
(
--sr_debet
select a.kod_deb as kod_deb, /*number*//*key*/
a.num_pl as num_pl/*Номер документа на оплату*//*number*/

from sr_debet
a
--\sr_debet
)
kod_deb_x_n on s.kod_deb = kod_deb_x_n.kod_deb--\sr_debet
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="s" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="s" type="number" title="" is-user-editable="1" />
        <column name="kod_sf" table="s" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_sf" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_deb as kod_deb 
,:kod_sf as kod_sf 
 
from dual ) 
 
loop 
insert into sr_facvip 
(kod_deb 
,kod_sf 
) 
 values  
(r.kod_deb 
,r.kod_sf 
) 
 returning  
kod_sf into :kod_sf; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from sr_facvip where kod_sf=:kod_sf</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='s' 
and 
names=:form_id 
and 
f2=:kod_sf; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_deb as kod_deb 
,:kod_sf as kod_sf 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,n1 
) 
 values  
('s' 
,:form_id 
,:kod_sf 
,:row_state_id 
,r.kod_deb 
,r.kod_sf 
); 
end loop; 
else 
for r in  
 ( select  
:kod_deb as kod_deb 
,:kod_sf as kod_sf 
,a.tep_el 
,a.kodp 
,a.kod_dog 
,a.vid_real 
,a.vid_sf 
,a.vid_pl 
,a.num_sf 
,a.dat_sf 
,a.ym 
,a.dat_priem 
,a.pr_old 
,a.pr_sv 
,a.pr_osn 
,a.gru_pl 
,a.den 
,a.kod_dog_r 
,a.dat_uchet 
,a.dat_ezad 
,a.vist_day 
,a.num_sf_uch 
,a.ym_uch 
,a.d_m 
,a.u_m 
,a.pr_hand 
,a.vid_avans 
,a.prim_uo 
,a.kod_sf_old 
,a.kodp_plat 
,a.kod_sf_konsol 
,a.vid_recalc 
,a.kod_dog_link 
,a.pr_uch_av 
,a.kod_bu_akt 
,a.kod_sf_first 
,a.tip_bu_akt 
,a.kniga 
,a.dat_pen_ezad 
,a.dat_zadol 
,a.nom_sf 
,a.proc 
 
from sr_facvip a  where kod_sf=:kod_sf) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,n1 
,n2 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,d1 
,n10 
,d2 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,d3 
,d4 
,n17 
,n18 
,n19 
,d5 
,s1 
,n20 
,n21 
,s2 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,n28 
,n29 
,n30 
,n31 
,d6 
,d7 
,s3 
,n32 
) 
 values  
('s' 
,:form_id 
,:kod_sf 
,:row_state_id 
,r.kod_deb 
,r.kod_sf 
,r.tep_el 
,r.kodp 
,r.kod_dog 
,r.vid_real 
,r.vid_sf 
,r.vid_pl 
,r.num_sf 
,r.dat_sf 
,r.ym 
,r.dat_priem 
,r.pr_old 
,r.pr_sv 
,r.pr_osn 
,r.gru_pl 
,r.den 
,r.kod_dog_r 
,r.dat_uchet 
,r.dat_ezad 
,r.vist_day 
,r.num_sf_uch 
,r.ym_uch 
,r.d_m 
,r.u_m 
,r.pr_hand 
,r.vid_avans 
,r.prim_uo 
,r.kod_sf_old 
,r.kodp_plat 
,r.kod_sf_konsol 
,r.vid_recalc 
,r.kod_dog_link 
,r.pr_uch_av 
,r.kod_bu_akt 
,r.kod_sf_first 
,r.tip_bu_akt 
,r.kniga 
,r.dat_pen_ezad 
,r.dat_zadol 
,r.nom_sf 
,r.proc 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='s' and names=:form_id</clear-temp-text>
      <update-text>begin
update sr_facvip set  
(kod_deb 
,kod_sf 
) 
= 
 ( select  
:kod_deb as kod_deb 
,:kod_sf as kod_sf 
 
from dual ) 
 
where 
kod_sf=:kod_sf 
;
end;
</update-text>
      <scheme>
        <table name="sr_facvip" as="s">
          <columns>
            <column name="kod_deb" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_deb_x_n" type="number" title="" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_sf" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_sf_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_sf_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select s.kod_deb as kod_deb, /*number*/
kod_deb_x_n.num_pl as kod_deb_x_n, /*Номер документа на оплату*//*number*/
s.is_new as is_new, /*number*/
s.is_not_new as is_not_new, /*number*/
s.kod_sf as kod_sf/*number*//*key*/

from (
--sr_facvip
select a.kod_sf as kod_sf, /*number*//*key*/
a.kod_deb as kod_deb, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_sf as kod_sf,a.kod_deb as kod_deb,0 as is_new,1 as is_not_new,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
a
--\(select a.kod_sf as kod_sf,a.kod_deb as kod_deb,0 as is_new,1 as is_not_new,a.vid_sf as vid_sf  from sr_facvip a where not exists (select * from rr_temp t where t.skod ='s' and t.names=:form_id  and a.kod_sf=t.f2 ) and   a.kod_sf in :kod_sf_prm   union all  select t.n1 as kod_sf,t.n3 as kod_deb,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n7 as vid_sf  from rr_temp t where t.skod ='s' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_sf_prm )
where
a.vid_sf not in (2 , 9) )
s
--\sr_facvip
left outer join
(
--sr_debet
select a.kod_deb as kod_deb, /*number*//*key*/
a.num_pl as num_pl/*Номер документа на оплату*//*number*/

from sr_debet
a
--\sr_debet
)
kod_deb_x_n on s.kod_deb = kod_deb_x_n.kod_deb--\sr_debet
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>