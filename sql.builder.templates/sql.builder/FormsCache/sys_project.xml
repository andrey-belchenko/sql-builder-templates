<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="sys_project" form-size="633;309" title="Проект" show-toolbar="1" comment="Диалоговое окно для редактирования проекта - используется в sql.builder.Controls.ucProjects.openProjEditor()" timestamp="30.11.2022 12:56:00" file="sql.builder.templates\sql.builder\projects\system\forms\sys_project.xml">
    <field name="project" type="string" controlType="UIText" title="Имя" mandatory="1" id="62695758" />
    <fieldgroup title="Зависимости" id="25712345">
      <grid table="refs" show-toolbar="1" id="23542352">
        <toolbar id="5321025">
          <uicommand button-type="grid-add" column-visible="0" name="grid-add" control-name="ButtonAddRow" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="364" ord="364" leaf="1" lvl="2" pelid="" title="" id="20389261" />
          <uicommand button-type="grid-delete" column-visible="0" name="grid-delete" control-name="ButtonDeleteRow" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="368" ord="368" leaf="1" lvl="2" pelid="" title="" id="30653349" />
          <uicommand button-type="grid-save" column-visible="0" name="grid-save" control-name="ButtonCommit" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="366" ord="366" leaf="1" lvl="2" pelid="" title="" id="48827758" />
          <uicommand button-type="grid-refresh" column-visible="0" name="grid-refresh" control-name="ButtonRefresh" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="367" ord="367" leaf="1" lvl="2" pelid="" title="" id="55781034" />
        </toolbar>
        <columns id="61135861">
          <field table="refs" name="check" title="Выбор" controlType="UICheck" rows-limit="100" id="19165295" />
          <field table="refs" name="name" title="Проект" controlType="UIText" rows-limit="100" id="27183866" />
        </columns>
      </grid>
    </fieldgroup>
  </form>
  <params>
    <param name="project" type="string" />
  </params>
  <dataset>
    <params>
      <param name="project" type="string" />
    </params>
    <fields>
      <field type="string" name="project" parname="project" title="Имя" ClientMandatory="1" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="refs_has_changes" parname="refs_has_changes" />
    </fields>
    <table name="refs" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" non-db="1" ref-column="" multi-select-column="" multi-select-target="" update-target="sys_project" key="name" is-ms-upd="1" is-top="1">
      <select-text>
--
select refs.check as check, /*Выбор*//*number*/
refs.name as name, /*Проект*//*string*//*key*/
refs.is_new as is_new, /*number*/
refs.is_not_new as is_not_new/*number*/

from (
--sys_project
select a.name as name, /*Имя*//*string*//*key*/
a.check as check, /*numbet*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from sys_project
a
--\sys_project
)
refs
--\sys_project
--\
</select-text>
      <columns>
        <column name="check" table="refs" type="number" title="Выбор" ColumnEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="check" temp-col-name=" 1" />
        <column name="name" table="refs" type="string" title="Проект" ColumnEditable="0" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="name" temp-col-name="s1" />
        <column name="is_new" table="refs" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="refs" type="number" title="" is-user-editable="1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:check as check 
,:name as name 
 
from dual ) 
 
loop 
insert into sys_project 
(check 
,name 
) 
 values  
(r.check 
,r.name 
) 
 returning  
name into :name; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from sys_project where name=:name</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='refs' 
and 
names=:form_id 
and 
f2=:name; 
if :row_state_id=1  then 
for r in  
 ( select  
:check as check 
,:name as name 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
, 1 
,s1 
) 
 values  
('refs' 
,:form_id 
,:name 
,:row_state_id 
,r.check 
,r.name 
); 
end loop; 
else 
for r in  
 ( select  
:check as check 
,:name as name 
 
from sys_project a  where name=:name) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
, 1 
,s1 
) 
 values  
('refs' 
,:form_id 
,:name 
,:row_state_id 
,r.check 
,r.name 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='refs' and names=:form_id</clear-temp-text>
      <update-text>begin
update sys_project set  
(check 
,name 
) 
= 
 ( select  
:check as check 
,:name as name 
 
from dual ) 
 
where 
name=:name 
;
end;
</update-text>
      <scheme>
        <table name="sys_project" as="refs">
          <columns>
            <column name="check" type="number" title="Выбор" />
            <column name="name" type="string" title="Проект" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="check" type="number" title="Выбор" />
            <column name="name" type="string" title="Проект" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="name_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="name_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select refs.check as check, /*Выбор*//*number*/
refs.name as name, /*Проект*//*string*//*key*/
refs.is_new as is_new, /*number*/
refs.is_not_new as is_not_new/*number*/

from (
--sys_project
select a.name as name, /*Имя*//*string*//*key*/
a.check as check, /*numbet*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.name as name,a.check as check,0 as is_new,1 as is_not_new  from sys_project a where not exists (select * from rr_temp t where t.skod ='refs' and t.names=:form_id  and a.name=t.f2 ) and   a.name in :name_prm   union all  select t.s1 as name,t. 1 as check,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='refs' and t.names=:form_id  and t.f3!=3  and t.f2 in :name_prm )
a
--\(select a.name as name,a.check as check,0 as is_new,1 as is_not_new  from sys_project a where not exists (select * from rr_temp t where t.skod ='refs' and t.names=:form_id  and a.name=t.f2 ) and   a.name in :name_prm   union all  select t.s1 as name,t. 1 as check,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='refs' and t.names=:form_id  and t.f3!=3  and t.f2 in :name_prm )
)
refs
--\sys_project
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>