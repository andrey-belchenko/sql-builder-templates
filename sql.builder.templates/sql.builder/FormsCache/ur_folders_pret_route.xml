<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_folders_pret_route" title="Претензии в папке (с маршрутом)" timestamp="28.12.2023 14:54:29" security-id="asuse_ur_pir_pretenz" with-behavior="0" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms\ur_folders_pret.xml" elid="260" ord="260" leaf="0" lvl="2" pelid="">
    <field id="20297083" controlType="UIText" type="string" elid="389" ord="389" leaf="1" lvl="2" pelid="" name="ret_errmsg" title="ret_errmsg" checked="1" show-checkbox="0" width-perc="50" visible="0" />
    <field id="2003602" controlType="UINumber" edit-mask="d" type="number" elid="393" ord="393" leaf="1" lvl="2" pelid="" name="ret_status" title="ret_status" checked="1" show-checkbox="0" width-perc="50" visible="0" />
    <grid table="ur_pret" show-toolbar="1" id="1132776">
      <toolbar id="14263893">
        <uicommand name="ur_folders_open_route" title="Маршрут" id="58514559">
          <const id="39082060">'pret'</const>
          <useparam name="cur_kod_pret" id="58083272" />
        </uicommand>
      </toolbar>
      <columns id="66140627">
        <field table="ur_pret" name="kod_ur_pret" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="3285824" />
        <field table="ur_pret" name="kod_mat" title="Иск" width="221" controlType="UICombo" rows-limit="100" id="35966302" />
        <field table="ur_pret" name="kod_pret" title="Дата формирования претензии" width="130" controlType="UICombo" rows-limit="100" id="30502613" />
        <field table="ur_pret" name="ndog" title="Номер договора" controlType="UIText" rows-limit="100" id="50930331" />
        <field table="ur_pret" name="dat_calc_peni" title="Дата расчета пени" controlType="UIDate" rows-limit="100" id="54312439" />
        <field table="ur_pret" name="dolg_osn_real" title="Сумма задолженности ОД" controlType="UIText" edit-mask="N2" rows-limit="100" id="25193982" />
        <field table="ur_pret" name="dolg_peni" title="Пени" controlType="UIText" edit-mask="N2" rows-limit="100" id="37153046" />
        <field table="ur_pret" name="dolg_gp" title="Госпошлина" controlType="UIText" edit-mask="N2" rows-limit="100" id="8623221" />
        <field table="ur_pret" name="dolg_sud_peni" title="Пени отсуженные" controlType="UIText" edit-mask="N2" rows-limit="100" id="63438242" />
        <field table="ur_pret" name="dolg_astr" title="Пени за несвоевременное исполнение решения суда" controlType="UIText" edit-mask="N2" rows-limit="100" id="23988209" />
        <field table="ur_pret" name="dolg_othr" title="Иные виды задолженности" controlType="UIText" edit-mask="N2" rows-limit="100" id="5582347" />
        <field table="ur_pret" name="sposob_name" title="Способ отправки" controlType="UIText" rows-limit="100" id="44447587" />
        <field table="ur_pret" name="dat_send" title="Дата отправки" controlType="UIDate" rows-limit="100" id="30785985" />
        <field table="ur_pret" name="status_name" title="Статус" controlType="UIText" rows-limit="100" id="41615033" />
        <field table="ur_pret" name="dat_arx" title="Дата переноса в архив" controlType="UIDate" rows-limit="100" id="60097843" />
        <field table="ur_pret" name="fio" title="Исполнитель" controlType="UIText" rows-limit="100" id="36050661" />
      </columns>
      <events id="36741317">
        <useaction event-name="row-save" action-type="custom" action-rows="all" id="43744201">
          <useaction name="arbitrage_route_on_save" id="17744251">
            <useparam name="cur_kod_pret" id="15792349" />
            <const id="31688149">'pret'</const>
            <useparam name="ret_status" id="1750335" />
            <useparam name="ret_errmsg" id="25658896" />
          </useaction>
          <useaction name="arbitrage_show_errmsg" id="37545306">
            <useparam name="ret_status" id="921211" />
            <useparam name="ret_errmsg" id="48824191" />
          </useaction>
        </useaction>
      </events>
    </grid>
  </form>
  <params>
    <param name="kod_folders" type="number">
      <const>1004446525</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="kod_folders" type="number">
        <const>1004446525</const>
      </param>
    </params>
    <fields>
      <field type="string" name="ret_errmsg" parname="ret_errmsg" title="ret_errmsg" ClientVisible="0" />
      <field type="number" name="ret_status" parname="ret_status" title="ret_status" ClientVisible="0" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_folders_has_changes" parname="ur_folders_has_changes" />
      <field type="string" name="ur_pret_has_changes" parname="ur_pret_has_changes" />
    </fields>
    <table name="ur_folders" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_folders" delete-validation="ur_folders_del_vld" key="kod_folders" is-ms-upd="1" is-top="1" key-dimension="kod_folders">
      <select-text>
--
select ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders
--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</select-text>
      <columns>
        <column name="is_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="ur_folders_del_vld" table="ur_folders" type="string" title="Валидация удаления папки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_folders" table="ur_folders" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_folders 
(kod_folders 
) 
 values  
(r.kod_folders 
) 
 returning  
kod_folders into :kod_folders; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_folders where kod_folders=:kod_folders</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_folders' 
and 
names=:form_id 
and 
f2=:kod_folders; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kod_folders as kod_folders 
,a.kodp 
,a.kod_emp 
,a.kod_vi 
,a.kod_sdp 
,a.dat_create 
,a.zadol 
,a.u_m 
,a.d_m 
,a.kod_parent 
,a.kod_isp 
,a.tep_el 
,a.vvod 
,a.dat_finish 
,a.num_doc 
,a.kod_podr 
,a.tep_el_byt 
,a.kodp_new 
,a.kodps 
,a.namep 
,a.kod_category 
,a.kod_dog 
 
from ur_folders a  where kod_folders=:kod_folders) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,n5 
,d1 
,n6 
,s1 
,d2 
,n7 
,n8 
,n9 
,n10 
,d3 
,s2 
,n11 
,n12 
,n13 
,s3 
,s4 
,n14 
,n15 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kod_folders 
,r.kodp 
,r.kod_emp 
,r.kod_vi 
,r.kod_sdp 
,r.dat_create 
,r.zadol 
,r.u_m 
,r.d_m 
,r.kod_parent 
,r.kod_isp 
,r.tep_el 
,r.vvod 
,r.dat_finish 
,r.num_doc 
,r.kod_podr 
,r.tep_el_byt 
,r.kodp_new 
,r.kodps 
,r.namep 
,r.kod_category 
,r.kod_dog 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_folders' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_folders set  
(kod_folders 
) 
= 
 ( select  
:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_folders=:kod_folders 
;
end;
</update-text>
      <events>
        <useaction event-name="object-save" action-type="execute-update" call="ur_folders_sync_dat_arh">
          <column table="this" column="kod_folders" />
        </useaction>
      </events>
      <scheme>
        <table name="ur_folders" as="ur_folders">
          <columns>
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_folders_del_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_folders_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_folders_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,0 as is_new,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,0 as is_new,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_pret" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_pret" key="kod_ur_pret" parent-table="ur_folders" parent-key="kod_folders" is-ms-upd="1" key-dimension="kod_ur_pret">
      <select-text>
--
select ur_pret.kod_ur_pret as kod_ur_pret, /*number*//*key*/
ur_pret.kod_mat as kod_mat, /*Иск*//*number*/
ur_pret.kod_pret as kod_pret, /*Дата формирования претензии*//*number*/
kod_dog.ndog as ndog, /*Номер договора*//*string*/
kod_pret_dolg_dog.dat_calc_peni as dat_calc_peni, /*Дата расчета пени*//*date*/
kod_pret_dolg_dog.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
kod_pret_dolg_dog.dolg_peni as dolg_peni, /*Пени*//*number*/
kod_pret_dolg_dog.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
kod_pret_dolg_dog.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
kod_pret_dolg_dog.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
kod_pret_dolg_dog.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
kod_pret.sposob_name as sposob_name, /*Способ отправки*//*string*/
kod_pret.dat_send as dat_send, /*Дата отправки*//*date*/
kod_pret.status_name as status_name, /*Статус*//*string*/
kod_pret.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
kod_emp.fio as fio, /*Исполнитель*//*string*/
kod_mat_x_n.name as kod_mat_x_n, /*Иск*//*string*/
kod_pret_x_n.name as kod_pret_x_n, /*Дата формирования претензии*//*string*/
ur_pret.kod_folders as kod_folders, /*number*/
ur_pret.kodp as kodp, /*number*/
ur_pret.is_new as is_new, /*number*/
ur_pret.is_not_new as is_not_new/*number*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret, /*number*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat, /*number*/
kod_folders.kodp as kodp, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_pret
a
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 to_char( a.dat_form ,'DD.MM.YYYY')  as name/*Дата формирования*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret_x_n on ur_pret.kod_pret = kod_pret_x_n.kod_pret--\kr_pret
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_pret.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.dat_send as dat_send, /*Дата отправки*//*date*/
a.kod_emp as kod_emp, /*number*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*/
a.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
 decode( a.status , 0 , 'сформирована' , 1 , 'напечатана' , 2 , 'архив' )  as status_name, /*Статус*//*string*/
 decode( a.status , 0 , 'эдо' , 1 , 'нарочно' , 2 , 'почта' , 3 , 'иное' )  as sposob_name/*Способ отправки*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
a.dolg_peni as dolg_peni, /*Пени*//*number*/
a.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
a.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
a.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
a.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
a.dat_calc_peni as dat_calc_peni/*Дата расчета пени*//*date*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp on kod_pret.kod_emp = kod_emp.kod_emp--\kr_employee
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog as ndog/*Номер договора*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on kod_pret.kod_dog = kod_dog.kod_dog--\kr_dogovor
where
ur_pret.kod_folders = :fk_kod_folders --\
</select-text>
      <columns>
        <column name="kod_ur_pret" table="ur_pret" type="number" title="" parname="cur_kod_pret" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="kod_ur_pret" temp-col-name="n1" />
        <column name="kod_mat" table="ur_pret" type="number" title="Иск" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" elid="2615" ord="2615" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_mat" into="n1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="name" as="name" key="0" used="1" type="string" title="Иск" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" into="s1">a.name as name/*Иск*//*string*/
</column></select>
                <from>
from <query name="ur_mat" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_folders" type="number" as="kod_folders" reference="ur_folders" refcol="kod_folders" key="0" sourcetable="./a/a" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*/
</column><call function="||" as="name" title="Иск" key="0" pth="" type="string" used="1" sourcetable="./a/a/kod_doc" sourcecolumn="abbr"><column table="kod_doc" column="abbr">kod_doc.abbr</column><text txtype="func"> || </text><const><text>'  '</text></const><text txtype="func"> || </text><column table="a" column="num_delo">a.num_delo</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Иск*//*string*/
</call></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="us_doc" as="kod_doc" join="left outer" path="./a/a/kod_doc" haskeys="1" used="1">left outer join
(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a/kod_doc" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from><call function="=" type="bool">)
kod_doc on <column table="a" column="kod_doc">a.kod_doc</column><text txtype="func"> = </text><column table="kod_doc" column="kod_doc">kod_doc.kod_doc</column></call>--\us_doc
</query></from>)
a
--\ur_mat
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><const><text>:p_kod_fold </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> ) like lower( </text><const><text>:kod_mat_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" elid="2615" ord="2615" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" elid="2615" ord="2615" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="p_kod_fold" column="kod_folders" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_mat_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" />
                    <column table="a" column="name" as="name" key="0" />
                  </select>
                  <from>
                    <query name="ur_mat" as="a" title="Материалы переданные в суд" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="=">
                        <column table="a" column="kod_folders" />
                        <useparam name="p_kod_fold" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="kod_mat_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="p_kod_fold" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_mat_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="p_kod_fold" column="kod_folders">
                  <const>:p_kod_fold </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_mat_filter" type="string">
                  <const>:kod_mat_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param type="number" name="p_kod_fold" column="kod_folders" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_pret">
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Иск*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_mat as kod_mat  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_mat as kod_mat  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_pret.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_mat_x_n" table="ur_pret" />
          </dependants>
        </column>
        <column name="kod_pret" table="ur_pret" type="number" title="Дата формирования претензии" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_pret" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query class="1" title="Претензия" timestamp="07.08.2018 17:31:48" order="dat_form" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_pret.xml" elid="2345" ord="2345" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="dat_form">dat_form</column>
                </order>
                <select>--a
select <column table="a" column="kod_pret" as="kod_pret" key="1" fixed="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_pret" into="n1">a.kod_pret as kod_pret, /*number*//*key*/
</column><column table="a" column="name" vid="1" as="name" key="0" used="1" type="string" title="Дата формирования" agg="max" into="s1">a.name as name, /*Дата формирования*//*string*/
</column><column table="a" column="dat_form" title="-" as="dat_form" key="0" used="1" type="date" agg="max" sourcetable="./a/a" sourcecolumn="dat_form" into="d1">a.dat_form as dat_form/*-*//*date*/
</column></select>
                <from>
from <query name="kr_pret" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_pret
select <column table="a" column="kod_pret" type="number" comment="код претензии" as="kod_pret" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_pret" used="1">a.kod_pret as kod_pret, /*number*//*key*/
</column><column table="a" column="kod_dog" type="number" comment="код договора" vid="1" as="kod_dog" reference="kr_dogovor" refcol="kod_dog" key="0" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*/
</column><column table="a" column="dat_form" type="date" title="Дата формирования" comment="дата формирования претензии" agg="max" is-private-dimension="dat" is-final-dimension="dat" dimension="dat" as="dat_form" key="0" sourcetable="./a/a" sourcecolumn="dat_form" used="1">a.dat_form as dat_form, /*Дата формирования*//*date*/
</column><call function="date to char" as="name" title="Дата формирования" key="0" pth="" type="string" used="1" agg="max"><text txtype="func"> to_char( </text><column table="a" column="dat_form" type="date" title="Дата формирования" comment="дата формирования претензии" agg="max" is-private-dimension="dat" is-final-dimension="dat" dimension="dat" as="dat_form" key="0" thissrc="dat_form">a.dat_form</column><text txtype="func"> ,'DD.MM.YYYY') </text> as name/*Дата формирования*//*string*/
</call></select><from>
from <table name="kr_pret" as="a" title="Претензия" used="1">kr_pret
a
--\kr_pret
</table></from>)
a
--\kr_pret
</query><query name="kr_dogovor" as="kod_dog" join="left outer" path="./a/kod_dog" haskeys="1" used="1">left outer join
(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/kod_dog" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/kod_dog" sourcecolumn="kodp" used="1">a.kodp as kodp/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from><call function="=" type="bool">)
kod_dog on <column table="a" column="kod_dog">a.kod_dog</column><text txtype="func"> = </text><column table="kod_dog" column="kod_dog">kod_dog.kod_dog</column></call>--\kr_dogovor
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="kod_dog" column="kodp">kod_dog.kodp</column><text txtype="func"> = </text><const><text>:kodp </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_pret" as="kod_pret" key="1" fixed="1" thissrc="kod_pret">a.kod_pret</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_pret" as="kod_pret" key="1" fixed="1" thissrc="kod_pret">a.kod_pret</column><text txtype="func"> ) like lower( </text><const><text>:kod_pret_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" vid="1" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_form" title="-" as="dat_form" key="0" thissrc="dat_form">a.dat_form</column><text txtype="func"> ) like lower( </text><const><text>:dat_form_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by dat_form</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Претензия" timestamp="07.08.2018 17:31:48" order="dat_form" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_pret.xml" elid="2345" ord="2345" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Претензия" timestamp="07.08.2018 17:31:48" order="dat_form" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_pret.xml" elid="2345" ord="2345" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kodp" type="number" column="kodp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_pret_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="dat_form_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_pret" as="kod_pret" key="1" fixed="1" />
                    <column table="a" column="name" vid="1" as="name" key="0" />
                    <column table="a" column="dat_form" title="-" as="dat_form" key="0" />
                  </select>
                  <from>
                    <query name="kr_pret" as="a" title="Претензия">
                      <link name="kod_dog" as="kod_dog" table="kr_dogovor" child="kr_pret" field="kod_dog" parent="kr_dogovor" back="kr_pret" title="Договор" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="=">
                        <column table="kod_dog" column="kodp" />
                        <useparam name="kodp" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_pret" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_pret" />
                        <useparam name="kod_pret_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_form" />
                        <useparam name="dat_form_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="dat_form" />
                  </order>
                  <withparams>
                    <useparam name="kodp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_pret_filter" />
                    <useparam name="name_filter" />
                    <useparam name="dat_form_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kodp" type="number" column="kodp">
                  <const>:kodp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_pret_filter" type="string">
                  <const>:kod_pret_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="dat_form_filter" type="string">
                  <const>:dat_form_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kodp" type="number" column="kodp" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_pret">
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog.ndog as ndog, /*Номер договора*//*string*/
kod_pret_dolg_dog.dat_calc_peni as dat_calc_peni, /*Дата расчета пени*//*date*/
kod_pret_dolg_dog.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
kod_pret_dolg_dog.dolg_peni as dolg_peni, /*Пени*//*number*/
kod_pret_dolg_dog.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
kod_pret_dolg_dog.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
kod_pret_dolg_dog.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
kod_pret_dolg_dog.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
kod_pret.sposob_name as sposob_name, /*Способ отправки*//*string*/
kod_pret.dat_send as dat_send, /*Дата отправки*//*date*/
kod_pret.status_name as status_name, /*Статус*//*string*/
kod_pret.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
kod_emp.fio as fio, /*Исполнитель*//*string*/
kod_pret_x_n.name as kod_pret_x_n, /*Дата формирования претензии*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 to_char( a.dat_form ,'DD.MM.YYYY')  as name/*Дата формирования*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret_x_n on ur_pret.kod_pret = kod_pret_x_n.kod_pret--\kr_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.dat_send as dat_send, /*Дата отправки*//*date*/
a.kod_emp as kod_emp, /*number*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*/
a.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
 decode( a.status , 0 , 'сформирована' , 1 , 'напечатана' , 2 , 'архив' )  as status_name, /*Статус*//*string*/
 decode( a.status , 0 , 'эдо' , 1 , 'нарочно' , 2 , 'почта' , 3 , 'иное' )  as sposob_name/*Способ отправки*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
a.dolg_peni as dolg_peni, /*Пени*//*number*/
a.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
a.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
a.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
a.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
a.dat_calc_peni as dat_calc_peni/*Дата расчета пени*//*date*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp on kod_pret.kod_emp = kod_emp.kod_emp--\kr_employee
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog as ndog/*Номер договора*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on kod_pret.kod_dog = kod_dog.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ndog" table="ur_pret" />
            <dependant name="dat_calc_peni" table="ur_pret" />
            <dependant name="dolg_osn_real" table="ur_pret" />
            <dependant name="dolg_peni" table="ur_pret" />
            <dependant name="dolg_gp" table="ur_pret" />
            <dependant name="dolg_sud_peni" table="ur_pret" />
            <dependant name="dolg_astr" table="ur_pret" />
            <dependant name="dolg_othr" table="ur_pret" />
            <dependant name="sposob_name" table="ur_pret" />
            <dependant name="dat_send" table="ur_pret" />
            <dependant name="status_name" table="ur_pret" />
            <dependant name="dat_arx" table="ur_pret" />
            <dependant name="fio" table="ur_pret" />
            <dependant name="kod_pret_x_n" table="ur_pret" />
          </dependants>
        </column>
        <column name="ndog" table="kod_dog" type="string" title="Номер договора" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog.ndog as ndog, /*Номер договора*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog as ndog/*Номер договора*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on kod_pret.kod_dog = kod_dog.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_calc_peni" table="kod_pret_dolg_dog" type="date" title="Дата расчета пени" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dat_calc_peni as dat_calc_peni, /*Дата расчета пени*//*date*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dat_calc_peni as dat_calc_peni/*Дата расчета пени*//*date*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_osn_real" table="kod_pret_dolg_dog" type="number" title="Сумма задолженности ОД" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_osn_real as dolg_osn_real/*Сумма задолженности ОД*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_peni" table="kod_pret_dolg_dog" type="number" title="Пени" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_peni as dolg_peni, /*Пени*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_peni as dolg_peni/*Пени*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_gp" table="kod_pret_dolg_dog" type="number" title="Госпошлина" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_gp as dolg_gp/*Госпошлина*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_sud_peni" table="kod_pret_dolg_dog" type="number" title="Пени отсуженные" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_sud_peni as dolg_sud_peni/*Пени отсуженные*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_astr" table="kod_pret_dolg_dog" type="number" title="Пени за несвоевременное исполнение решения суда" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_astr as dolg_astr/*Пени за несвоевременное исполнение решения суда*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dolg_othr" table="kod_pret_dolg_dog" type="number" title="Иные виды задолженности" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_dolg_dog.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_othr as dolg_othr/*Иные виды задолженности*//*number*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="sposob_name" table="kod_pret" type="string" title="Способ отправки" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret.sposob_name as sposob_name, /*Способ отправки*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 decode( a.status , 0 , 'эдо' , 1 , 'нарочно' , 2 , 'почта' , 3 , 'иное' )  as sposob_name/*Способ отправки*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_send" table="kod_pret" type="date" title="Дата отправки" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret.dat_send as dat_send, /*Дата отправки*//*date*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.dat_send as dat_send/*Дата отправки*//*date*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="status_name" table="kod_pret" type="string" title="Статус" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret.status_name as status_name, /*Статус*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 decode( a.status , 0 , 'сформирована' , 1 , 'напечатана' , 2 , 'архив' )  as status_name/*Статус*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_arx" table="kod_pret" type="date" title="Дата переноса в архив" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.dat_arx as dat_arx/*Дата переноса в архив*//*date*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="fio" table="kod_emp" type="string" title="Исполнитель" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_emp.fio as fio, /*Исполнитель*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_emp as kod_emp/*number*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp on kod_pret.kod_emp = kod_emp.kod_emp--\kr_employee
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat_x_n" table="ur_pret.kod_mat" type="string" title="Иск" text-source-for="kod_mat" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Иск*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_mat as kod_mat  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_mat as kod_mat  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_pret.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_pret_x_n" table="ur_pret.kod_pret" type="string" title="Дата формирования претензии" text-source-for="kod_pret" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_pret_x_n.name as kod_pret_x_n, /*Дата формирования претензии*//*string*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 to_char( a.dat_form ,'DD.MM.YYYY')  as name/*Дата формирования*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret_x_n on ur_pret.kod_pret = kod_pret_x_n.kod_pret--\kr_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_folders" table="ur_pret" type="number" title="Папка" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n5">
          <sel-list-compiled>
            <root>
              <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_folders" as="kod_folders" title="" key="1" used="1" type="number" agg="count" sourcetable="./a/a" sourcecolumn="kod_folders" into="n1">a.kod_folders as kod_folders, /**//*number*//*key*/
</column><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="dat_create" into="d1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" key="0" used="1" type="date" visible="is_not_new" sourcetable="./a/a" sourcecolumn="dat_finish" into="d2">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" key="0" used="1" type="string" visible="is_not_new" sourcetable="./a/a" sourcecolumn="num_doc" into="s1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_category" reference="us_category" refcol="kod_category" into="n2">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" key="0" used="1" type="string" into="s2">kod_category.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
</column><column table="a" column="ndog" as="ndog" title="Номер договора" key="0" used="1" type="string" agg="max" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" into="s3">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="name" as="name" title="Договор" key="0" used="1" type="string" agg="max" into="s4">a.name as name, /*Договор*//*string*/
</column><column table="a" column="is_active" as="is_active" title="Статус папки" key="0" used="1" type="number" into="n3">a.is_active as is_active, /*Статус папки*//*number*/
</column><column table="a" column="font_color" as="font_color" title="Цвет текста" key="0" used="1" type="string" into="s5">a.font_color as font_color, /*Цвет текста*//*string*/
</column><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" key="0" used="1" type="string" into="s6">a.info_reminder as info_reminder/*Напоминание*//*string*/
</column></select>
                <from>
from <query name="ur_folders" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="dat_create" type="date" title="Дата создания папки" column-mandatory="1" column-default="today" as="dat_create" key="0" sourcetable="./a/a" sourcecolumn="dat_create" used="1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" sourcetable="./a/a" sourcecolumn="dat_finish" used="1">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" type="string" title="Документ (основание для сброса папки в архив)" comment="док-т - основание для архивации папки" visible="is_not_new" as="num_doc" key="0" sourcetable="./a/a" sourcecolumn="num_doc" used="1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" type="number" comment="категория абонента" title="Категория потребителя" as="kod_category" reference="us_category" refcol="kod_category" key="0" sourcetable="./a/a" sourcecolumn="kod_category" used="1">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_dog" column="ndog" is-fact="1" fact="ur_folders_ndog" agg="max" as="ndog" key="0" used="1" type="string" title="Номер договора" sourcetable="./a/a/kod_dog" sourcecolumn="ndog">kod_dog.ndog as ndog, /*Номер договора*//*string*/
</column><column table="kod_dog" column="name" is-fact="1" fact="ur_folders_dog_name" agg="max" as="name" key="0" used="1" type="string" title="Договор">kod_dog.name as name, /*Договор*//*string*/
</column><call function="true if null" as="is_active" title="Статус папки" key="0" pth="" type="number" used="1"><text txtype="func"> decode ( </text><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ,null,1,0) </text> as is_active, /*Статус папки*//*number*/
</call><call as="font_color" function="case" title="Цвет текста" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder1" dgroup="max">ur_mat.mat_reminder1</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'102,51,99'</text></const></call><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder2" dgroup="max">ur_mat.mat_reminder2</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'139,0,0'</text></const></call><text txtype="func"> end </text> as font_color, /*Цвет текста*//*string*/
</call><call function="||" as="info_reminder" title="Напоминание" key="0" pth="" type="string" used="1"><column table="ur_mat" column="mat_reminder1">ur_mat.mat_reminder1</column><text txtype="func"> || </text><column table="ur_mat" column="mat_reminder2">ur_mat.mat_reminder2</column> as info_reminder/*Напоминание*//*string*/
</call></select><from>
from <table name="ur_folders" as="a" title="Папка" used="1">ur_folders
a
--\ur_folders
</table><query as="ur_mat" join="left outer" path="./a/a/ur_mat" used="1">left outer join
(
<select>--
select <column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders as kod_folders, /*number*//*key*/
</column><column table="ur_mat" group="max" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">max(ur_mat.mat_reminder1)  as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="ur_mat" group="max" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">max(ur_mat.mat_reminder2)  as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <query name="ur_mat" as="ur_mat" path="./a/a/ur_mat/ur_mat" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_folders" type="number" as="kod_folders" reference="ur_folders" refcol="kod_folders" key="0" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*/
</column><column table="kod_mat_reminder" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">kod_mat_reminder.mat_reminder1 as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="kod_mat_reminder" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">kod_mat_reminder.mat_reminder2 as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="uv_mat_reminders" as="kod_mat_reminder" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder" used="1">left outer join
(
<select>--uv_mat_reminders
select <column table="a" column="kod_mat" as="kod_mat" key="0" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat, /*number*/
</column><call function="if" as="mat_reminder1" title="Напоминание 1" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="lt" pth="" type="bool">(<column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> &lt; </text><call function="add_months" pth="" type="date">(<text txtype="func"> add_months( </text><const type="date"><text>sysdate</text></const><text txtype="func"> , </text><const type="number"><text>-1</text></const><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl0" pth="" type="number">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_count1" table="qube" as="ur_hist_mat_count1">qube.ur_hist_mat_count1</column><text txtype="func"> ,0) </text>) </call><text txtype="func"> = </text><const type="number"><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'История не заполнена. '</text></const><text txtype="func"> end </text> as mat_reminder1, /*Напоминание 1*//*string*/
</call><call function="if" as="mat_reminder2" title="Напоминание 2" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="!=0" pth="" type="bool">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_dec_pr_resh1" table="qube" as="ur_hist_mat_dec_pr_resh1">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0)!=0 </text>) </call><text txtype="func"> and </text><call function="is null" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_entry1" table="qube" as="ur_hist_mat_dec_dat_entry1">qube.ur_hist_mat_dec_dat_entry1</column><text txtype="func"> is null </text>) </call><text txtype="func"> and </text><call function="lt" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_resh1" table="qube" as="ur_hist_mat_dec_dat_resh1">qube.ur_hist_mat_dec_dat_resh1</column><text txtype="func"> &lt; </text><call function="-" pth="" type="number">(<const type="date"><text>sysdate</text></const><text txtype="func"> - </text><const type="number"><text>40</text></const>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl" pth="">(<text txtype="func"> nvl( </text><column column="qube_mat_pp_cld_inf_cnt_nd1" table="qube" as="qube_mat_pp_cld_inf_cnt_nd1">qube.qube_mat_pp_cld_inf_cnt_nd1</column><text txtype="func"> , </text><const><text>0</text></const><text txtype="func"> ) </text>) </call><text txtype="func"> = </text><const><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'Не введена дата вступления решения в законную силу. '</text></const><text txtype="func"> end </text> as mat_reminder2/*Напоминание 2*//*string*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" group="sum" key="0" used="1" type="number" agg="sum">sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" group="max" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(qube.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" group="max" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(qube.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" group="sum" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(qube.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="qube_mat_pp_cld_inf_cnt_nd1" group="sum" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(un.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="un" column="ur_hist_mat_count1" group="sum" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="un" column="ur_hist_mat_dec_dat_entry1" group="max" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="un" column="ur_hist_mat_dec_dat_resh1" group="max" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(un.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube_mat_pp_cld_inf_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube_mat_pp_cld_inf_a_d" column="cnt_nd" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube_mat_pp_cld_inf_a_d.cnt_nd as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="qube_mat_pp_cld_inf" as="qube_mat_pp_cld_inf_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d" used="1">(
<select>--qube_mat_pp_cld_inf
select <column table="kod_mat_pp" column="kod_parent" as="kod_mat_pp" key-dimension="kod_mat_pp" dimension="kod_mat_pp" key="0" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">kod_mat_pp.kod_parent as kod_mat_pp, /*number*/
</column><call function="-nvl" as="cnt_nd" agg="sum" key="0" pth="" type="number" used="1" title="Судебный акт - решение"><text txtype="func"> nvl( </text><call function="()" as="cnt" type="number" agg="sum" pth="">(<const><text>1</text></const>) </call><text txtype="func"> ,0) </text><text txtype="func"> -nvl( </text><column column="ur_hist_mat_dec_pr_resh1" as="cnt_dec" agg="sum" is-fact-use="1" thissrc="cnt_dec" table="qube">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0) </text> as cnt_nd/*Судебный акт - решение*//*number*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" agg="sum" is-fact-use="1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="kod_mat_pp" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat">kod_mat_pp.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
kod_mat_pp
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from>)
qube_mat_pp_cld_inf_a_d
--\qube_mat_pp_cld_inf
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp">qube_mat_pp_cld_inf_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where /></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><column table="ur_hist_mat_a_d" column="cnt" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
</column><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_hist_mat" dimension="kod_hist_mat" as="ur_hist_mat_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><const type="number" as="cnt" fact="ur_hist_mat_count" agg="sum" key="0" used="1"><text>1</text> as cnt, /*number*/
</const><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat_pp" reference="ur_mat" refcol="kod_mat" key="0" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*/
</column></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat" used="1">ur_hist_mat
a
--\ur_hist_mat
</table></from>)
ur_hist_mat_a_d
--\ur_hist_mat
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_a_d" column="kod_mat_pp">ur_hist_mat_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><column table="ur_hist_mat_dec_a_d" column="dat_entry_dec" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="ur_hist_mat_dec_a_d" column="dat_resh" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">ur_hist_mat_dec_a_d.dat_resh as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><column table="a" column="dat_post" as="dat_resh" agg="max" title="Дата принятия решения" dimension="dat" is-final-dimension="1" is-private-dimension="1" is-fact="1" fact="ur_hist_mat_dec_dat_resh" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post" used="1">a.dat_post as dat_resh, /*Дата принятия решения*/
</column><column table="a" column="dat_entry" type="date" title="Дата вст. реш. в зак. силу" comment="дата вступления решения в законную силу,  Емцов - поменял условие валидации по 38755" valid="dat_entry_vld" as="dat_entry_dec" key="0" thissrc="dat_entry" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry" used="1">a.dat_entry as dat_entry_dec, /*Дата вст. реш. в зак. силу*//*date*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="a" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="a" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
a
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="dat_doc" type="date" title="Дата подачи в суд" mandatory="dat_otz" fact="ur_mat_dat_doc_max" agg="max" as="dat_doc" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="dat_doc" used="1">a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from><call function="=" type="bool">)
kod_mat_reminder on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_reminder" column="kod_mat">kod_mat_reminder.kod_mat</column></call>--\uv_mat_reminders
</query></from>)
ur_mat
--\ur_mat
</query></from><group> group by
<column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
ur_mat on <column table="ur_mat" column="kod_folders">ur_mat.kod_folders</column><text txtype="func"> = </text><column table="a" column="kod_folders">a.kod_folders</column></call>--\
</query><query name="kr_dogovor" as="kod_dog" join="left outer" path="./a/a/kod_dog" haskeys="1" used="1">left outer join
(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a/kod_dog" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><call function="||" as="name" title="Договор" agg="stragg_dist" key="0" pth="" type="string" used="1"><column table="a" column="ndog">a.ndog</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_dog">a.dat_dog</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Договор*//*string*/
</call></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from><call function="=" type="bool">)
kod_dog on <column table="a" column="kod_dog">a.kod_dog</column><text txtype="func"> = </text><column table="kod_dog" column="kod_dog">kod_dog.kod_dog</column></call>--\kr_dogovor
</query></from>)
a
--\ur_folders
</query><query name="us_category" as="kod_category" join="left outer" path="./a/kod_category" haskeys="1" used="1">left outer join
(
<select>--us_category
select <column table="а" column="kod_category" type="number" key="1" as="kod_category" sourcetable="./a/kod_category" sourcecolumn="kod_category" used="1">а.kod_category as kod_category, /*number*//*key*/
</column><call function="||" as="sp_col_name" title="" pth="" type="string" key="0" used="1"><column table="а" column="name" type="string" is-name="1">а.name</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><column table="а" column="abbr" type="string" is-name="1">а.abbr</column> as sp_col_name/**//*string*/
</call></select><from>
from <table name="us_category" as="а" title="Категория потребителей (юристы)" used="1">us_category
а
--\us_category
</table></from><call function="=" type="bool">)
kod_category on <column table="a" column="kod_category">a.kod_category</column><text txtype="func"> = </text><column table="kod_category" column="kod_category">kod_category.kod_category</column></call>--\us_category
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> ) like lower( </text><const><text>:kod_folders_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" thissrc="dat_create">a.dat_create</column><text txtype="func"> ) like lower( </text><const><text>:dat_create_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ) like lower( </text><const><text>:dat_finish_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" thissrc="num_doc">a.num_doc</column><text txtype="func"> ) like lower( </text><const><text>:num_doc_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" thissrc="kod_category">a.kod_category</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" thissrc="kod_category_x_n">kod_category.sp_col_name</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" title="Номер договора" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Договор" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="is_active" as="is_active" title="Статус папки" thissrc="is_active">a.is_active</column><text txtype="func"> ) like lower( </text><const><text>:is_active_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="font_color" as="font_color" title="Цвет текста" thissrc="font_color">a.font_color</column><text txtype="func"> ) like lower( </text><const><text>:font_color_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" thissrc="info_reminder">a.info_reminder</column><text txtype="func"> ) like lower( </text><const><text>:info_reminder_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" elid="2980" ord="2980" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_folders_filter" type="string" />
                    <param name="dat_create_filter" type="string" />
                    <param name="dat_finish_filter" type="string" />
                    <param name="num_doc_filter" type="string" />
                    <param name="kod_category_filter" type="string" />
                    <param name="kod_category_x_n_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="is_active_filter" type="string" />
                    <param name="font_color_filter" type="string" />
                    <param name="info_reminder_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_folders" as="kod_folders" title="" key="1" />
                    <column table="a" column="dat_create" as="dat_create" title="Дата создания папки" />
                    <column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" />
                    <column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" />
                    <column table="a" column="kod_category" as="kod_category" title="Категория потребителя" />
                    <column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" />
                    <column table="a" column="ndog" as="ndog" title="Номер договора" />
                    <column table="a" column="name" as="name" title="Договор" />
                    <column table="a" column="is_active" as="is_active" title="Статус папки" />
                    <column table="a" column="font_color" as="font_color" title="Цвет текста" />
                    <column table="a" column="info_reminder" as="info_reminder" title="Напоминание" />
                  </select>
                  <from>
                    <query name="ur_folders" as="a" title="Папка">
                      <link name="kod_category" as="kod_category" table="us_category" child="ur_folders" field="kod_category" parent="us_category" back="ur_folders" title="Категория потребителей (юристы)" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="kod_folders_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_create" />
                        <useparam name="dat_create_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_finish" />
                        <useparam name="dat_finish_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_doc" />
                        <useparam name="num_doc_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category" />
                        <useparam name="kod_category_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category_x_n" />
                        <useparam name="kod_category_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="is_active" />
                        <useparam name="is_active_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="font_color" />
                        <useparam name="font_color_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="info_reminder" />
                        <useparam name="info_reminder_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_folders_filter" />
                    <useparam name="dat_create_filter" />
                    <useparam name="dat_finish_filter" />
                    <useparam name="num_doc_filter" />
                    <useparam name="kod_category_filter" />
                    <useparam name="kod_category_x_n_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="name_filter" />
                    <useparam name="is_active_filter" />
                    <useparam name="font_color_filter" />
                    <useparam name="info_reminder_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_folders_filter" type="string">
                  <const>:kod_folders_filter </const>
                </param>
                <param name="dat_create_filter" type="string">
                  <const>:dat_create_filter </const>
                </param>
                <param name="dat_finish_filter" type="string">
                  <const>:dat_finish_filter </const>
                </param>
                <param name="num_doc_filter" type="string">
                  <const>:num_doc_filter </const>
                </param>
                <param name="kod_category_filter" type="string">
                  <const>:kod_category_filter </const>
                </param>
                <param name="kod_category_x_n_filter" type="string">
                  <const>:kod_category_x_n_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="is_active_filter" type="string">
                  <const>:is_active_filter </const>
                </param>
                <param name="font_color_filter" type="string">
                  <const>:font_color_filter </const>
                </param>
                <param name="info_reminder_filter" type="string">
                  <const>:info_reminder_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_pret">
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_pret.kodp as kodp, /*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
kod_folders.kodp as kodp/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_folders as kod_folders  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n5 as kod_folders  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_folders as kod_folders  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n5 as kod_folders  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_pret
--\ur_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp" table="ur_pret" />
          </dependants>
        </column>
        <column name="kodp" table="ur_pret" type="number" title="" is-user-editable="1" is-refreshed="1">
          <sel-list-compiled>
            <root>
              <query title="Абонент" class="1" name-field-name="num_name" timestamp="09.06.2023 15:13:17" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_payer.xml" elid="2813" ord="2813" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kodp" as="kodp" title="" key="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kodp" into="n1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" as="nump" title="Код абонента" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="nump" into="s1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" as="name" title="Наименование абонента" key="0" used="1" type="string" agg="list" sourcetable="./a/a" sourcecolumn="name" into="s2">a.name as name/*Наименование абонента*//*string*/
</column></select>
                <from>
from <query name="kr_payer" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1" as="nump" key="0" sourcetable="./a/a" sourcecolumn="nump" used="1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list" as="name" fact="kr_payer_name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Наименование абонента*//*string*/
</column></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from>)
a
--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kodp" as="kodp" title="" key="1" thissrc="kodp">a.kodp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kodp" as="kodp" title="" key="1" thissrc="kodp">a.kodp</column><text txtype="func"> ) like lower( </text><const><text>:kodp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="nump" as="nump" title="Код абонента" thissrc="nump">a.nump</column><text txtype="func"> ) like lower( </text><const><text>:nump_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование абонента" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Абонент" class="1" name-field-name="num_name" timestamp="09.06.2023 15:13:17" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_payer.xml" elid="2813" ord="2813" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Абонент" class="1" name-field-name="num_name" timestamp="09.06.2023 15:13:17" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\kr_payer.xml" elid="2813" ord="2813" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kodp_filter" type="string" />
                    <param name="nump_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kodp" as="kodp" title="" key="1" />
                    <column table="a" column="nump" as="nump" title="Код абонента" />
                    <column table="a" column="name" as="name" title="Наименование абонента" />
                  </select>
                  <from>
                    <query name="kr_payer" as="a" title="Абонент" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="kodp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nump" />
                        <useparam name="nump_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kodp_filter" />
                    <useparam name="nump_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kodp_filter" type="string">
                  <const>:kodp_filter </const>
                </param>
                <param name="nump_filter" type="string">
                  <const>:nump_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_ur_pret_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_ur_pret_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_pret.kodp as kodp, /*number*/
ur_pret.kod_ur_pret as kod_ur_pret/*number*//*key*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
kod_folders.kodp as kodp/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_folders as kod_folders  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n5 as kod_folders  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_folders as kod_folders  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n5 as kod_folders  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_pret
--\ur_pret
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_pret" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_pret" type="number" title="" is-user-editable="1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_ur_pret as kod_ur_pret 
,:kod_mat as kod_mat 
,:kod_pret as kod_pret 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_pret 
(kod_ur_pret 
,kod_mat 
,kod_pret 
,kod_folders 
) 
 values  
(r.kod_ur_pret 
,r.kod_mat 
,r.kod_pret 
,r.kod_folders 
) 
 returning  
kod_ur_pret into :kod_ur_pret; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_pret where kod_ur_pret=:kod_ur_pret</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_pret' 
and 
names=:form_id 
and 
f2=:kod_ur_pret; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_ur_pret as kod_ur_pret 
,:kod_mat as kod_mat 
,:kod_pret as kod_pret 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n5 
) 
 values  
('ur_pret' 
,:form_id 
,:kod_ur_pret 
,:row_state_id 
,r.kod_ur_pret 
,r.kod_mat 
,r.kod_pret 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kod_ur_pret as kod_ur_pret 
,:kod_mat as kod_mat 
,:kod_pret as kod_pret 
,:kod_folders as kod_folders 
,a.pr_imp 
,a.num_sz 
,a.kod_emp 
,a.pio_date 
 
from ur_pret a  where kod_ur_pret=:kod_ur_pret) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n5 
,n4 
,s1 
,n6 
,d1 
) 
 values  
('ur_pret' 
,:form_id 
,:kod_ur_pret 
,:row_state_id 
,r.kod_ur_pret 
,r.kod_mat 
,r.kod_pret 
,r.kod_folders 
,r.pr_imp 
,r.num_sz 
,r.kod_emp 
,r.pio_date 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_pret' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_pret set  
(kod_ur_pret 
,kod_mat 
,kod_pret 
,kod_folders 
) 
= 
 ( select  
:kod_ur_pret as kod_ur_pret 
,:kod_mat as kod_mat 
,:kod_pret as kod_pret 
,:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_ur_pret=:kod_ur_pret 
;
end;
</update-text>
      <scheme>
        <table name="ur_pret" as="ur_pret">
          <columns>
            <column name="kod_ur_pret" type="number" title="" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_pret" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ndog" type="string" title="Номер договора" />
            <column name="dat_calc_peni" type="date" title="Дата расчета пени" />
            <column name="dolg_osn_real" type="number" title="Сумма задолженности ОД" />
            <column name="dolg_peni" type="number" title="Пени" />
            <column name="dolg_gp" type="number" title="Госпошлина" />
            <column name="dolg_sud_peni" type="number" title="Пени отсуженные" />
            <column name="dolg_astr" type="number" title="Пени за несвоевременное исполнение решения суда" />
            <column name="dolg_othr" type="number" title="Иные виды задолженности" />
            <column name="sposob_name" type="string" title="Способ отправки" />
            <column name="dat_send" type="date" title="Дата отправки" />
            <column name="status_name" type="string" title="Статус" />
            <column name="dat_arx" type="date" title="Дата переноса в архив" />
            <column name="fio" type="string" title="Исполнитель" />
            <column name="kod_mat_x_n" type="string" title="Иск" />
            <column name="kod_pret_x_n" type="string" title="Дата формирования претензии" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod_ur_pret" type="number" title="" visible="0" />
            <column name="kod_mat_x_n" type="string" title="Иск" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_pret_x_n" type="string" title="Дата формирования претензии" />
            <column name="kod_pret" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ndog" type="string" title="Номер договора" />
            <column name="dat_calc_peni" type="date" title="Дата расчета пени" />
            <column name="dolg_osn_real" type="number" title="Сумма задолженности ОД" />
            <column name="dolg_peni" type="number" title="Пени" />
            <column name="dolg_gp" type="number" title="Госпошлина" />
            <column name="dolg_sud_peni" type="number" title="Пени отсуженные" />
            <column name="dolg_astr" type="number" title="Пени за несвоевременное исполнение решения суда" />
            <column name="dolg_othr" type="number" title="Иные виды задолженности" />
            <column name="sposob_name" type="string" title="Способ отправки" />
            <column name="dat_send" type="date" title="Дата отправки" />
            <column name="status_name" type="string" title="Статус" />
            <column name="dat_arx" type="date" title="Дата переноса в архив" />
            <column name="fio" type="string" title="Исполнитель" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_ur_pret_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_ur_pret_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_pret.kod_ur_pret as kod_ur_pret, /*number*//*key*/
ur_pret.kod_mat as kod_mat, /*Иск*//*number*/
ur_pret.kod_pret as kod_pret, /*Дата формирования претензии*//*number*/
kod_dog.ndog as ndog, /*Номер договора*//*string*/
kod_pret_dolg_dog.dat_calc_peni as dat_calc_peni, /*Дата расчета пени*//*date*/
kod_pret_dolg_dog.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
kod_pret_dolg_dog.dolg_peni as dolg_peni, /*Пени*//*number*/
kod_pret_dolg_dog.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
kod_pret_dolg_dog.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
kod_pret_dolg_dog.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
kod_pret_dolg_dog.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
kod_pret.sposob_name as sposob_name, /*Способ отправки*//*string*/
kod_pret.dat_send as dat_send, /*Дата отправки*//*date*/
kod_pret.status_name as status_name, /*Статус*//*string*/
kod_pret.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
kod_emp.fio as fio, /*Исполнитель*//*string*/
kod_mat_x_n.name as kod_mat_x_n, /*Иск*//*string*/
kod_pret_x_n.name as kod_pret_x_n, /*Дата формирования претензии*//*string*/
ur_pret.kod_folders as kod_folders, /*number*/
ur_pret.kodp as kodp, /*number*/
ur_pret.is_new as is_new, /*number*/
ur_pret.is_not_new as is_not_new/*number*/

from (
--ur_pret
select a.kod_ur_pret as kod_ur_pret, /*number*//*key*/
a.kod_pret as kod_pret, /*number*/
a.kod_folders as kod_folders, /*number*/
a.kod_mat as kod_mat, /*number*/
kod_folders.kodp as kodp, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret,a.kod_folders as kod_folders,a.kod_mat as kod_mat,0 as is_new,1 as is_not_new  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret,t.n5 as kod_folders,t.n2 as kod_mat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
a
--\(select a.kod_ur_pret as kod_ur_pret,a.kod_pret as kod_pret,a.kod_folders as kod_folders,a.kod_mat as kod_mat,0 as is_new,1 as is_not_new  from ur_pret a where not exists (select * from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and a.kod_ur_pret=t.f2 ) and   a.kod_ur_pret in :kod_ur_pret_prm   union all  select t.n1 as kod_ur_pret,t.n3 as kod_pret,t.n5 as kod_folders,t.n2 as kod_mat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_pret' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_ur_pret_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_pret
--\ur_pret
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
 to_char( a.dat_form ,'DD.MM.YYYY')  as name/*Дата формирования*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret_x_n on ur_pret.kod_pret = kod_pret_x_n.kod_pret--\kr_pret
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_pret.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--kr_pret
select a.kod_pret as kod_pret, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.dat_send as dat_send, /*Дата отправки*//*date*/
a.kod_emp as kod_emp, /*number*/
a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*/
a.dat_arx as dat_arx, /*Дата переноса в архив*//*date*/
 decode( a.status , 0 , 'сформирована' , 1 , 'напечатана' , 2 , 'архив' )  as status_name, /*Статус*//*string*/
 decode( a.status , 0 , 'эдо' , 1 , 'нарочно' , 2 , 'почта' , 3 , 'иное' )  as sposob_name/*Способ отправки*//*string*/

from kr_pret
a
--\kr_pret
)
kod_pret on ur_pret.kod_pret = kod_pret.kod_pret--\kr_pret
left outer join
(
--vr_pret_dolg_dog
select a.kod_pret_dolg_dog as kod_pret_dolg_dog, /*number*//*key*/
a.dolg_osn_real as dolg_osn_real, /*Сумма задолженности ОД*//*number*/
a.dolg_peni as dolg_peni, /*Пени*//*number*/
a.dolg_gp as dolg_gp, /*Госпошлина*//*number*/
a.dolg_sud_peni as dolg_sud_peni, /*Пени отсуженные*//*number*/
a.dolg_astr as dolg_astr, /*Пени за несвоевременное исполнение решения суда*//*number*/
a.dolg_othr as dolg_othr, /*Иные виды задолженности*//*number*/
a.dat_calc_peni as dat_calc_peni/*Дата расчета пени*//*date*/

from vr_pret_dolg_dog
a
--\vr_pret_dolg_dog
)
kod_pret_dolg_dog on kod_pret.kod_pret_dolg_dog = kod_pret_dolg_dog.kod_pret_dolg_dog--\vr_pret_dolg_dog
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp on kod_pret.kod_emp = kod_emp.kod_emp--\kr_employee
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog as ndog/*Номер договора*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog on kod_pret.kod_dog = kod_dog.kod_dog--\kr_dogovor
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>