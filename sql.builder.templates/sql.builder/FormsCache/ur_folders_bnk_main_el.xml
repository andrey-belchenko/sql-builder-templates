<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_folders_bnk_main_el" title="Карточка по банкротству [:ur_folders.kodp]" security-id="asuse_ur_pir" with-behavior="0" timestamp="24.09.2023 02:16:54" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\bnk_el.xml" elid="117" ord="117" leaf="0" lvl="2" pelid="">
    <field table="ur_folders" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="17014896">
      <listquery val-field-name="kodp" id="9177230">
        <query name="kr_dogovor_list(dep_sng)" id="248033">
          <withparams id="43536777">
            <useparam name="dep" id="6617928" />
          </withparams>
        </query>
      </listquery>
    </field>
    <uicommand name="open_form_finance" width-fixed="1" editable="kodp" title="Лицевая карта" id="58252602">
      <useparam name="dep" id="4013199" />
      <useparam name="kodp" id="14270666" />
    </uicommand>
    <tabcontainer id="29917575">
      <fieldgroup title="Папка" show-toolbar="1" id="36739919">
        <toolbar id="26551599">
          <uicommand button-type="custom-refresh" editable="ur_folders_is_not_new" action-type="refresh-form" name="custom-refresh" icon="Refresh_24" title="Обновить" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="378" ord="378" leaf="1" lvl="2" pelid="" id="7862651" />
          <uicommand button-type="custom-commit" editable="ur_folders_has_changes" action-type="save" name="custom-commit" icon="Commit_24" title="Сохранить" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="379" ord="379" leaf="1" lvl="2" pelid="" id="22482647" />
        </toolbar>
        <field table="ur_folders" name="kod_podr" title="Отделение" controlType="UICombo" rows-limit="100" id="42885101" />
        <field table="ur_folders" name="kod_emp" title="Юрист" controlType="UICombo" rows-limit="100" id="56556304" />
        <field table="ur_folders" name="dat_create" title="Дата создания папки" controlType="UIDate" rows-limit="100" id="3316508" />
        <field table="ur_folders" name="dat_finish" title="Дата сброса папки в архив" controlType="UIDate" rows-limit="100" id="44006698" />
        <field table="ur_folders" name="num_doc" title="Документ (основание для сброса папки в архив)" controlType="UIText" rows-limit="100" id="48518961" />
        <field table="ur_folders" name="kod_category" title="Категория потребителя" controlType="UICombo" rows-limit="100" id="37223802" />
        <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="6621944" />
        <field table="ur_folders" name="test1" title="bbbb" controlType="UIText" edit-mask="N2" rows-limit="100" id="5745616">
          <call function="if" as="test1" table="ur_folders" type="number" title="bbbb" parname="new_pret_vis" column-visible="0" id="8858040">
            <call function="and" id="35485611">
              <call function="=1" id="56061371">
                <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="14011751" />
              </call>
              <call function="=" id="49930403">
                <field table="ur_folders" name="rs_esys_kod_esys" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="61004828" />
                <const id="32183272">23</const>
              </call>
            </call>
            <const id="37899203">1</const>
            <const id="60093258">0</const>
          </call>
        </field>
        <field table="ur_folders" name="test3" title="bbbb2" controlType="UIText" edit-mask="N2" rows-limit="100" id="59312059">
          <call function="if" as="test3" table="ur_folders" type="number" title="bbbb2" parname="kod_esys10_pret_vis" column-visible="0" id="56258897">
            <call function="and" id="57972315">
              <call function="=1" id="18046268">
                <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="63592580" />
              </call>
              <call function="=" id="19704350">
                <field table="ur_folders" name="rs_esys_kod_esys" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="63732148" />
                <const id="7787562">1</const>
              </call>
            </call>
            <const id="64600900">1</const>
            <const id="41423078">0</const>
          </call>
        </field>
        <field table="ur_folders" name="test2" title="bbbb1" controlType="UIText" edit-mask="N2" rows-limit="100" id="1204408">
          <call function="if" as="test2" table="ur_folders" type="number" title="bbbb1" parname="old_pret_vis" column-visible="0" id="10623980">
            <call function="and" id="6688175">
              <call function="=1" id="48769658">
                <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="38222479" />
              </call>
              <call function="not in" id="52779600">
                <field table="ur_folders" name="rs_esys_kod_esys" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="59646888" />
                <array id="52211561">23</array>
              </call>
            </call>
            <const id="46135913">1</const>
            <const id="29307183">0</const>
          </call>
        </field>
        <field table="ur_folders" name="vvod" title="Способ учета задолженности" controlType="UICombo" rows-limit="100" id="57542960" />
        <field table="ur_folders" name="kod_dog" title="Договор" controlType="UICombo" rows-limit="100" id="57615110">
          <listquery id="42955612">
            <query name="kr_dogovor(kodp)" id="55573554">
              <withparams id="19639518">
                <useparam name="kodp" id="15040822" />
              </withparams>
            </query>
          </listquery>
        </field>
        <field table="ur_folders" name="show_vvod_tabs" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="45853776">
          <call function="if" as="show_vvod_tabs" table="ur_folders" type="number" parname="show_vvod_tabs" column-visible="0" id="1171010">
            <call function="and" id="56847734">
              <call function="=1" id="65202298">
                <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="4998683" />
              </call>
              <call function="=1" id="63494787">
                <field table="ur_folders" name="vvod" title="Способ учета задолженности" controlType="UICombo" rows-limit="100" id="63674799" />
              </call>
              <call function="!=" id="3350178">
                <call function="user_rights_kod_menu" id="18385079">
                  <const id="496894">189006</const>
                </call>
                <const id="9159310">2</const>
              </call>
            </call>
            <const id="22991401">1</const>
            <const id="45375475">0</const>
          </call>
        </field>
        <field table="ur_folders" name="show_doc_tabs" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="43327380">
          <call function="if" as="show_doc_tabs" table="ur_folders" type="number" parname="show_doc_tabs" column-visible="0" id="32584686">
            <call function="and" id="49178656">
              <call function="=1" id="16863242">
                <field table="ur_folders" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="11875243" />
              </call>
              <call function="=0" id="12211671">
                <field table="ur_folders" name="vvod" title="Способ учета задолженности" controlType="UICombo" rows-limit="100" id="19960204" />
              </call>
            </call>
            <const id="7670976">1</const>
            <const id="15390691">0</const>
          </call>
        </field>
        <field table="ur_folders" name="is_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="64782724" />
      </fieldgroup>
      <fieldgroup as="mat" visible="show_doc_tabs" title="Включение в реестр треб. кредиторов" comment="По документам" id="58346109">
        <useform object="ur_folders" name="form_ur_folders_bnk_el" call="ur_folders_bnk_el" id="32410724">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup as="mat" visible="show_vvod_tabs" title="Включение в реестр треб. кредиторов" comment="Ручной ввод" id="16276216">
        <useform object="ur_folders" name="form_ur_folders_bnk_el_vvod" call="ur_folders_bnk_el_vvod" id="11322416">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup visible="ur_folders_is_not_new" title="Процедуры банкротства" as="stage_bk" id="1997797">
        <useform object="ur_folders" name="form_ur_folders_stage_bk_el" call="ur_folders_stage_bk_el" id="65349105">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup as="reestr_cred_req" title="Реестр требований кредиторов" visible="ur_folders_is_not_new" id="50630603">
        <useform object="ur_folders" name="form_ur_folders_creditors_claim_register" call="ur_folders_creditors_claim_register" id="6809653">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup title="Сведения об имуществе" visible="ur_folders_is_not_new" as="property_inf" id="56948030">
        <useform object="ur_folders" name="form_ur_folders_property_info" call="ur_folders_property_info" id="61392987">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup as="cred_meeting" visible="ur_folders_is_not_new" title="Собрание/комитет кредиторов" id="48462950">
        <useform object="ur_folders" name="form_ur_folders_cred_meeting" call="ur_folders_cred_meeting" id="26702352">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup visible="ur_folders_is_not_new" title="Контроль обязанностей арб. управляющего" as="man_control" id="42221688">
        <useform object="ur_folders" name="form_ur_folders_au_duty_control" call="ur_folders_au_duty_control" id="48298706">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
      <fieldgroup as="inf_control" title="Контроль сведений, подл. опубл. в ЕФРСБ" visible="ur_folders_is_not_new" id="20759867">
        <useform object="ur_folders" name="form_ur_folders_efrsb_info_publ" call="ur_folders_efrsb_info_publ" id="18698608">
          <useparam name="ur_folders.kod_folders" />
        </useform>
      </fieldgroup>
    </tabcontainer>
    <field table="ur_folders" name="kod_vi" title="" controlType="UICombo" rows-limit="100" id="33208451" />
    <field table="ur_folders" name="kod_sdp" title="" controlType="UICombo" rows-limit="100" id="24022440" />
    <field table="ur_folders" name="tep_el" title="" controlType="UICombo" rows-limit="100" id="57850446" />
    <events>
      <useaction name="ur_ins_templates.run_together" event-name="save">
        <useparam name="kod_folders" />
      </useaction>
      <useaction name="ur_ins_templates.run_together" event-name="form-loaded">
        <useparam name="kod_folders" />
      </useaction>
    </events>
  </form>
  <params>
    <param name="kod_folders" type="number" />
  </params>
  <dataset>
    <params>
      <param name="kod_folders" type="number" />
    </params>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_folders_has_changes" parname="ur_folders_has_changes" />
    </fields>
    <table name="ur_folders" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_folders" delete-validation="ur_folders_del_vld" key="kod_folders" is-ms-upd="1" is-top="1" key-dimension="kod_folders">
      <select-text>
--
select ur_folders.kodp as kodp, /**//*number*/
ur_folders.kod_podr as kod_podr, /*number*/
ur_folders.kod_emp as kod_emp, /*number*/
ur_folders.dat_create as dat_create, /*Дата создания папки*//*date*/
ur_folders.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
ur_folders.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
ur_folders.kod_category as kod_category, /*Категория потребителя*//*number*/
ur_folders.is_not_new as is_not_new, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 23) )  then 1 else 0 end  as test1, /*bbbb*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 1) )  then 1 else 0 end  as test3, /*bbbb2*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 not in (23) ) )  then 1 else 0 end  as test2, /*bbbb1*//*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.kod_dog as kod_dog, /**//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=1 )  and (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  != 2) )  then 1 else 0 end  as show_vvod_tabs, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=0 ) )  then 1 else 0 end  as show_doc_tabs, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.kod_vi as kod_vi, /*number*/
ur_folders.kod_sdp as kod_sdp, /*number*/
ur_folders.tep_el as tep_el, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
kod_emp_x_n.fio as kod_emp_x_n, /*Юрист*//*string*/
kod_category_x_n.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
kod_vi_x_n.name as kod_vi_x_n, /*Наименование*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
tep_el_x_n.name as tep_el_x_n, /*Наименование*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1, /*number*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1, /*number*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1, /*number*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1, /*number*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on  1=1 --\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null )  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders
--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_emp as kod_emp, /*number*/
a.kod_vi as kod_vi, /*number*/
a.kod_sdp as kod_sdp, /*number*/
a.dat_create as dat_create, /*Дата создания папки*//*date*/
a.tep_el as tep_el, /**//*number*/
a.vvod as vvod, /**//*number*/
a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
a.kod_podr as kod_podr, /*number*/
a.kod_category as kod_category, /*Категория потребителя*//*number*/
a.kod_dog as kod_dog, /*number*/
kod_isp.kodp as kodp_new_val, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_folders
a
--\ur_folders
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
left outer join
(
--kk_tep_el
select a.tep_el as tep_el, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from kk_tep_el
a
--\kk_tep_el
)
tep_el_x_n on ur_folders.tep_el = tep_el_x_n.tep_el--\kk_tep_el
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--uk_vi
select a.kod_vi as kod_vi, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from uk_vi
a
--\uk_vi
)
kod_vi_x_n on ur_folders.kod_vi = kod_vi_x_n.kod_vi--\uk_vi
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on ur_folders.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--us_category
select а.kod_category as kod_category, /*number*//*key*/
а.name || ' ' || а.abbr as sp_col_name/**//*string*/

from us_category
а
--\us_category
)
kod_category_x_n on ur_folders.kod_category = kod_category_x_n.kod_category--\us_category
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_folders.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="kodp" table="ur_folders" type="number" title="Абонент" parname="kodp" is-user-editable="1" ColumnMandatory="1" NewVal="kodp_new_val" is-updateable="1" is-updateable-ext="1" update-target="kodp" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query timestamp="23.08.2023 15:22:34" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2327" ord="2327" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <call function="rownum" as="id" key="1" pth="0" type="number" used="1" into="n1"><text txtype="func"> rownum </text> as id, /*number*//*key*/
</call><column table="d" column="kod_dog" as="kod_dog" key="0" used="1" type="number" agg="max" sourcetable="./a/d" sourcecolumn="kod_dog" into="n2">d.kod_dog as kod_dog, /*number*/
</column><column table="p" column="kodp" as="kodp" reference="kr_payer" refcol="kodp" key="0" used="1" type="number" agg="max" sourcetable="./a/p" sourcecolumn="kodp" into="n3">p.kodp as kodp, /*number*/
</column><column table="d" column="ndog" title="Номер договора" as="ndog" key="0" used="1" type="string" agg="stragg_dist" sourcetable="./a/d" sourcecolumn="ndog" into="s1">d.ndog as ndog, /*Номер договора*//*string*/
</column><column table="p" column="nump" title="Код абонента" as="nump" key="0" used="1" type="string" sourcetable="./a/p" sourcecolumn="nump" into="s2">p.nump as nump, /*Код абонента*//*string*/
</column><column table="p" column="name" as="payer_name" title="Наименование абонента" key="0" used="1" type="string" agg="list" sourcetable="./a/p" sourcecolumn="name" into="s3">p.name as payer_name, /*Наименование абонента*//*string*/
</column><column table="p" column="inn" title="ИНН" as="inn" key="0" used="1" type="string" sourcetable="./a/p" sourcecolumn="inn" into="s4">p.inn as inn, /*ИНН*//*string*/
</column><column table="d" column="dat_sign" title="Дата подписания" as="dat_sign" key="0" used="1" type="date" sourcetable="./a/d" sourcecolumn="dat_sign" into="d1">d.dat_sign as dat_sign, /*Дата подписания*//*date*/
</column><column table="dep" column="sname" as="dep_name" title="Отделение" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="sname" into="s5">dep.sname as dep_name, /*Отделение*//*string*/
</column><column table="d" column="dep" as="dep" reference="kr_org" refcol="kodp" key="0" used="1" type="number" sourcetable="./a/d" sourcecolumn="dep" into="n4">d.dep as dep/*number*/
</column></select>
                <from>
from <query name="kr_dogovor" as="d" path="./a/d" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/d" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/d" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="tep_el" type="number" title="" comment="признак&#xA;0 -единый&#xA;1- электричество&#xA;2-тепло" as="tep_el" reference="kk_tep_el" refcol="tep_el" key="0" sourcetable="./a/d" sourcecolumn="tep_el" used="1">a.tep_el as tep_el, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/d" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dat_sign" type="date" title="" as="dat_sign" key="0" sourcetable="./a/d" sourcecolumn="dat_sign" used="1">a.dat_sign as dat_sign, /**//*date*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/d" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
d
--\kr_dogovor
</query><query name="kr_payer" as="p" join="inner" path="./a/p" haskeys="1" used="1">inner join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/p" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1" as="nump" key="0" sourcetable="./a/p" sourcecolumn="nump" used="1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list" as="name" fact="kr_payer_name" key="0" sourcetable="./a/p" sourcecolumn="name" used="1">a.name as name, /*Наименование абонента*//*string*/
</column><column table="a" column="inn" type="string" title="ИНН" comment="инн" as="inn" key="0" sourcetable="./a/p" sourcecolumn="inn" used="1">a.inn as inn/*ИНН*//*string*/
</column></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
p on <column table="p" column="kodp">p.kodp</column><text txtype="func"> = </text><column table="d" column="kodp">d.kodp</column></call>--\kr_payer
</query><query name="kr_org" as="dep" join="inner" path="./a/dep" haskeys="1" used="1">inner join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="sname" type="string" title="" as="sname" key="0" sourcetable="./a/dep" sourcecolumn="sname" used="1">a.sname as sname/**//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="dep" column="kodp">dep.kodp</column><text txtype="func"> = </text><column table="d" column="dep">d.dep</column></call>--\kr_org
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="in" pth="" type="bool">(<column table="d" column="tep_el">d.tep_el</column><text txtype="func"> in </text><call function="array" pth="">(<const><text>1</text></const><text txtype="func"> , </text><const><text>2</text></const>) </call>) </call><text txtype="func"> and </text><call function="or" pth="1" type="bool">(<call function="=" pth="" type="bool">(<column table="d" column="dep">d.dep</column><text txtype="func"> = </text><const><text>:dep </text></const>) </call><text txtype="func"> or </text><call function="is null" pth="" type="bool">(<const><text>:dep </text></const><text txtype="func"> is null </text>) </call>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<call function="rownum" as="id" key="1" pth="0" type="number" thissrc="id"><text txtype="func"> rownum </text></call><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="d" column="kod_dog" as="kod_dog" thissrc="kod_dog">d.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="p" column="kodp" as="kodp" reference="kr_payer" refcol="kodp" thissrc="kodp">p.kodp</column><text txtype="func"> ) like lower( </text><const><text>:kodp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="d" column="ndog" title="Номер договора" as="ndog" thissrc="ndog">d.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="p" column="nump" title="Код абонента" as="nump" thissrc="nump">p.nump</column><text txtype="func"> ) like lower( </text><const><text>:nump_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="p" column="name" as="payer_name" title="Наименование абонента" thissrc="payer_name">p.name</column><text txtype="func"> ) like lower( </text><const><text>:payer_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="p" column="inn" title="ИНН" as="inn" thissrc="inn">p.inn</column><text txtype="func"> ) like lower( </text><const><text>:inn_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="d" column="dat_sign" title="Дата подписания" as="dat_sign" thissrc="dat_sign">d.dat_sign</column><text txtype="func"> ) like lower( </text><const><text>:dat_sign_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="sname" as="dep_name" title="Отделение" thissrc="dep_name">dep.sname</column><text txtype="func"> ) like lower( </text><const><text>:dep_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="d" column="dep" as="dep" reference="kr_org" refcol="kodp" thissrc="dep">d.dep</column><text txtype="func"> ) like lower( </text><const><text>:dep_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" timestamp="23.08.2023 15:22:34" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2327" ord="2327" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query timestamp="23.08.2023 15:22:34" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2327" ord="2327" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="dep" type="number">
                      <const>null</const>
                    </param>
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="kodp_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="nump_filter" type="string" />
                    <param name="payer_name_filter" type="string" />
                    <param name="inn_filter" type="string" />
                    <param name="dat_sign_filter" type="string" />
                    <param name="dep_name_filter" type="string" />
                    <param name="dep_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <call function="rownum" as="id" key="1" />
                    <column table="d" column="kod_dog" as="kod_dog" />
                    <column table="p" column="kodp" as="kodp" reference="kr_payer" refcol="kodp" />
                    <column table="d" column="ndog" title="Номер договора" as="ndog" />
                    <column table="p" column="nump" title="Код абонента" as="nump" />
                    <column table="p" column="name" as="payer_name" title="Наименование абонента" />
                    <column table="p" column="inn" title="ИНН" as="inn" />
                    <column table="d" column="dat_sign" title="Дата подписания" as="dat_sign" />
                    <column table="dep" column="sname" as="dep_name" title="Отделение" />
                    <column table="d" column="dep" as="dep" reference="kr_org" refcol="kodp" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="d" title="Договор" />
                    <query name="kr_payer" as="p" join="inner" dname="kr_dogovor_list(dep_sng)" title="Абонент">
                      <call function="=">
                        <column table="p" column="kodp" />
                        <column table="d" column="kodp" />
                      </call>
                    </query>
                    <query name="kr_org" as="dep" join="inner" dname="kr_dogovor_list(dep_sng)">
                      <call function="=">
                        <column table="dep" column="kodp" />
                        <column table="d" column="dep" />
                      </call>
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="in">
                          <column table="d" column="tep_el" />
                          <call function="array">
                            <const>1</const>
                            <const>2</const>
                          </call>
                        </call>
                        <call function="or">
                          <call function="=">
                            <column table="d" column="dep" />
                            <useparam name="dep" />
                          </call>
                          <call function="is null">
                            <useparam name="dep" />
                          </call>
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="id" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="kodp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nump" />
                        <useparam name="nump_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="payer_name" />
                        <useparam name="payer_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="inn" />
                        <useparam name="inn_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_sign" />
                        <useparam name="dat_sign_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_name" />
                        <useparam name="dep_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep" />
                        <useparam name="dep_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="dep" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="kodp_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="nump_filter" />
                    <useparam name="payer_name_filter" />
                    <useparam name="inn_filter" />
                    <useparam name="dat_sign_filter" />
                    <useparam name="dep_name_filter" />
                    <useparam name="dep_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="dep" type="number">
                  <const>:dep </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="kodp_filter" type="string">
                  <const>:kodp_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="nump_filter" type="string">
                  <const>:nump_filter </const>
                </param>
                <param name="payer_name_filter" type="string">
                  <const>:payer_name_filter </const>
                </param>
                <param name="inn_filter" type="string">
                  <const>:inn_filter </const>
                </param>
                <param name="dat_sign_filter" type="string">
                  <const>:dat_sign_filter </const>
                </param>
                <param name="dep_name_filter" type="string">
                  <const>:dep_name_filter </const>
                </param>
                <param name="dep_filter" type="string">
                  <const>:dep_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="dep" parname="dep" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
kod_isp.kodp as kodp_new_val/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders
--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp_x_n" table="ur_folders" />
            <dependant name="kodp_new_val" table="ur_folders" />
          </dependants>
        </column>
        <column name="kod_podr" table="ur_folders" type="number" title="Отделение" parname="dep" ColumnEditable="kr_dep_is_multi" is-user-editable="1" ColumnDefault="kr_dep_current" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_podr" temp-col-name="n11">
          <sel-list-compiled>
            <root>
              <query order="name" class="1" timestamp="04.02.2019 16:26:26" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_org.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="name">name</column>
                </order>
                <select>--a
select <column table="a" column="kodp" type="number" as="kodp" key="1" fixed="1" sourcetable="./a" sourcecolumn="kodp" used="1" into="n1">a.kodp as kodp, /*number*//*key*/
</column><column table="kodp" column="name" title="Отделение" as="name" key="0" used="1" type="string" sourcetable="./a/kodp" sourcecolumn="name" into="s1">kodp.name as name, /*Отделение*//*string*/
</column><column table="kodp" column="sname" title="Аббревиатура" fact="kr_dep_sname" agg="stragg" as="sname" key="0" used="1" type="string" sourcetable="./a/kodp" sourcecolumn="sname" into="s2">kodp.sname as sname, /*Аббревиатура*//*string*/
</column><const type="number" as="cnt" fact="kr_dep_count" agg="sum" key="0" used="1" into="n2"><text>1</text> as cnt/*number*/
</const></select>
                <from>
from <table name="kr_dep" as="a" view="1" used="1"><text>(
      SELECT LEVEL lvl, kodp
      FROM kr_org a
      WHERE kod_ecls = 4
      AND kod_separator = 2
      AND kodp IN
      (SELECT a.kodp
      FROM kr_org a, kr_org b
      WHERE     a.kod_ecls = 4
      AND kg_common.org_area (a.kodp, b.kodp) = 1
      AND b.kod_ecls = 4
      AND kg_common.user_podr_rights (1, b.kodp)  &gt; 0)
      CONNECT BY PRIOR kodp = kod_parent
      START WITH kod_parent IS NULL AND kod_ecls = 4 AND kod_separator &lt;= 2
      ORDER SIBLINGS BY kg.cut_num (name), name
    )</text>a
--\kr_dep
</table><query name="kr_org" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/kodp" sourcecolumn="name" used="1">a.name as name, /*Отделение*//*string*/
</column><column table="a" column="sname" type="string" title="" as="sname" key="0" sourcetable="./a/kodp" sourcecolumn="sname" used="1">a.sname as sname/**//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_org
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kodp" type="number" as="kodp" key="1" fixed="1" sourcetable="./a" sourcecolumn="kodp" thissrc="kodp">a.kodp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kodp" type="number" as="kodp" key="1" fixed="1" sourcetable="./a" sourcecolumn="kodp" thissrc="kodp">a.kodp</column><text txtype="func"> ) like lower( </text><const><text>:kodp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="name" title="Отделение" as="name" key="0" thissrc="name">kodp.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="sname" title="Аббревиатура" fact="kr_dep_sname" agg="stragg" as="sname" key="0" thissrc="sname">kodp.sname</column><text txtype="func"> ) like lower( </text><const><text>:sname_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by name</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="name" class="1" timestamp="04.02.2019 16:26:26" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_org.xml" haskeys="1" as="a">
              <queries>
                <query order="name" class="1" timestamp="04.02.2019 16:26:26" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_org.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kodp_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="sname_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kodp" type="number" as="kodp" key="1" fixed="1" />
                    <column table="kodp" column="name" title="Отделение" as="name" key="0" />
                    <column table="kodp" column="sname" title="Аббревиатура" fact="kr_dep_sname" agg="stragg" as="sname" key="0" />
                    <const type="number" as="cnt" fact="kr_dep_count" agg="sum" key="0">1</const>
                  </select>
                  <from>
                    <table name="kr_dep" as="a" view="1">
                      <dlink name="kr_dogovor" dimension="1" as="kr_dogovor" table="kr_dogovor" child="kr_dogovor" field="kod_dep" parent="kr_dep" back="kr_dogovor" title="Договор" />
                      <dlink name="sv_opl_bank_dep" as="sv_opl_bank_dep" table="sv_opl_bank_dep" child="sv_opl_bank_dep" field="dep" parent="kr_dep" back="sv_opl_bank_dep">
                        <link name="kod_link" dimension="1" as="kod_link" table="sr_opl_bank" child="sv_opl_bank_dep" field="kod_link" parent="sr_opl_bank" back="sv_opl_bank_dep" />
                      </dlink>
                      <dlink name="kr_dogovor" dimension="1" is-final-dimension="1" is-private-dimension="1" as="kr_dogovor" table="kr_dogovor" child="kr_dogovor" field="kod_dep" parent="kr_dep" back="kr_dogovor" title="Договор">
                        <dimlink name="kod_dep" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kodp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                      </dlink>
                      <dlink name="ur_folders" dimension="1" is-final-dimension="1" is-private-dimension="1" as="ur_folders" table="ur_folders" child="ur_folders" field="kod_dep" parent="kr_dep" back="ur_folders" title="Папка">
                        <dimlink name="kod_mat_pp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_hist_mat_dec" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_isp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_folders_isp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_mat_isp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_hist_mat_isp" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_inkasso" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_kazn" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                        <dimlink name="kod_mat" dimension="1" is-final-dimension="1" is-private-dimension="1" />
                      </dlink>
                    </table>
                    <query name="kr_org" as="kodp" join="left outer" dname="kr_dep">
                      <call function="=">
                        <column table="a" column="kodp" />
                        <column table="kodp" column="kodp" />
                      </call>
                    </query>
                    <query name="kr_calc_dep_max" join="left outer" as="kr_calc_dep_max" dname="kr_dep">
                      <call function="=">
                        <column table="this" column="kodp" />
                        <column table="kr_calc_dep_max" column="dep" />
                      </call>
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodp" />
                        <useparam name="kodp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="sname" />
                        <useparam name="sname_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="name" />
                  </order>
                  <order>
                    <column column="name" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kodp_filter" />
                    <useparam name="name_filter" />
                    <useparam name="sname_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kodp_filter" type="string">
                  <const>:kodp_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="sname_filter" type="string">
                  <const>:sname_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_podr as kod_podr/*number*/

from (select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_podr_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kod_emp" table="ur_folders" type="number" title="Юрист" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_emp" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" elid="2344" ord="2344" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="fio">fio</column>
                </order>
                <select>--a
select <column table="a" column="kod_emp" key="1" as="kod_emp" used="1" type="number" sourcetable="./a/a/a" sourcecolumn="kod_emp" into="n1">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="fio" as="fio" key="0" used="1" type="string" title="Юрист" sourcetable="./a/a/a" sourcecolumn="fio" into="s1">a.fio as fio/*Юрист*//*string*/
</column></select>
                <from>
from <query name="kr_employee_urists" as="a" path="./a/a" order="fio" haskeys="1" used="1">(
<order notext="1"><column column="fio">fio</column></order><select>--kr_employee_urists
select <column table="a" column="kod_emp" key="1" as="kod_emp" used="1" type="number" sourcetable="./a/a/a" sourcecolumn="kod_emp">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="fio" title="Юрист" vid="1" as="fio" key="0" used="1" type="string" sourcetable="./a/a/a" sourcecolumn="fio">a.fio as fio/*Юрист*//*string*/
</column></select><from>
from <query name="kr_employee" as="a" path="./a/a/a" haskeys="1" used="1">(
<select>--kr_employee
select <column table="a" column="kod_emp" type="number" comment="код сотрудника" as="kod_emp" key="1" fixed="1" sourcetable="./a/a/a" sourcecolumn="kod_emp" used="1">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (организации)" as="kodp" key="0" sourcetable="./a/a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="kod_dolzhfun" type="number" comment="код должностной функции" as="kod_dolzhfun" reference="kk_dolzhfun" refcol="kod_dolzhfun" key="0" sourcetable="./a/a/a" sourcecolumn="kod_dolzhfun" used="1">a.kod_dolzhfun as kod_dolzhfun, /*number*/
</column><column table="a" column="fio" type="string" title="ФИО" comment="фио" vid="1" as="fio" key="0" sourcetable="./a/a/a" sourcecolumn="fio" used="1">a.fio as fio/*ФИО*//*string*/
</column></select><from>
from <table name="kr_employee" as="a" used="1">kr_employee
a
--\kr_employee
</table></from>)
a
--\kr_employee
</query></from><where>where
<call function="and" pth="" type="bool"><call function="in" pth="" type="bool">(<column table="a" column="kodp">a.kodp</column><text txtype="func"> in </text><query path="./a/a" used="1">(
<select>--
select <column table="b" column="kodp" as="kodp" fixed="1" key="1" keypath=".kodp" used="1" type="number" sourcetable="./a/a/b/a" sourcecolumn="kodp">b.kodp as kodp/*number*//*key*/
</column></select><from>
from <query name="kr_org_branch3" as="b" path="./a/a/b" used="1">(
<select>--kr_org_branch3
select <column table="a" column="kodp" as="kodp" type="number" title="" key="1" fixed="1" used="1" sourcetable="./a/a/b/a" sourcecolumn="kodp">a.kodp as kodp/**//*number*//*key*/
</column></select><from>
from <query name="kr_org" as="a" path="./a/a/b/a" haskeys="1" used="1">(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/a/b/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="kod_parent" type="number" as="kod_parent" reference="kr_org" refcol="kodp" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_separator" type="number" as="kod_separator" reference="kk_orgseparator" refcol="kod_separator" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_separator" used="1">a.kod_separator as kod_separator, /*number*/
</column><column table="a" column="kod_ecls" type="number" as="kod_ecls" reference="kk_cls" refcol="kod_ecls" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_ecls" used="1">a.kod_ecls as kod_ecls/*number*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from>)
a
--\kr_org
</query></from><connect>connect by nocycle
<call function="and" pth="" type="bool"><call function="=" pth="" type="bool">(<column table="a" column="kodp" prior="1">prior a.kodp</column><text txtype="func"> = </text><column table="a" column="kod_parent">a.kod_parent</column>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="not" pth="" optional="1" type="bool">(<text txtype="func"> not </text><call function="and" pth="" type="bool">(<call function="=" pth="" type="bool">(<column column="kod_separator" table="a">a.kod_separator</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="case" pth="">(<text txtype="func"> case </text><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="not in" pth="" type="bool">(<column column="kodp" table="a">a.kodp</column><text txtype="func"> not in </text><call function="array" pth="">(<const><text txtype="const"> :dep </text></const>) </call>) </call><text txtype="func"> then </text><const><text>1</text></const></call><call function="else" pth="0" type="else"><text txtype="func"> else </text><const><text>0</text></const></call><text txtype="func"> end </text>) </call><text txtype="func"> = </text><const><text>1</text></const>) </call>) </call>) </call><text txtype="func"> } </text></call></connect><start>
start with <call function="and" pth="" type="bool"><call function="=" pth="" type="bool">(<column table="a" column="kod_separator">a.kod_separator</column><text txtype="func"> = </text><const><text>1</text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_ecls">a.kod_ecls</column><text txtype="func"> = </text><const><text>4</text></const>) </call></call></start>)
b
--\kr_org_branch3
</query></from>)
--\
</query>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_dolzhfun">a.kod_dolzhfun</column><text txtype="func"> = </text><const><text>-1</text></const>) </call></call></where><order>
order by fio</order>)
a
--\kr_employee_urists
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_emp" key="1" as="kod_emp" thissrc="kod_emp">a.kod_emp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_emp" key="1" as="kod_emp" thissrc="kod_emp">a.kod_emp</column><text txtype="func"> ) like lower( </text><const><text>:kod_emp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="fio" as="fio" thissrc="fio">a.fio</column><text txtype="func"> ) like lower( </text><const><text>:fio_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by fio</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" elid="2344" ord="2344" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" elid="2344" ord="2344" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="dep" type="number" column="kod_podr">
                      <!--<const>(102276621)</const>-->
                    </param>
                    <param name="pk_prm" type="array" />
                    <param name="kod_emp_filter" type="string" />
                    <param name="fio_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_emp" key="1" as="kod_emp" />
                    <column table="a" column="fio" as="fio" />
                  </select>
                  <from>
                    <query name="kr_employee_urists" as="a">
                      <withparams>
                        <call function="array">
                          <useparam name="dep" />
                        </call>
                      </withparams>
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_emp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_emp" />
                        <useparam name="kod_emp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="fio" />
                        <useparam name="fio_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="fio" />
                  </order>
                  <withparams>
                    <useparam name="dep" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_emp_filter" />
                    <useparam name="fio_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="dep" type="number" column="kod_podr">
                  <!--<const>(102276621)</const>-->
                  <const>:dep </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_emp_filter" type="string">
                  <const>:kod_emp_filter </const>
                </param>
                <param name="fio_filter" type="string">
                  <const>:fio_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="dep" type="number" column="kod_podr">
                <!--<const>(102276621)</const>-->
              </param>
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_emp_x_n.fio as kod_emp_x_n, /*Юрист*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_emp as kod_emp/*number*/

from (select a.kod_folders as kod_folders,a.kod_emp as kod_emp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n4 as kod_emp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_emp as kod_emp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n4 as kod_emp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_folders.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_emp_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="dat_create" table="ur_folders" type="date" title="Дата создания папки" is-user-editable="1" ColumnDefault="today" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_create" temp-col-name="d1" />
        <column name="dat_finish" table="ur_folders" type="date" title="Дата сброса папки в архив" Visible="is_not_new" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_finish" temp-col-name="d2" />
        <column name="num_doc" table="ur_folders" type="string" title="Документ (основание для сброса папки в архив)" Visible="is_not_new" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="num_doc" temp-col-name="s2" />
        <column name="kod_category" table="ur_folders" type="number" title="Категория потребителя" parname="kod_category" ColumnVisible="rs_esys_is_1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_category" temp-col-name="n14">
          <sel-list-compiled>
            <root>
              <query title="Категория потребителей (юристы)" class="1" timestamp="02.11.2022 14:14:28" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_category.xml" elid="3058" ord="3058" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_category" as="kod_category" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_category" into="n1">a.kod_category as kod_category, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name, /**//*string*/
</column><column table="a" column="abbr" as="abbr" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="abbr" into="s2">a.abbr as abbr/**//*string*/
</column></select>
                <from>
from <query name="us_category" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_category
select <column table="а" column="kod_category" type="number" key="1" as="kod_category" used="1" sourcetable="./a/a" sourcecolumn="kod_category">а.kod_category as kod_category, /*number*//*key*/
</column><column table="а" column="name" type="string" is-name="1" as="name" used="1" sourcetable="./a/a" sourcecolumn="name" key="0">а.name as name, /*string*/
</column><column table="а" column="abbr" type="string" is-name="1" as="abbr" used="1" sourcetable="./a/a" sourcecolumn="abbr" key="0">а.abbr as abbr/*string*/
</column></select><from>
from <table name="us_category" as="а" title="Категория потребителей (юристы)" used="1">us_category
а
--\us_category
</table></from>)
a
--\us_category
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_category" as="kod_category" title="" key="1" thissrc="kod_category">a.kod_category</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_category" as="kod_category" title="" key="1" thissrc="kod_category">a.kod_category</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="abbr" as="abbr" title="" thissrc="abbr">a.abbr</column><text txtype="func"> ) like lower( </text><const><text>:abbr_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Категория потребителей (юристы)" class="1" timestamp="02.11.2022 14:14:28" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_category.xml" elid="3058" ord="3058" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Категория потребителей (юристы)" class="1" timestamp="02.11.2022 14:14:28" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_category.xml" elid="3058" ord="3058" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_category_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="abbr_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_category" as="kod_category" title="" key="1" />
                    <column table="a" column="name" as="name" title="" />
                    <column table="a" column="abbr" as="abbr" title="" />
                  </select>
                  <from>
                    <query name="us_category" as="a" title="Категория потребителей (юристы)" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_category" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category" />
                        <useparam name="kod_category_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="abbr" />
                        <useparam name="abbr_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_category_filter" />
                    <useparam name="name_filter" />
                    <useparam name="abbr_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_category_filter" type="string">
                  <const>:kod_category_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="abbr_filter" type="string">
                  <const>:abbr_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_category_x_n.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_category as kod_category/*Категория потребителя*//*number*/

from (select a.kod_folders as kod_folders,a.kod_category as kod_category  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n14 as kod_category  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_category as kod_category  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n14 as kod_category  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--us_category
select а.kod_category as kod_category, /*number*//*key*/
а.name || ' ' || а.abbr as sp_col_name/**//*string*/

from us_category
а
--\us_category
)
kod_category_x_n on ur_folders.kod_category = kod_category_x_n.kod_category--\us_category
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_category_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="is_not_new" table="ur_folders" type="number" title="" parname="ur_folders_is_not_new" ColumnVisible="0">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 23) )  then 1 else 0 end  as test1, /*bbbb*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 1) )  then 1 else 0 end  as test3, /*bbbb2*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 not in (23) ) )  then 1 else 0 end  as test2, /*bbbb1*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=1 )  and (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  != 2) )  then 1 else 0 end  as show_vvod_tabs, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=0 ) )  then 1 else 0 end  as show_doc_tabs, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on  1=1 --\ur_folders
where
ur_folders.kod_folders is not null  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="test1" table="ur_folders" />
            <dependant name="test3" table="ur_folders" />
            <dependant name="test2" table="ur_folders" />
            <dependant name="show_vvod_tabs" table="ur_folders" />
            <dependant name="show_doc_tabs" table="ur_folders" />
          </dependants>
        </column>
        <column name="test1" table="ur_folders" type="number" title="bbbb" parname="new_pret_vis" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 23) )  then 1 else 0 end  as test1, /*bbbb*//*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on  1=1 --\ur_folders
where
ur_folders.kod_folders is not null  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="test3" table="ur_folders" type="number" title="bbbb2" parname="kod_esys10_pret_vis" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 1) )  then 1 else 0 end  as test3, /*bbbb2*//*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on  1=1 --\ur_folders
where
ur_folders.kod_folders is not null  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="test2" table="ur_folders" type="number" title="bbbb1" parname="old_pret_vis" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 not in (23) ) )  then 1 else 0 end  as test2, /*bbbb1*//*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on  1=1 --\ur_folders
where
ur_folders.kod_folders is not null  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="vvod" table="ur_folders" type="number" title="Способ учета задолженности" parname="is_vvod" ClientEditable="ur_folders_is_new" is-user-editable="1" ColumnDefault="ur_folders_vvod_default" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="vvod" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query class="1" title="Способ учета задолженности" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_folders.xml" elid="2591" ord="2591" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod" as="kod" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod" into="n1">a.kod as kod, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Вид суммы" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Вид суммы*//*string*/
</column></select>
                <from>
from <query name="ur_folders_vvod" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_folders_vvod
select <column table="a" column="kod" type="number" as="kod" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod">a.kod as kod, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Вид суммы" vid="1" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name">a.name as name/*Вид суммы*//*string*/
</column></select><from>
from <table name="folders_vvod" view="1" as="a" used="1"><text>(
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )</text>a
--\folders_vvod
</table></from>)
a
--\ur_folders_vvod
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod" as="kod" title="" key="1" thissrc="kod">a.kod</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod" as="kod" title="" key="1" thissrc="kod">a.kod</column><text txtype="func"> ) like lower( </text><const><text>:kod_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Вид суммы" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Способ учета задолженности" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_folders.xml" elid="2591" ord="2591" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" title="Способ учета задолженности" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_folders.xml" elid="2591" ord="2591" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod" as="kod" title="" key="1" />
                    <column table="a" column="name" as="name" title="Вид суммы" />
                  </select>
                  <from>
                    <query name="ur_folders_vvod" as="a" title="Способ учета задолженности" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod" />
                        <useparam name="kod_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_filter" type="string">
                  <const>:kod_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=1 )  and (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  != 2) )  then 1 else 0 end  as show_vvod_tabs, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=0 ) )  then 1 else 0 end  as show_doc_tabs, /*number*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="show_vvod_tabs" table="ur_folders" />
            <dependant name="show_doc_tabs" table="ur_folders" />
            <dependant name="vvod_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kod_dog" table="ur_folders" type="number" title="Договор" ClientExists="is_vvod" ClientVisible="is_vvod" is-user-editable="1" ClientMandatory="is_vvod" is-updateable="1" is-updateable-ext="1" update-target="kod_dog" temp-col-name="n15">
          <sel-list-compiled>
            <root>
              <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2323" ord="2323" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_dog" into="n1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" as="ndog" key="0" used="1" type="string" title="Номер договора" agg="stragg_dist" sourcetable="./a/a" sourcecolumn="ndog" into="s1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="dep" column="name" as="dep_name" title="Отделение" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="name" into="s2">dep.name as dep_name, /*Отделение*//*string*/
</column><column table="kodp" column="nump" as="nump" key="0" used="1" type="string" title="Код абонента" sourcetable="./a/kodp" sourcecolumn="nump" into="s3">kodp.nump as nump, /*Код абонента*//*string*/
</column><column table="kodp" column="name" as="payer_name" key="0" used="1" type="string" title="Наименование абонента" agg="list" sourcetable="./a/kodp" sourcecolumn="name" into="s4">kodp.name as payer_name/*Наименование абонента*//*string*/
</column></select>
                <from>
from <query name="kr_dogovor" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/a" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
a
--\kr_dogovor
</query><query name="kr_org" as="dep" join="left outer" path="./a/dep" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/dep" sourcecolumn="name" used="1">a.name as name/*Отделение*//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="a" column="dep">a.dep</column><text txtype="func"> = </text><column table="dep" column="kodp">dep.kodp</column></call>--\kr_org
</query><query name="kr_payer" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1" as="nump" key="0" sourcetable="./a/kodp" sourcecolumn="nump" used="1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list" as="name" fact="kr_payer_name" key="0" sourcetable="./a/kodp" sourcecolumn="name" used="1">a.name as name/*Наименование абонента*//*string*/
</column></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><const><text>:kodp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" key="0" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="name" as="dep_name" title="Отделение" key="0" thissrc="dep_name">dep.name</column><text txtype="func"> ) like lower( </text><const><text>:dep_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="nump" as="nump" key="0" thissrc="nump">kodp.nump</column><text txtype="func"> ) like lower( </text><const><text>:nump_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="name" as="payer_name" key="0" thissrc="payer_name">kodp.name</column><text txtype="func"> ) like lower( </text><const><text>:payer_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2323" ord="2323" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2323" ord="2323" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="kodp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="dep_name_filter" type="string" />
                    <param name="nump_filter" type="string" />
                    <param name="payer_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" />
                    <column table="a" column="ndog" as="ndog" key="0" />
                    <column table="dep" column="name" as="dep_name" title="Отделение" key="0" />
                    <column table="kodp" column="nump" as="nump" key="0" />
                    <column table="kodp" column="name" as="payer_name" key="0" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="a" title="Договор">
                      <link name="kodp" as="kodp" table="kr_payer" child="kr_dogovor" field="kodp" parent="kr_payer" back="kr_dogovor" title="Абонент" />
                      <link name="dep" as="dep" table="kr_org" child="kr_dogovor" field="dep" parent="kr_org" back="kr_dog_dep" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="=" optional="1">
                          <column table="a" column="kodp" />
                          <useparam name="kodp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_name" />
                        <useparam name="dep_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nump" />
                        <useparam name="nump_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="payer_name" />
                        <useparam name="payer_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kodp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="dep_name_filter" />
                    <useparam name="nump_filter" />
                    <useparam name="payer_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="kodp">
                  <const>:kodp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="dep_name_filter" type="string">
                  <const>:dep_name_filter </const>
                </param>
                <param name="nump_filter" type="string">
                  <const>:nump_filter </const>
                </param>
                <param name="payer_name_filter" type="string">
                  <const>:payer_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="kodp" parname="kodp" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_folders as kod_folders,a.kod_dog as kod_dog  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n15 as kod_dog  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_dog as kod_dog  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n15 as kod_dog  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on ur_folders.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_dog_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="show_vvod_tabs" table="ur_folders" type="number" title="" parname="show_vvod_tabs" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=1 )  and (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  != 2) )  then 1 else 0 end  as show_vvod_tabs, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="show_doc_tabs" table="ur_folders" type="number" title="" parname="show_doc_tabs" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=0 ) )  then 1 else 0 end  as show_doc_tabs, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod,1 as is_not_new  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_folders" type="number" title="" parname="ur_folders_is_new" ColumnVisible="0" />
        <column name="kod_vi" table="ur_folders" type="number" title="" ColumnVisible="0" ColumnDefault="uk_vi_ish_kod" is-updateable="1" is-updateable-ext="1" update-target="kod_vi" temp-col-name="n5">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_vi_x_n.name as kod_vi_x_n, /*Наименование*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_vi as kod_vi/*number*/

from (select a.kod_folders as kod_folders,a.kod_vi as kod_vi  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_vi  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_vi as kod_vi  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_vi  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--uk_vi
select a.kod_vi as kod_vi, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from uk_vi
a
--\uk_vi
)
kod_vi_x_n on ur_folders.kod_vi = kod_vi_x_n.kod_vi--\uk_vi
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_vi_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kod_sdp" table="ur_folders" type="number" title="" ColumnVisible="0" ColumnDefault="uk_sdp_bnk_kod" is-updateable="1" is-updateable-ext="1" update-target="kod_sdp" temp-col-name="n6">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from (select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n6 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n6 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_sdp_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="tep_el" table="ur_folders" type="number" title="" ColumnVisible="0" ColumnDefault="rs_esys_tepel" is-updateable="1" is-updateable-ext="1" update-target="tep_el" temp-col-name="n10">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select tep_el_x_n.name as tep_el_x_n, /*Наименование*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.tep_el as tep_el/**//*number*/

from (select a.kod_folders as kod_folders,a.tep_el as tep_el  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as tep_el  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.tep_el as tep_el  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as tep_el  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kk_tep_el
select a.tep_el as tep_el, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from kk_tep_el
a
--\kk_tep_el
)
tep_el_x_n on ur_folders.tep_el = tep_el_x_n.tep_el--\kk_tep_el
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="tep_el_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kodp_x_n" table="ur_folders.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_podr_x_n" table="ur_folders.kod_podr" type="string" title="Отделение" text-source-for="kod_podr" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_podr as kod_podr/*number*/

from (select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_emp_x_n" table="ur_folders.kod_emp" type="string" title="Юрист" text-source-for="kod_emp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_emp_x_n.fio as kod_emp_x_n, /*Юрист*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_emp as kod_emp/*number*/

from (select a.kod_folders as kod_folders,a.kod_emp as kod_emp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n4 as kod_emp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_emp as kod_emp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n4 as kod_emp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_folders.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_category_x_n" table="ur_folders.kod_category" type="string" title="Категория потребителя" text-source-for="kod_category" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_category_x_n.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_category as kod_category/*Категория потребителя*//*number*/

from (select a.kod_folders as kod_folders,a.kod_category as kod_category  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n14 as kod_category  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_category as kod_category  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n14 as kod_category  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--us_category
select а.kod_category as kod_category, /*number*//*key*/
а.name || ' ' || а.abbr as sp_col_name/**//*string*/

from us_category
а
--\us_category
)
kod_category_x_n on ur_folders.kod_category = kod_category_x_n.kod_category--\us_category
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="vvod_x_n" table="ur_folders.vvod" type="string" title="Способ учета задолженности" text-source-for="vvod" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod/**//*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_dog_x_n" table="ur_folders.kod_dog" type="string" title="Договор" text-source-for="kod_dog" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_folders as kod_folders,a.kod_dog as kod_dog  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n15 as kod_dog  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_dog as kod_dog  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n15 as kod_dog  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on ur_folders.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_vi_x_n" table="ur_folders.kod_vi" type="string" title="Договор" text-source-for="kod_vi" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_vi_x_n.name as kod_vi_x_n, /*Наименование*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_vi as kod_vi/*number*/

from (select a.kod_folders as kod_folders,a.kod_vi as kod_vi  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_vi  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_vi as kod_vi  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n5 as kod_vi  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--uk_vi
select a.kod_vi as kod_vi, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from uk_vi
a
--\uk_vi
)
kod_vi_x_n on ur_folders.kod_vi = kod_vi_x_n.kod_vi--\uk_vi
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp_x_n" table="ur_folders.kod_sdp" type="string" title="Договор" text-source-for="kod_sdp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from (select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n6 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_sdp as kod_sdp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n6 as kod_sdp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="tep_el_x_n" table="ur_folders.tep_el" type="string" title="Договор" text-source-for="tep_el" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select tep_el_x_n.name as tep_el_x_n, /*Наименование*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.tep_el as tep_el/**//*number*/

from (select a.kod_folders as kod_folders,a.tep_el as tep_el  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as tep_el  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.tep_el as tep_el  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as tep_el  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kk_tep_el
select a.tep_el as tep_el, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from kk_tep_el
a
--\kk_tep_el
)
tep_el_x_n on ur_folders.tep_el = tep_el_x_n.tep_el--\kk_tep_el
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_new_val" table="ur_folders" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
kod_isp.kodp as kodp_new_val/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders
--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_folders_del_vld" table="ur_folders" type="string" title="Валидация удаления папки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_folders" table="ur_folders" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kodp as kodp 
,:kod_podr as kod_podr 
,:kod_emp as kod_emp 
,:dat_create as dat_create 
,:dat_finish as dat_finish 
,:num_doc as num_doc 
,:kod_category as kod_category 
,:vvod as vvod 
,:kod_dog as kod_dog 
,:kod_vi as kod_vi 
,:kod_sdp as kod_sdp 
,:tep_el as tep_el 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_folders 
(kodp 
,kod_podr 
,kod_emp 
,dat_create 
,dat_finish 
,num_doc 
,kod_category 
,vvod 
,kod_dog 
,kod_vi 
,kod_sdp 
,tep_el 
,kod_folders 
) 
 values  
(r.kodp 
,r.kod_podr 
,r.kod_emp 
,r.dat_create 
,r.dat_finish 
,r.num_doc 
,r.kod_category 
,r.vvod 
,r.kod_dog 
,r.kod_vi 
,r.kod_sdp 
,r.tep_el 
,r.kod_folders 
) 
 returning  
kod_folders into :kod_folders; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_folders where kod_folders=:kod_folders</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_folders' 
and 
names=:form_id 
and 
f2=:kod_folders; 
if :row_state_id=1  then 
for r in  
 ( select  
:kodp as kodp 
,:kod_podr as kod_podr 
,:kod_emp as kod_emp 
,:dat_create as dat_create 
,:dat_finish as dat_finish 
,:num_doc as num_doc 
,:kod_category as kod_category 
,:vvod as vvod 
,:kod_dog as kod_dog 
,:kod_vi as kod_vi 
,:kod_sdp as kod_sdp 
,:tep_el as tep_el 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,n11 
,n4 
,d1 
,d2 
,s2 
,n14 
,n2 
,n15 
,n5 
,n6 
,n10 
,n1 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.kod_podr 
,r.kod_emp 
,r.dat_create 
,r.dat_finish 
,r.num_doc 
,r.kod_category 
,r.vvod 
,r.kod_dog 
,r.kod_vi 
,r.kod_sdp 
,r.tep_el 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kodp as kodp 
,:kod_podr as kod_podr 
,:kod_emp as kod_emp 
,:dat_create as dat_create 
,:dat_finish as dat_finish 
,:num_doc as num_doc 
,:kod_category as kod_category 
,:vvod as vvod 
,:kod_dog as kod_dog 
,:kod_vi as kod_vi 
,:kod_sdp as kod_sdp 
,:tep_el as tep_el 
,:kod_folders as kod_folders 
,a.zadol 
,a.u_m 
,a.d_m 
,a.kod_parent 
,a.kod_isp 
,a.tep_el_byt 
,a.kodp_new 
,a.kodps 
,a.namep 
 
from ur_folders a  where kod_folders=:kod_folders) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n3 
,n11 
,n4 
,d1 
,d2 
,s2 
,n14 
,n2 
,n15 
,n5 
,n6 
,n10 
,n1 
,n7 
,s1 
,d3 
,n8 
,n9 
,n12 
,n13 
,s3 
,s4 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.kod_podr 
,r.kod_emp 
,r.dat_create 
,r.dat_finish 
,r.num_doc 
,r.kod_category 
,r.vvod 
,r.kod_dog 
,r.kod_vi 
,r.kod_sdp 
,r.tep_el 
,r.kod_folders 
,r.zadol 
,r.u_m 
,r.d_m 
,r.kod_parent 
,r.kod_isp 
,r.tep_el_byt 
,r.kodp_new 
,r.kodps 
,r.namep 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_folders' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_folders set  
(kodp 
,kod_podr 
,kod_emp 
,dat_create 
,dat_finish 
,num_doc 
,kod_category 
,vvod 
,kod_dog 
,kod_vi 
,kod_sdp 
,tep_el 
,kod_folders 
) 
= 
 ( select  
:kodp as kodp 
,:kod_podr as kod_podr 
,:kod_emp as kod_emp 
,:dat_create as dat_create 
,:dat_finish as dat_finish 
,:num_doc as num_doc 
,:kod_category as kod_category 
,:vvod as vvod 
,:kod_dog as kod_dog 
,:kod_vi as kod_vi 
,:kod_sdp as kod_sdp 
,:tep_el as tep_el 
,:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_folders=:kod_folders 
;
end;
</update-text>
      <events>
        <useaction event-name="object-save" action-type="execute-update" call="ur_folders_sync_dat_arh">
          <column table="this" column="kod_folders" />
        </useaction>
      </events>
      <scheme>
        <table name="ur_folders" as="ur_folders">
          <columns>
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_podr" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_emp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_create" type="date" title="Дата создания папки" />
            <column name="dat_finish" type="date" title="Дата сброса папки в архив" />
            <column name="num_doc" type="string" title="Документ (основание для сброса папки в архив)" />
            <column name="kod_category" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" title="" visible="0" />
            <column name="test1" type="number" title="bbbb" visible="0" />
            <column name="test3" type="number" title="bbbb2" visible="0" />
            <column name="test2" type="number" title="bbbb1" visible="0" />
            <column name="vvod" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="show_vvod_tabs" type="number" title="" visible="0" />
            <column name="show_doc_tabs" type="number" title="" visible="0" />
            <column name="is_new" type="number" title="" visible="0" />
            <column name="kod_vi" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="tep_el" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" />
            <column name="kod_podr_x_n" type="string" title="Отделение" />
            <column name="kod_emp_x_n" type="string" title="Юрист" />
            <column name="kod_category_x_n" type="string" title="Категория потребителя" />
            <column name="vvod_x_n" type="string" title="Способ учета задолженности" />
            <column name="kod_dog_x_n" type="string" title="Договор" />
            <column name="kod_vi_x_n" type="string" title="Договор" visible="0" />
            <column name="kod_sdp_x_n" type="string" title="Договор" visible="0" />
            <column name="tep_el_x_n" type="string" title="Договор" visible="0" />
            <column name="kodp_new_val" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_folders_del_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_folders_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_folders_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_folders.kodp as kodp, /**//*number*/
ur_folders.kod_podr as kod_podr, /*number*/
ur_folders.kod_emp as kod_emp, /*number*/
ur_folders.dat_create as dat_create, /*Дата создания папки*//*date*/
ur_folders.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
ur_folders.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
ur_folders.kod_category as kod_category, /*Категория потребителя*//*number*/
ur_folders.is_not_new as is_not_new, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 23) )  then 1 else 0 end  as test1, /*bbbb*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 = 1) )  then 1 else 0 end  as test3, /*bbbb2*//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and (qube.rs_esys_kod_esys1 not in (23) ) )  then 1 else 0 end  as test2, /*bbbb1*//*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.kod_dog as kod_dog, /**//*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=1 )  and (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  != 2) )  then 1 else 0 end  as show_vvod_tabs, /*number*/
 case  when (( nvl( ur_folders.is_not_new ,0)=1 )  and ( nvl( ur_folders.vvod ,0)=0 ) )  then 1 else 0 end  as show_doc_tabs, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.kod_vi as kod_vi, /*number*/
ur_folders.kod_sdp as kod_sdp, /*number*/
ur_folders.tep_el as tep_el, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
kod_emp_x_n.fio as kod_emp_x_n, /*Юрист*//*string*/
kod_category_x_n.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
kod_vi_x_n.name as kod_vi_x_n, /*Наименование*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
tep_el_x_n.name as tep_el_x_n, /*Наименование*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max(qube.rs_esys_kod_esys1)  as rs_esys_kod_esys1, /*number*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1, /*number*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.rs_esys_kod_esys1 as rs_esys_kod_esys1, /*number*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
max(un.rs_esys_kod_esys1)  as rs_esys_kod_esys1, /*number*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select dims.kod_folders as kod_folders, /*number*//*key*/
rs_esys.kod_esys as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--
select rs_esys_a_d.kod_esys as kod_esys_prm, /*number*//*key*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys_a_d
--\rs_esys
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on  1=1 --\ur_folders
where
ur_folders.kod_folders is not null  group by
rs_esys_a_d.kod_esys, /*number*//*key*/
ur_folders.kod_folders/*number*//*key*/
)
dims
--\
left outer join
(
--rs_esys
select a.kod_esys as kod_esys/*number*//*key*/

from rs_esys
a
--\rs_esys
)
rs_esys on rs_esys.kod_esys = dims.kod_esys_prm--\rs_esys
)
--\
union all
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as rs_esys_kod_esys1, /*number*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_emp as kod_emp, /*number*/
a.kod_vi as kod_vi, /*number*/
a.kod_sdp as kod_sdp, /*number*/
a.dat_create as dat_create, /*Дата создания папки*//*date*/
a.tep_el as tep_el, /**//*number*/
a.vvod as vvod, /**//*number*/
a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
a.kod_podr as kod_podr, /*number*/
a.kod_category as kod_category, /*Категория потребителя*//*number*/
a.kod_dog as kod_dog, /*number*/
kod_isp.kodp as kodp_new_val, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_emp as kod_emp,a.kod_vi as kod_vi,a.kod_sdp as kod_sdp,a.dat_create as dat_create,a.tep_el as tep_el,a.vvod as vvod,a.dat_finish as dat_finish,a.num_doc as num_doc,a.kod_podr as kod_podr,a.kod_category as kod_category,a.kod_dog as kod_dog,0 as is_new,1 as is_not_new,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n4 as kod_emp,t.n5 as kod_vi,t.n6 as kod_sdp,t.d1 as dat_create,t.n10 as tep_el,t.n2 as vvod,t.d2 as dat_finish,t.s2 as num_doc,t.n11 as kod_podr,t.n14 as kod_category,t.n15 as kod_dog,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_emp as kod_emp,a.kod_vi as kod_vi,a.kod_sdp as kod_sdp,a.dat_create as dat_create,a.tep_el as tep_el,a.vvod as vvod,a.dat_finish as dat_finish,a.num_doc as num_doc,a.kod_podr as kod_podr,a.kod_category as kod_category,a.kod_dog as kod_dog,0 as is_new,1 as is_not_new,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n3 as kodp,t.n4 as kod_emp,t.n5 as kod_vi,t.n6 as kod_sdp,t.d1 as dat_create,t.n10 as tep_el,t.n2 as vvod,t.d2 as dat_finish,t.s2 as num_doc,t.n11 as kod_podr,t.n14 as kod_category,t.n15 as kod_dog,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n9 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
left outer join
(
--kk_tep_el
select a.tep_el as tep_el, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from kk_tep_el
a
--\kk_tep_el
)
tep_el_x_n on ur_folders.tep_el = tep_el_x_n.tep_el--\kk_tep_el
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on ur_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--uk_vi
select a.kod_vi as kod_vi, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from uk_vi
a
--\uk_vi
)
kod_vi_x_n on ur_folders.kod_vi = kod_vi_x_n.kod_vi--\uk_vi
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on ur_folders.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--us_category
select а.kod_category as kod_category, /*number*//*key*/
а.name || ' ' || а.abbr as sp_col_name/**//*string*/

from us_category
а
--\us_category
)
kod_category_x_n on ur_folders.kod_category = kod_category_x_n.kod_category--\us_category
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_folders.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>