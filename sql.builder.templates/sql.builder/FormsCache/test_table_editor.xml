<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="test_table_editor" timestamp="26.04.2022 14:28:04" with-behavior="0" title="Тест форма с таблицей" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms.xml" elid="112" ord="112" leaf="0" lvl="2" pelid="">
    <grid table="a" show-toolbar="1" id="66861013">
      <columns id="65067751">
        <field table="a" name="kod_nachisl_nal" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="9679630" />
        <field table="a" name="vid_t" title="Сылка" controlType="UICombo" rows-limit="100" id="14159913" />
        <field table="a" name="kod_naltype" title="Сылка" controlType="UICombo" rows-limit="100" id="45412480" />
        <field table="a" name="kod_nal" title="Сылка" controlType="UICombo" rows-limit="100" id="34948571" />
        <field table="a" name="dat_beg" title="Дата" controlType="UIDate" rows-limit="100" id="4417514" />
        <field table="a" name="u_m" title="Строка" controlType="UIText" rows-limit="100" id="39768158" />
      </columns>
    </grid>
  </form>
  <dataset>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="a_has_changes" parname="a_has_changes" />
    </fields>
    <table name="a" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multiselect-column="" multiselect-target="" update-target="ss_nachisl_nal" key="kod_nachisl_nal" is-ms-upd="1" is-top="1">
      <select-text>
--
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t, /*Сылка*//*number*/
a.kod_naltype as kod_naltype, /*Сылка*//*number*/
a.kod_nal as kod_nal, /*Сылка*//*number*/
a.dat_beg as dat_beg, /*Дата*//*date*/
a.u_m as u_m, /*Строка*//*string*/
vid_t_x_n.sp_col_name as vid_t_x_n, /*Сылка*//*string*/
kod_naltype_x_n.name as kod_naltype_x_n, /*Сылка*//*string*/
kod_nal_x_n.name as kod_nal_x_n, /*Сылка*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t, /**//*number*/
a.kod_naltype as kod_naltype, /*number*/
a.kod_nal as kod_nal, /*number*/
a.dat_beg as dat_beg, /**//*date*/
a.u_m as u_m, /**//*string*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ss_nachisl_nal
a
--\ss_nachisl_nal
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog
select a.kod_nal as kod_nal, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog
a
--\sk_nalog
)
kod_nal_x_n on a.kod_nal = kod_nal_x_n.kod_nal--\sk_nalog
left outer join
(
--sk_nalog_type
select a.kod_naltype as kod_naltype, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog_type
a
--\sk_nalog_type
)
kod_naltype_x_n on a.kod_naltype = kod_naltype_x_n.kod_naltype--\sk_nalog_type
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on a.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</select-text>
      <columns>
        <column name="kod_nachisl_nal" table="a" type="number" title="" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_nachisl_nal" temp-col-name="n1" />
        <column name="vid_t" table="a" type="number" title="Сылка" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="vid_t" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="vid_t" as="vid_t" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="vid_t" into="n1">a.vid_t as vid_t, /**//*number*//*key*/
</column><column table="a" column="num_t" as="num_t" title="Код вида начисления" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="num_t" into="s1">a.num_t as num_t, /*Код вида начисления*//*string*/
</column><column table="a" column="name" as="name" title="Наименование вида начисления" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s2">a.name as name, /*Наименование вида начисления*//*string*/
</column><column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" key="0" used="1" type="number" sourcetable="./a/a/vid_real" sourcecolumn="vid_real" reference="sk_vid_real" refcol="vid_real" into="n2">a.vid_real_num as vid_real_num, /*Код вида реализации*//*number*/
</column><column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" key="0" used="1" type="string" sourcetable="./a/a/vid_real" sourcecolumn="name" into="s3">a.vid_real_name as vid_real_name/*Вид реализации*//*string*/
</column></select>
                <from>
from <query name="sk_nachisl" as="a" path="./a/a" haskeys="1" used="1">(
<select>--sk_nachisl
select <column table="a" column="vid_t" type="number" title="" comment="vid_t=25 -население&#xA;vid_t=30 - самовольное подкл.электроприемников" key-dimension="vid_t" key="1" as="vid_t" sourcetable="./a/a" sourcecolumn="vid_t" used="1">a.vid_t as vid_t, /**//*number*//*key*/
</column><column table="a" column="num_t" type="string" title="Код вида начисления" vid="1" is-name="1" as="num_t" key="0" sourcetable="./a/a" sourcecolumn="num_t" used="1">a.num_t as num_t, /*Код вида начисления*//*string*/
</column><column table="a" column="name" type="string" title="Наименование вида начисления" vid="1" is-name="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name, /*Наименование вида начисления*//*string*/
</column><column table="vid_real" column="vid_real" vid="1" as="vid_real_num" title="Код вида реализации" reference="sk_vid_real" refcol="vid_real" key="0" used="1" type="number" sourcetable="./a/a/vid_real" sourcecolumn="vid_real">vid_real.vid_real as vid_real_num, /*Код вида реализации*//*number*/
</column><column table="vid_real" column="name" vid="1" as="vid_real_name" key="0" used="1" type="string" title="Вид реализации" sourcetable="./a/a/vid_real" sourcecolumn="name">vid_real.name as vid_real_name/*Вид реализации*//*string*/
</column></select><from>
from <table name="sk_nachisl" as="a" title="Вид начисления" used="1">sk_nachisl
a
--\sk_nachisl
</table><query name="sk_vid_real" dimension="1" as="vid_real" join="left outer" path="./a/a/vid_real" haskeys="1" used="1">left outer join
(
<select>--sk_vid_real
select <column table="a" column="vid_real" type="number" title="" as="vid_real" key="1" fixed="1" used="1" sourcetable="./a/a/vid_real" sourcecolumn="vid_real">a.vid_real as vid_real, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Вид реализации" comment="полное наименование- уже не печатается в назначение платежа" as="name" key="0" used="1" sourcetable="./a/a/vid_real" sourcecolumn="name">a.name as name/*Вид реализации*//*string*/
</column></select><from>
from <table name="sk_vid_real" as="a" title="Вид реализации" dimension="1" used="1">sk_vid_real
a
--\sk_vid_real
</table></from><call function="=" type="bool">)
vid_real on <column table="a" column="vid_real">a.vid_real</column><text txtype="func"> = </text><column table="vid_real" column="vid_real">vid_real.vid_real</column></call>--\sk_vid_real
</query></from>)
a
--\sk_nachisl
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="ls=" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="vid_t" as="vid_t" title="" key="1" thissrc="vid_t">a.vid_t</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_t" as="vid_t" title="" key="1" thissrc="vid_t">a.vid_t</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:vid_t_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_t" as="num_t" title="Код вида начисления" thissrc="num_t">a.num_t</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:num_t_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование вида начисления" thissrc="name">a.name</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" thissrc="vid_real_num">a.vid_real_num</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:vid_real_num_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" thissrc="vid_real_name">a.vid_real_name</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:vid_real_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" haskeys="1" as="a">
              <queries>
                <query class="1" title="Вид начисления" timestamp="23.05.2018 14:58:09" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nachisl.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="vid_t_filter" type="string" />
                    <param name="num_t_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="vid_real_num_filter" type="string" />
                    <param name="vid_real_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="vid_t" as="vid_t" title="" key="1" />
                    <column table="a" column="num_t" as="num_t" title="Код вида начисления" />
                    <column table="a" column="name" as="name" title="Наименование вида начисления" />
                    <column table="a" column="vid_real_num" as="vid_real_num" title="Код вида реализации" />
                    <column table="a" column="vid_real_name" as="vid_real_name" title="Вид реализации" />
                  </select>
                  <from>
                    <query name="sk_nachisl" as="a" title="Вид начисления" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="ls=">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="vid_t" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_t" />
                        <useparam name="vid_t_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_t" />
                        <useparam name="num_t_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_real_num" />
                        <useparam name="vid_real_num_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="vid_real_name" />
                        <useparam name="vid_real_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="vid_t_filter" />
                    <useparam name="num_t_filter" />
                    <useparam name="name_filter" />
                    <useparam name="vid_real_num_filter" />
                    <useparam name="vid_real_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="vid_t_filter" type="string">
                  <const>:vid_t_filter </const>
                </param>
                <param name="num_t_filter" type="string">
                  <const>:num_t_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="vid_real_num_filter" type="string">
                  <const>:vid_real_num_filter </const>
                </param>
                <param name="vid_real_name_filter" type="string">
                  <const>:vid_real_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vid_t_x_n.sp_col_name as vid_t_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t/**//*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on a.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="vid_t_x_n" table="a" />
          </dependants>
        </column>
        <column name="kod_naltype" table="a" type="number" title="Сылка" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_naltype" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog_type.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_naltype" as="kod_naltype" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_naltype" into="n1">a.kod_naltype as kod_naltype, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Наименование" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Наименование*//*string*/
</column></select>
                <from>
from <query name="sk_nalog_type" as="a" path="./a/a" haskeys="1" used="1">(
<select>--sk_nalog_type
select <column table="a" column="kod_naltype" type="number" as="kod_naltype" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_naltype">a.kod_naltype as kod_naltype, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Наименование" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name">a.name as name/*Наименование*//*string*/
</column></select><from>
from <table name="sk_nalog_type" as="a" used="1">sk_nalog_type
a
--\sk_nalog_type
</table></from>)
a
--\sk_nalog_type
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="ls=" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_naltype" as="kod_naltype" title="" key="1" thissrc="kod_naltype">a.kod_naltype</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_naltype" as="kod_naltype" title="" key="1" thissrc="kod_naltype">a.kod_naltype</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:kod_naltype_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование" thissrc="name">a.name</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog_type.xml" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog_type.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_naltype_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_naltype" as="kod_naltype" title="" key="1" />
                    <column table="a" column="name" as="name" title="Наименование" />
                  </select>
                  <from>
                    <query name="sk_nalog_type" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="ls=">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_naltype" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_naltype" />
                        <useparam name="kod_naltype_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_naltype_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_naltype_filter" type="string">
                  <const>:kod_naltype_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_naltype_x_n.name as kod_naltype_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.kod_naltype as kod_naltype/*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_naltype as kod_naltype  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n3 as kod_naltype  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_naltype as kod_naltype  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n3 as kod_naltype  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog_type
select a.kod_naltype as kod_naltype, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog_type
a
--\sk_nalog_type
)
kod_naltype_x_n on a.kod_naltype = kod_naltype_x_n.kod_naltype--\sk_nalog_type
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_naltype_x_n" table="a" />
          </dependants>
        </column>
        <column name="kod_nal" table="a" type="number" title="Сылка" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_nal" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_nal" as="kod_nal" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_nal" into="n1">a.kod_nal as kod_nal, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Наименование" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name, /*Наименование*//*string*/
</column><column table="a" column="abbr" as="abbr" title="Аббревиатура" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="abbr" into="s2">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select>
                <from>
from <query name="sk_nalog" as="a" path="./a/a" haskeys="1" used="1">(
<select>--sk_nalog
select <column table="a" column="kod_nal" type="number" as="kod_nal" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_nal">a.kod_nal as kod_nal, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Наименование" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name">a.name as name, /*Наименование*//*string*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" used="1" sourcetable="./a/a" sourcecolumn="abbr">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="sk_nalog" as="a" used="1">sk_nalog
a
--\sk_nalog
</table></from>)
a
--\sk_nalog
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="ls=" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_nal" as="kod_nal" title="" key="1" thissrc="kod_nal">a.kod_nal</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_nal" as="kod_nal" title="" key="1" thissrc="kod_nal">a.kod_nal</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:kod_nal_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование" thissrc="name">a.name</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="abbr" as="abbr" title="Аббревиатура" thissrc="abbr">a.abbr</column><text txtype="func"> ) </text><text txtype="func"> like lower( </text><const><text>:abbr_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog.xml" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\sk_nalog.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_nal_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="abbr_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_nal" as="kod_nal" title="" key="1" />
                    <column table="a" column="name" as="name" title="Наименование" />
                    <column table="a" column="abbr" as="abbr" title="Аббревиатура" />
                  </select>
                  <from>
                    <query name="sk_nalog" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="ls=">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_nal" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_nal" />
                        <useparam name="kod_nal_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="abbr" />
                        <useparam name="abbr_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_nal_filter" />
                    <useparam name="name_filter" />
                    <useparam name="abbr_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_nal_filter" type="string">
                  <const>:kod_nal_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="abbr_filter" type="string">
                  <const>:abbr_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_nal_x_n.name as kod_nal_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.kod_nal as kod_nal/*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_nal as kod_nal  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n4 as kod_nal  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_nal as kod_nal  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n4 as kod_nal  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog
select a.kod_nal as kod_nal, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog
a
--\sk_nalog
)
kod_nal_x_n on a.kod_nal = kod_nal_x_n.kod_nal--\sk_nalog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_nal_x_n" table="a" />
          </dependants>
        </column>
        <column name="dat_beg" table="a" type="date" title="Дата" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_beg" temp-col-name="d1" />
        <column name="u_m" table="a" type="string" title="Строка" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="u_m" temp-col-name="s1" />
        <column name="vid_t_x_n" table="a.vid_t" type="string" title="Сылка" text-source-for="vid_t" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vid_t_x_n.sp_col_name as vid_t_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t/**//*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on a.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_naltype_x_n" table="a.kod_naltype" type="string" title="Сылка" text-source-for="kod_naltype" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_naltype_x_n.name as kod_naltype_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.kod_naltype as kod_naltype/*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_naltype as kod_naltype  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n3 as kod_naltype  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_naltype as kod_naltype  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n3 as kod_naltype  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog_type
select a.kod_naltype as kod_naltype, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog_type
a
--\sk_nalog_type
)
kod_naltype_x_n on a.kod_naltype = kod_naltype_x_n.kod_naltype--\sk_nalog_type
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_nal_x_n" table="a.kod_nal" type="string" title="Сылка" text-source-for="kod_nal" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_nachisl_nal_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_nachisl_nal_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_nal_x_n.name as kod_nal_x_n, /*Сылка*//*string*/
a.kod_nachisl_nal as kod_nachisl_nal/*number*//*key*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.kod_nal as kod_nal/*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_nal as kod_nal  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n4 as kod_nal  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.kod_nal as kod_nal  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n4 as kod_nal  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog
select a.kod_nal as kod_nal, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog
a
--\sk_nalog
)
kod_nal_x_n on a.kod_nal = kod_nal_x_n.kod_nal--\sk_nalog
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="a" type="number" title="" is-user-editable="1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_nachisl_nal as kod_nachisl_nal 
,:vid_t as vid_t 
,:kod_naltype as kod_naltype 
,:kod_nal as kod_nal 
,:dat_beg as dat_beg 
,:u_m as u_m 
 
from dual ) 
 
loop 
insert into ss_nachisl_nal 
(kod_nachisl_nal 
,vid_t 
,kod_naltype 
,kod_nal 
,dat_beg 
,u_m 
) 
 values  
(r.kod_nachisl_nal 
,r.vid_t 
,r.kod_naltype 
,r.kod_nal 
,r.dat_beg 
,r.u_m 
) 
 returning  
kod_nachisl_nal into :kod_nachisl_nal; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ss_nachisl_nal where kod_nachisl_nal=:kod_nachisl_nal</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='a' 
and 
names=:form_id 
and 
f2=:kod_nachisl_nal; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_nachisl_nal as kod_nachisl_nal 
,:vid_t as vid_t 
,:kod_naltype as kod_naltype 
,:kod_nal as kod_nal 
,:dat_beg as dat_beg 
,:u_m as u_m 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,d1 
,s1 
) 
 values  
('a' 
,:form_id 
,:kod_nachisl_nal 
,:row_state_id 
,r.kod_nachisl_nal 
,r.vid_t 
,r.kod_naltype 
,r.kod_nal 
,r.dat_beg 
,r.u_m 
); 
end loop; 
else 
for r in  
 ( select  
:kod_nachisl_nal as kod_nachisl_nal 
,:vid_t as vid_t 
,:kod_naltype as kod_naltype 
,:kod_nal as kod_nal 
,:dat_beg as dat_beg 
,:u_m as u_m 
,a.dat_end 
,a.d_m 
 
from ss_nachisl_nal a  where kod_nachisl_nal=:kod_nachisl_nal) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,d1 
,s1 
,d2 
,d3 
) 
 values  
('a' 
,:form_id 
,:kod_nachisl_nal 
,:row_state_id 
,r.kod_nachisl_nal 
,r.vid_t 
,r.kod_naltype 
,r.kod_nal 
,r.dat_beg 
,r.u_m 
,r.dat_end 
,r.d_m 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='a' and names=:form_id</clear-temp-text>
      <update-text>begin
update ss_nachisl_nal set  
(kod_nachisl_nal 
,vid_t 
,kod_naltype 
,kod_nal 
,dat_beg 
,u_m 
) 
= 
 ( select  
:kod_nachisl_nal as kod_nachisl_nal 
,:vid_t as vid_t 
,:kod_naltype as kod_naltype 
,:kod_nal as kod_nal 
,:dat_beg as dat_beg 
,:u_m as u_m 
 
from dual ) 
 
where 
kod_nachisl_nal=:kod_nachisl_nal 
;
end;
</update-text>
      <scheme>
        <table name="ss_nachisl_nal" as="a">
          <columns>
            <column name="kod_nachisl_nal" type="number" title="" />
            <column name="vid_t" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_naltype" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_nal" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_beg" type="date" title="Дата" />
            <column name="u_m" type="string" title="Строка" />
            <column name="vid_t_x_n" type="string" title="Сылка" />
            <column name="kod_naltype_x_n" type="string" title="Сылка" />
            <column name="kod_nal_x_n" type="string" title="Сылка" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod_nachisl_nal" type="number" title="" />
            <column name="vid_t_x_n" type="string" title="Сылка" />
            <column name="vid_t" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_naltype_x_n" type="string" title="Сылка" />
            <column name="kod_naltype" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_nal_x_n" type="string" title="Сылка" />
            <column name="kod_nal" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_beg" type="date" title="Дата" />
            <column name="u_m" type="string" title="Строка" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_nachisl_nal_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_nachisl_nal_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t, /*Сылка*//*number*/
a.kod_naltype as kod_naltype, /*Сылка*//*number*/
a.kod_nal as kod_nal, /*Сылка*//*number*/
a.dat_beg as dat_beg, /*Дата*//*date*/
a.u_m as u_m, /*Строка*//*string*/
vid_t_x_n.sp_col_name as vid_t_x_n, /*Сылка*//*string*/
kod_naltype_x_n.name as kod_naltype_x_n, /*Сылка*//*string*/
kod_nal_x_n.name as kod_nal_x_n, /*Сылка*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (
--ss_nachisl_nal
select a.kod_nachisl_nal as kod_nachisl_nal, /*number*//*key*/
a.vid_t as vid_t, /**//*number*/
a.kod_naltype as kod_naltype, /*number*/
a.kod_nal as kod_nal, /*number*/
a.dat_beg as dat_beg, /**//*date*/
a.u_m as u_m, /**//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t,a.kod_naltype as kod_naltype,a.kod_nal as kod_nal,a.dat_beg as dat_beg,a.u_m as u_m,0 as is_new,1 as is_not_new  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t,t.n3 as kod_naltype,t.n4 as kod_nal,t.d1 as dat_beg,t.s1 as u_m,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
a
--\(select a.kod_nachisl_nal as kod_nachisl_nal,a.vid_t as vid_t,a.kod_naltype as kod_naltype,a.kod_nal as kod_nal,a.dat_beg as dat_beg,a.u_m as u_m,0 as is_new,1 as is_not_new  from ss_nachisl_nal a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_nachisl_nal=t.f2 ) and   a.kod_nachisl_nal in :kod_nachisl_nal_prm   union all  select t.n1 as kod_nachisl_nal,t.n2 as vid_t,t.n3 as kod_naltype,t.n4 as kod_nal,t.d1 as dat_beg,t.s1 as u_m,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_nachisl_nal_prm )
)
a
--\ss_nachisl_nal
left outer join
(
--sk_nalog
select a.kod_nal as kod_nal, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog
a
--\sk_nalog
)
kod_nal_x_n on a.kod_nal = kod_nal_x_n.kod_nal--\sk_nalog
left outer join
(
--sk_nalog_type
select a.kod_naltype as kod_naltype, /*number*//*key*/
a.name as name/*Наименование*//*string*/

from sk_nalog_type
a
--\sk_nalog_type
)
kod_naltype_x_n on a.kod_naltype = kod_naltype_x_n.kod_naltype--\sk_nalog_type
left outer join
(
--sk_nachisl
select a.vid_t as vid_t, /**//*number*//*key*/
a.num_t || ' ' || a.name as sp_col_name/**//*string*/

from sk_nachisl
a
--\sk_nachisl
)
vid_t_x_n on a.vid_t = vid_t_x_n.vid_t--\sk_nachisl
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>