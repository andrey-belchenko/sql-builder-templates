<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="create_ur_izv" timestamp="28.12.2023 14:42:16" title="Создание извещения по юр. документу" show-toolbar="1" with-behavior="0" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms\tnr_izv.xml" elid="156" ord="156" leaf="0" lvl="2" pelid="">
    <field table="a" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" width-perc="33" id="26798299" />
    <field table="a" name="num_delo" title="Номер дела" controlType="UIText" rows-limit="100" width-perc="33" id="33373043" />
    <field table="a" name="ur_hist_mat_dec_gp_otv" title="Гос. пошлина, взысканная с ответчика" controlType="UIText" edit-mask="N2" rows-limit="100" width-perc="33" id="60905882" />
    <field table="a" name="kod_dog" title="Договор" controlType="UIText" edit-mask="N2" rows-limit="100" width-perc="33" id="9050468" />
    <field id="17211470" controlType="UIDate" type="date" elid="397" ord="397" leaf="0" lvl="2" pelid="" column-mandatory="1" title="Дата" name="dat" show-checkbox="0" width-perc="33">
      <defaultquery>
        <query name="today" />
      </defaultquery>
    </field>
    <field id="39792707" name="ym" controlType="UICombo" type="number" title="Период" mandatory="1" elid="533" ord="533" leaf="0" lvl="2" pelid="" column-editable="0" show-checkbox="0" column-mandatory="1" width-perc="33">
      <listquery>
        <query name="kr_calc_list"></query>
      </listquery>
      <defaultquery>
        <query name="kr_calc_max"></query>
      </defaultquery>
    </field>
    <uicommand name="t_byt_o_gp.cr_izv_all " title="Создать извещение" editable="is_form_valid" width-perc="50" id="27553265">
      <useparam name="kod_dog" id="28638687" />
      <useparam name="ur_hist_mat_gp_otv" id="41455403" />
      <useparam name="num_delo" id="49652755" />
      <useparam name="ym" id="14350357" />
      <useparam name="dat" id="22371466" />
      <useparam name="kod_izv" id="44837047" />
    </uicommand>
    <field id="51036949" controlType="UINumber" edit-mask="d" type="number" elid="393" ord="393" leaf="1" lvl="2" pelid="" name="kod_izv" title="тест" checked="1" show-checkbox="0" width-perc="50" />
  </form>
  <params>
    <param name="kod_mat" type="number">
      <const>500000010</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="kod_mat" type="number">
        <const>500000010</const>
      </param>
    </params>
    <fields>
      <field type="date" name="dat" parname="dat" title="Дата" ColumnMandatory="1" />
      <field type="number" name="ym" parname="ym" title="Период" ColumnEditable="0" ColumnMandatory="1" />
      <field type="number" name="kod_izv" parname="kod_izv" title="тест" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="a_has_changes" parname="a_has_changes" />
    </fields>
    <table name="a" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" is-ms-upd="1" is-top="1" key-dimension="kod_mat">
      <select-text>
--
select a.kodp as kodp, /*number*/
a.num_delo as num_delo, /*Номер дела*//*string*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_dog as kod_dog, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on kod_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a
--\ur_mat
where
(a.kod_mat = :kod_mat )  and (a.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /**//*number*/
kr_dogovor.kod_dog as kod_dog, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a on a.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="kodp" table="a" type="number" title="Абонент" parname="kodp" ColumnEditable="0" is-updateable="1" is-updateable-ext="1" update-target="kodp" temp-col-name="n1">
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select a.kod_dog as kod_dog, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_mat as kod_mat,a.kodp as kodp,null as kod_dog  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp,t.n2 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kodp as kodp,null as kod_dog  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp,t.n2 as kod_dog  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a
--\ur_mat
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_dog" table="a" />
            <dependant name="kodp_x_n" table="a" />
            <dependant name="kod_dog_x_n" table="a" />
          </dependants>
        </column>
        <column name="num_delo" table="a" type="string" title="Номер дела" parname="num_delo" ColumnEditable="0" Mandatory="qube.ur_hist_mat_count" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s1" />
        <column name="ur_hist_mat_dec_gp_otv" table="a" type="number" title="Гос. пошлина, взысканная с ответчика" parname="ur_hist_mat_gp_otv" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on kod_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_dog" table="a" type="number" title="Договор" parname="kod_dog" ColumnEditable="1" is-user-editable="1" ColumnMandatory="1" is-updateable-ext="1" is-refreshed="1" update-target="kod_dog" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_dog" into="n1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" as="ndog" key="0" used="1" type="string" title="Номер договора" agg="stragg_dist" sourcetable="./a/a" sourcecolumn="ndog" into="s1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="dep" column="name" as="dep_name" title="Отделение" key="0" used="1" type="string" sourcetable="./a/dep" sourcecolumn="name" into="s2">dep.name as dep_name, /*Отделение*//*string*/
</column><column table="kodp" column="nump" as="nump" key="0" used="1" type="string" title="Код абонента" sourcetable="./a/kodp" sourcecolumn="nump" into="s3">kodp.nump as nump, /*Код абонента*//*string*/
</column><column table="kodp" column="name" as="payer_name" key="0" used="1" type="string" title="Наименование абонента" agg="list" sourcetable="./a/kodp" sourcecolumn="name" into="s4">kodp.name as payer_name/*Наименование абонента*//*string*/
</column></select>
                <from>
from <query name="kr_dogovor" as="a" path="./a/a" haskeys="1" used="1">(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (для договоров услуг - сторона1 - кому платят )" vid="1" as="kodp" reference="kr_payer" refcol="kodp" key="0" sourcetable="./a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="dep" type="number" title="" vid="1" as="dep" key="0" sourcetable="./a/a" sourcecolumn="dep" used="1">a.dep as dep/**//*number*/
</column></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from>)
a
--\kr_dogovor
</query><query name="kr_org" as="dep" join="left outer" path="./a/dep" haskeys="1" used="1">left outer join
(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/dep" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="name" type="string" title="Отделение" as="name" key="0" sourcetable="./a/dep" sourcecolumn="name" used="1">a.name as name/*Отделение*//*string*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from><call function="=" type="bool">)
dep on <column table="a" column="dep">a.dep</column><text txtype="func"> = </text><column table="dep" column="kodp">dep.kodp</column></call>--\kr_org
</query><query name="kr_payer" as="kodp" join="left outer" path="./a/kodp" haskeys="1" used="1">left outer join
(
<select>--kr_payer
select <column table="a" column="kodp" type="number" title="" comment="уник. код абонента" fact="kr_payer_kodp" agg="max" as="kodp" key="1" fixed="1" sourcetable="./a/kodp" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="nump" type="string" title="Код абонента" comment="номер абонента" vid="1" is-name="1" as="nump" key="0" sourcetable="./a/kodp" sourcecolumn="nump" used="1">a.nump as nump, /*Код абонента*//*string*/
</column><column table="a" column="name" type="string" title="Наименование абонента" comment="наименование" vid="1" is-name="1" is-fact="1" agg="list" as="name" fact="kr_payer_name" key="0" sourcetable="./a/kodp" sourcecolumn="name" used="1">a.name as name/*Наименование абонента*//*string*/
</column></select><from>
from <table name="kr_payer" as="a" title="Абонент" used="1">kr_payer
a
--\kr_payer
</table></from><call function="=" type="bool">)
kodp on <column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><column table="kodp" column="kodp">kodp.kodp</column></call>--\kr_payer
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kodp">a.kodp</column><text txtype="func"> = </text><const><text>:kodp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" thissrc="kod_dog">a.kod_dog</column><text txtype="func"> ) like lower( </text><const><text>:kod_dog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" key="0" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="dep" column="name" as="dep_name" title="Отделение" key="0" thissrc="dep_name">dep.name</column><text txtype="func"> ) like lower( </text><const><text>:dep_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="nump" as="nump" key="0" thissrc="nump">kodp.nump</column><text txtype="func"> ) like lower( </text><const><text>:nump_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kodp" column="name" as="payer_name" key="0" thissrc="payer_name">kodp.name</column><text txtype="func"> ) like lower( </text><const><text>:payer_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query timestamp="15.03.2016 18:24:50" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_dogovor.xml" elid="2289" ord="2289" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="kodp" column="kodp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_dog_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="dep_name_filter" type="string" />
                    <param name="nump_filter" type="string" />
                    <param name="payer_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_dog" as="kod_dog" key="1" fixed="1" />
                    <column table="a" column="ndog" as="ndog" key="0" />
                    <column table="dep" column="name" as="dep_name" title="Отделение" key="0" />
                    <column table="kodp" column="nump" as="nump" key="0" />
                    <column table="kodp" column="name" as="payer_name" key="0" />
                  </select>
                  <from>
                    <query name="kr_dogovor" as="a" title="Договор">
                      <link name="kodp" as="kodp" table="kr_payer" child="kr_dogovor" field="kodp" parent="kr_payer" back="kr_dogovor" title="Абонент" />
                      <link name="dep" as="dep" table="kr_org" child="kr_dogovor" field="dep" parent="kr_org" back="kr_dog_dep" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="=" optional="1">
                          <column table="a" column="kodp" />
                          <useparam name="kodp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_dog" />
                        <useparam name="kod_dog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dep_name" />
                        <useparam name="dep_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nump" />
                        <useparam name="nump_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="payer_name" />
                        <useparam name="payer_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kodp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_dog_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="dep_name_filter" />
                    <useparam name="nump_filter" />
                    <useparam name="payer_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="kodp" column="kodp">
                  <const>:kodp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_dog_filter" type="string">
                  <const>:kod_dog_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="dep_name_filter" type="string">
                  <const>:dep_name_filter </const>
                </param>
                <param name="nump_filter" type="string">
                  <const>:nump_filter </const>
                </param>
                <param name="payer_name_filter" type="string">
                  <const>:payer_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param type="number" name="kodp" column="kodp" />
            </params>
          </sel-list-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
          <dep-refresh-cmd>
            <root table="a">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select a.kod_dog as kod_dog, /*number*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a
--\ur_mat
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_dog" table="a" />
            <dependant name="kod_dog_x_n" table="a" />
          </dependants>
        </column>
        <column name="kodp_x_n" table="a.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kodp as kodp/**//*number*/

from (select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_dog_x_n" table="a.kod_dog" type="string" title="Договор" text-source-for="kod_dog" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_dog as kod_dog/*number*/

from (select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,null as kod_dog,a.kodp as kodp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.n2 as kod_dog,t.n1 as kodp  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a
--\ur_mat
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_count" table="a" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="a" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="a" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on a.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat" table="a" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kodp as kodp 
,:num_delo as num_delo 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat 
(kodp 
,num_delo 
,kod_mat 
) 
 values  
(r.kodp 
,r.num_delo 
,r.kod_mat 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='a' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kodp as kodp 
,:num_delo as num_delo 
,:kod_dog as kod_dog 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,s1 
,n2 
,n3 
) 
 values  
('a' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kodp 
,r.num_delo 
,r.kod_dog 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:kodp as kodp 
,:num_delo as num_delo 
,:kod_dog as kod_dog 
,:kod_mat as kod_mat 
,a.kod_folders 
,a.kod_doc 
,a.kod_ssp 
,a.num_reg 
,a.dat_otv 
,a.kod_ret_isk 
,a.dat_prin 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.dat_otz 
,a.dat_doc 
,a.fio_otz 
,a.kod_subject 
,a.prichina_otz 
,a.sum_gp 
,a.prim 
,a.dat_gp 
,a.kod_sud 
,a.num_pp_gp 
,a.kod_parent 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.kod_scan 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.dat_post_mat_pio 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,s1 
,n2 
,n3 
,n4 
,n5 
,n6 
,s2 
,d1 
,n7 
,d2 
,s3 
,d3 
,s4 
,d4 
,d5 
,s5 
,n8 
,s6 
,n9 
,s7 
,d6 
,n10 
,s8 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,d7 
,s9 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,s10 
,s11 
,n28 
,s12 
,d8 
,n29 
,s13 
,d9 
,n30 
,n31 
,d10 
,d11 
,n32 
,d12 
,s14 
) 
 values  
('a' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kodp 
,r.num_delo 
,r.kod_dog 
,r.kod_mat 
,r.kod_folders 
,r.kod_doc 
,r.kod_ssp 
,r.num_reg 
,r.dat_otv 
,r.kod_ret_isk 
,r.dat_prin 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.dat_otz 
,r.dat_doc 
,r.fio_otz 
,r.kod_subject 
,r.prichina_otz 
,r.sum_gp 
,r.prim 
,r.dat_gp 
,r.kod_sud 
,r.num_pp_gp 
,r.kod_parent 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.kod_scan 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.dat_post_mat_pio 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='a' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(kodp 
,num_delo 
,kod_mat 
) 
= 
 ( select  
:kodp as kodp 
,:num_delo as num_delo 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction action-type="execute-update" call="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="a">
          <columns>
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="ur_hist_mat_dec_gp_otv" type="number" title="Гос. пошлина, взысканная с ответчика" />
            <column name="kod_dog" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" />
            <column name="kod_dog_x_n" type="string" title="Договор" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select a.kodp as kodp, /*number*/
a.num_delo as num_delo, /*Номер дела*//*string*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_dog as kod_dog, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_dog_x_n.name as kod_dog_x_n, /*Договор*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
a.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_dogplat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on ur_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_hist_mat as kod_hist_mat_desc/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a on kod_hist_mat_a_d.kod_mat = a.kod_mat--\ur_mat
where
a.kod_mat is not null )
--\
union all
(
--
select a.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
a
--\ur_mat
where
a.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.kodp as kodp, /**//*number*/
a.kod_dog as kod_dog, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,a.num_delo as num_delo,a.kodp as kodp,null as kod_dog,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,t.n1 as kodp,t.n2 as kod_dog,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.num_delo as num_delo,a.kodp as kodp,null as kod_dog,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='a' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,t.n1 as kodp,t.n2 as kod_dog,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='a' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--kr_payer
select a.kodp as kodp/**//*number*//*key*/

from kr_payer
a
--\kr_payer
)
kodp on a.kodp = kodp.kodp--\kr_payer
left outer join
(
--
select kr_dogovor.kodp as kodp, /*number*//*key*/
max(kr_dogovor.kod_dog)  as kod_dog/*number*/

from (
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.kodp as kodp/**//*number*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor
--\kr_dogovor
 group by
kr_dogovor.kodp/*number*//*key*/
)
kr_dogovor on kr_dogovor.kodp = kodp.kodp--\
)
a on a.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kod_dog_x_n on a.kod_dog = kod_dog_x_n.kod_dog--\kr_dogovor
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on a.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>