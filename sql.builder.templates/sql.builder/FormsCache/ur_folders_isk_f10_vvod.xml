<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_folders_isk_f10_vvod" title="Судебное производство" security-id="asuse_ur_pir_isk" with-behavior="0" comment="Закладка «Судебное производство» «Карточки по ведению ПИР» (см. form ur_folders_main)" timestamp="28.07.2024 17:32:15" file="sql.builder.templates\sql.builder\projects\asuse2\forms\Арбитраж\ur_folders_isk_f10_vvod.xml" elid="242" ord="242" leaf="0" lvl="2" pelid="">
    <field table="ur_folders" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="57185775" />
    <field table="ur_folders" name="vvod" title="Способ учета задолженности" controlType="UICombo" rows-limit="100" id="29394974" />
    <field table="ur_folders" name="not_vvod" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="20827679" />
    <field table="ur_folders" name="kod_podr" title="Отделение" controlType="UICombo" rows-limit="100" id="45398434" />
    <const type="number" as="dep_pio" column-visible="0" parname="dep_pio" comment="Управление АО «Татэнергосбыт»" id="11990526">1219</const>
    <splitcontainer id="31656513">
      <fieldgroup title="Материалы переданные в суд" id="17341996">
        <grid table="ur_mat" show-toolbar="1" id="47890220">
          <toolbar id="58811471">
            <uicommand name="upech_doc" editable="item_is_not_new" title="Печать отчётов" id="35405868">
              <useparam name="cur_kod_mat" id="21849526" />
              <const id="23415348">6</const>
              <useparam name="kod_folders" id="20505176" />
            </uicommand>
            <field id="42354465" controlType="UICheck" checked="1" type="number" title="Не показывать архивные" name="no_arh" />
          </toolbar>
          <columns id="10988863">
            <field table="ur_mat" name="kod_mat" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="62460088" />
            <field table="ur_mat" name="pio_date" title="Дата поступления материалов в ПИО" controlType="UIDate" rows-limit="100" id="29767026" />
            <field table="ur_mat" name="kod_emp" title="Исполнитель ПИО" controlType="UICombo" rows-limit="100" id="55235108">
              <listquery id="4668681">
                <query name="kr_employee_urists_singl_dep" id="39397107">
                  <withparams id="22239325">
                    <useparam name="dep_pio" id="41462461" />
                  </withparams>
                </query>
              </listquery>
            </field>
            <field table="ur_mat" name="kr_dog_name" title="Договор" controlType="UIText" rows-limit="100" id="57198224" />
            <field table="ur_mat" name="num_reg" title="Номер иска" controlType="UIText" rows-limit="100" id="50321979" />
            <field table="ur_mat" name="kod_doc" title="Документ" controlType="UICombo" rows-limit="100" id="55061933" />
            <field table="ur_mat" name="is_peresmotr" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="31563589" />
            <field table="ur_mat" name="kod_subject" title="Предмет" controlType="UICombo" rows-limit="100" id="41694696" />
            <field table="ur_mat" name="kod_parent" title="Обжалование" controlType="UICombo" rows-limit="100" id="40311308" />
            <field table="ur_mat" name="ur_hist_mat_dec_dat_entry" title="Дата вст. реш. в зак. силу" controlType="UIDate" rows-limit="100" id="55828111" />
            <field table="ur_mat" name="ur_mat_pr_sch_gp_vld" title="Дата вст. реш. в зак. силу" controlType="UIText" rows-limit="100" id="28864164" />
            <field table="ur_mat" name="ur_mat_pr_sch_peni_vld" title="Дата вст. реш. в зак. силу" controlType="UIText" rows-limit="100" id="951459" />
            <field table="ur_mat" name="ur_mat_zadol_po_isku" title="Задолженность по иску" controlType="UIText" edit-mask="N2" rows-limit="100" id="55898996" />
            <field table="ur_mat" name="period_zadol_s_vvod" title="Период задолженности с" controlType="UICombo" format="F2" edit-mask="F2" rows-limit="100" id="29078675">
              <listquery val-field-name="ym" id="59414375">
                <query name="ym_list_vvod" id="26001154" />
              </listquery>
            </field>
            <field table="ur_mat" name="period_zadol_po_vvod" title="Период задолженности по" controlType="UICombo" format="F2" edit-mask="F2" rows-limit="100" id="20070303">
              <listquery val-field-name="ym" id="17495705">
                <query name="ym_list_vvod" id="49530771" />
              </listquery>
            </field>
            <field table="ur_mat" name="osnreal" title="Основная реал." controlType="UIText" edit-mask="N2" rows-limit="100" id="46235269" />
            <field table="ur_mat" name="peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="9423518" />
            <field table="ur_mat" name="mat_peni_period_str" title="Период пени" width="141" controlType="UIText" rows-limit="100" id="3242117">
              <buttons id="10297276">
                <uicommand action-type="dynamic-form" call="ur_mat_peni_period_select" type="Ellipsis" side="Right" title="Выбор периодов пени" modal="1" visible="item_is_not_new" id="14982367">
                  <useparam name="cur_kod_mat" id="44559065" />
                </uicommand>
              </buttons>
            </field>
            <field table="ur_mat" name="ogr" title="Расх. за введ. огранич. реж. энергопотребл." controlType="UIText" edit-mask="N2" rows-limit="100" id="19535137" />
            <field table="ur_mat" name="ur_opl_do_resh_vvod" title="Оплата до вынес. реш. суда" controlType="UIText" edit-mask="N2" rows-limit="100" id="22332114" />
            <field table="ur_mat" name="ur_mat_ostatok_zadol_do_resch" title="Остаток задолженности до вынес. реш. суда" controlType="UIText" edit-mask="N2" rows-limit="100" id="26430234" />
            <field table="ur_mat" name="ur_mat_sum_gp" title="Сумма гос. пошлины" controlType="UIText" edit-mask="N2" rows-limit="100" id="62302910">
              <buttons id="10046943">
                <uicommand action-type="dynamic-form" call="ur_mat_gp" type="Ellipsis" side="Right" modal="1" title="Госпошлина истца" is-ret="0" visible="1" id="18249864">
                  <useparam table="ur_dogplat" column="kod_sf" name="cur_kod_mat" id="41365157" />
                </uicommand>
              </buttons>
            </field>
            <field table="ur_mat" name="dat_otv" title="Дата отправки документов ответчику" controlType="UIDate" rows-limit="100" id="9271482" />
            <field table="ur_mat" name="kod_sud" title="Суд / судебный участок" controlType="UICombo" rows-limit="100" id="27905761" />
            <field table="ur_mat" name="dat_doc" title="Дата подачи в суд" controlType="UIDate" rows-limit="100" id="20022685" />
            <field table="ur_mat" name="dat_prin" title="Дата принятия документов в суде" controlType="UIDate" rows-limit="100" id="36593803" />
            <field table="ur_mat" name="type_rassm" title="Порядок рассмотрения" controlType="UICombo" rows-limit="100" id="46007958" />
            <field table="ur_mat" name="date_rassm_approx" title="Примерный срок рассмотрения" controlType="UIDate" rows-limit="100" id="20712881" />
            <field table="ur_mat" name="num_delo" title="Номер дела" controlType="UIText" rows-limit="100" id="55962197" />
            <field table="ur_mat" name="link_delo" title="Гиперссылка" controlType="UILink" rows-limit="100" id="52935744" />
            <field table="ur_mat" name="kod_scan" title="Файл" controlType="UIFile" rows-limit="100" id="11040274" />
            <field table="ur_mat" name="prim" title="Примечание" controlType="UITextEx" rows-limit="100" id="26490039" />
            <field table="ur_mat" name="is_not_new" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="23350056" />
            <field table="ur_mat" name="dat_arh" title="Дата архивации" controlType="UIDate" rows-limit="100" id="41668005" />
          </columns>
        </grid>
      </fieldgroup>
      <fieldgroup title="История рассмотрения" id="4045713">
        <grid table="ur_hist_mat" show-toolbar="1" id="44292318">
          <toolbar id="18500697">
            <uicommand action-type="dynamic-form-create" call="ur_hist_mat_f10_vvod" button-type="custom-add-form" title="Добавить" modal="1" editable="item_is_not_new" name="custom-add-form" icon="AddForm_24" file="sql.builder.templates\sql.builder\projects\common\main.xml" id="36123826">
              <const id="39933224">null</const>
              <useparam name="cur_kod_mat" id="26649456" />
              <const id="18885886">6</const>
            </uicommand>
            <uicommand button-type="grid-copy" column-visible="0" name="grid-copy" control-name="ButtonCoppyRow" file="sql.builder.templates\sql.builder\projects\common\main.xml" title="" id="4681878" />
            <uicommand button-type="grid-add" column-visible="0" name="grid-add" control-name="ButtonAddRow" file="sql.builder.templates\sql.builder\projects\common\main.xml" title="" id="57739291" />
          </toolbar>
          <columns id="61689841">
            <field table="ur_hist_mat" name="kod_hist_mat" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="20331090" />
            <field table="ur_hist_mat" name="kod_mat" title="Материалы переданные в суд" controlType="UICombo" rows-limit="100" id="44473932" />
            <field table="ur_hist_mat" name="kod_zased" title="Судья" controlType="UICombo" rows-limit="100" id="13678559" />
            <field table="ur_hist_mat" name="dat_rassm" title="Дата суд. разб." controlType="UIDate" rows-limit="100" id="61816871" />
            <field table="ur_hist_mat" name="dat_entry" title="Дата вст. реш. в зак. силу" controlType="UIDate" rows-limit="100" id="7251082" />
            <field table="ur_hist_mat" name="dat_send_il" title="Дата направления ИЛ в филиал" controlType="UIDate" rows-limit="100" id="42365141" />
            <field table="ur_hist_mat" name="dat_post" title="Дата прин. суд. акта" controlType="UIDate" rows-limit="100" id="8357879" />
            <field table="ur_hist_mat" name="dat_receipt_post" title="Дата пол. суд. акта" controlType="UIDate" rows-limit="100" id="23843678" />
            <field table="ur_hist_mat" name="dat_send_petition_il" title="Дата напр. ход-ва о выдаче ИЛ" controlType="UIDate" rows-limit="100" id="35405619" />
            <field table="ur_hist_mat" name="dat_srok" title="Срок обжалования решения" controlType="UIDate" rows-limit="100" id="45276144" />
            <field table="ur_hist_mat" name="kod_post" title="Судебный акт" controlType="UICombo" rows-limit="100" id="49204377" />
            <field table="ur_hist_mat" name="kod_result" title="Результат рассмотрения" controlType="UICombo" rows-limit="0" id="2687961" />
            <field table="ur_hist_mat" name="decision" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="36518082" />
            <field table="ur_hist_mat" name="decision_not_otmena" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="53039193" />
            <band title="Задолженность по решению суда" id="14098267">
              <field table="ur_hist_mat" name="ur_hist_mat_sum_pris_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="61471053" />
              <field table="ur_hist_mat" name="period_zadol_s_vvod" title="Период задолженности с" controlType="UICombo" format="F2" edit-mask="F2" rows-limit="100" id="63883211">
                <listquery val-field-name="ym" id="16471583">
                  <query name="ym_list_vvod" id="13496158" />
                </listquery>
              </field>
              <field table="ur_hist_mat" name="period_zadol_po_vvod" title="Период задолженности с" controlType="UICombo" format="F2" edit-mask="F2" rows-limit="100" id="4246275">
                <listquery val-field-name="ym" id="62929337">
                  <query name="ym_list_vvod" id="24450083" />
                </listquery>
              </field>
              <field table="ur_hist_mat" name="osnreal" title="Основная реализация" controlType="UIText" edit-mask="N2" rows-limit="100" id="29965990" />
              <field table="ur_hist_mat" name="peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="10716908" />
              <field table="ur_hist_mat" name="ogr" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="29948372" />
              <field table="ur_hist_mat" name="gp_otv" title="ГП с ответчика" controlType="UIText" edit-mask="N2" rows-limit="100" id="4457512" />
              <field table="ur_hist_mat" name="astrent" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" width-perc="50" id="43995055" />
              <field table="ur_hist_mat" name="sud_izd" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="3429876" />
            </band>
            <band title="Оплата по. реш. суда до выдачи исп. листа" id="37724689">
              <field table="ur_hist_mat" name="ur_hist_mat_opl_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="41158036" />
              <field table="ur_hist_mat" name="opl_osnreal" title="Осн. реал." controlType="UIText" edit-mask="N2" rows-limit="100" id="28447227" />
              <field table="ur_hist_mat" name="opl_peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="25928486" />
              <field table="ur_hist_mat" name="opl_ogr" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="42354117" />
              <field table="ur_hist_mat" name="opl_gpotv" title="ГП" controlType="UIText" edit-mask="N2" rows-limit="100" id="53896374" />
              <field table="ur_hist_mat" name="opl_astrent" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" id="49277370" />
              <field table="ur_hist_mat" name="opl_sud_izd" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="247868" />
            </band>
            <band title="Остаток задол.  по реш. суда до выд. исп. листа" id="3082937">
              <field table="ur_hist_mat" name="ur_hist_mat_ostatok_zadol_all" title="Всего" controlType="UIText" edit-mask="N2" rows-limit="100" id="3208387" />
              <field table="ur_hist_mat" name="ostatok_osnreal" title="Осн. реал. " controlType="UIText" edit-mask="N2" rows-limit="100" id="1551881" />
              <field table="ur_hist_mat" name="ostatok_peni" title="Проценты (пени)" controlType="UIText" edit-mask="N2" rows-limit="100" id="52774383" />
              <field table="ur_hist_mat" name="ostatok_ogr" title="Расх. за введ. огр. реж. энергопотр." controlType="UIText" edit-mask="N2" rows-limit="100" id="29964217" />
              <field table="ur_hist_mat" name="ostatok_gp_otv" title="ГП" controlType="UIText" edit-mask="N2" rows-limit="100" id="22764626" />
              <field table="ur_hist_mat" name="ostatok_astrent" title="Астрент" controlType="UIText" edit-mask="N2" rows-limit="100" id="22671116" />
              <field table="ur_hist_mat" name="ostatok_sud_izd" title="Судебные издержки" controlType="UIText" edit-mask="N2" rows-limit="100" id="20339811" />
            </band>
            <field table="ur_hist_mat" name="kod_scan" title="Файл" controlType="UIFile" rows-limit="100" id="59291592" />
            <field table="ur_hist_mat" name="prim" title="Примечание" controlType="UITextEx" rows-limit="100" id="14733112" />
          </columns>
          <events id="4353903">
            <useaction event-name="double-click" action-type="dynamic-form" call="ur_hist_mat_f10_vvod" modal="1" id="37752628">
              <useparam name="cur_kod_hist_mat" id="46255527" />
              <useparam name="cur_kod_mat1" id="17428445" />
              <const id="43477636">6</const>
            </useaction>
          </events>
        </grid>
      </fieldgroup>
    </splitcontainer>
  </form>
  <params>
    <param name="kod_folders" type="number" />
  </params>
  <dataset>
    <params>
      <param name="kod_folders" type="number">
        <const exclude="1">2000002636</const>
      </param>
    </params>
    <fields>
      <field type="number" name="no_arh" parname="no_arh" title="Не показывать архивные" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_folders_has_changes" parname="ur_folders_has_changes" />
      <field type="string" name="ur_mat_has_changes" parname="ur_mat_has_changes" />
      <field type="string" name="ur_hist_mat_has_changes" parname="ur_hist_mat_has_changes" />
    </fields>
    <table name="ur_folders" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_folders" delete-validation="ur_folders_del_vld" key="kod_folders" is-ms-upd="1" is-top="1" key-dimension="kod_folders">
      <select-text>
--
select ur_folders.kodp as kodp, /*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.not_vvod as not_vvod, /*number*/
ur_folders.kod_podr as kod_podr, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders
--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from ur_folders
a
--\ur_folders
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
(ur_folders.kod_folders = :kod_folders )  and (ur_folders.kod_folders is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.vvod as vvod, /**//*number*/
a.kod_podr as kod_podr, /*number*/
kod_isp.kodp as kodp_new_val, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_folders
a
--\ur_folders
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="kodp" table="ur_folders" type="number" title="Абонент" parname="ur_folders_kodp" ColumnVisible="0" ColumnMandatory="1" NewVal="kodp_new_val" is-updateable="1" is-updateable-ext="1" update-target="kodp" temp-col-name="n2">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
kod_isp.kodp as kodp_new_val/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders
--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kodp_x_n" table="ur_folders" />
            <dependant name="kodp_new_val" table="ur_folders" />
          </dependants>
        </column>
        <column name="vvod" table="ur_folders" type="number" title="Способ учета задолженности" parname="is_vvod" ColumnVisible="0" ColumnDefault="ur_folders_vvod_default" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="vvod" temp-col-name="n10">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.not_vvod as not_vvod, /*number*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod, /**//*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="not_vvod" table="ur_folders" />
            <dependant name="vvod_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="not_vvod" table="ur_folders" type="number" title="" parname="is_not_vvod" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.not_vvod as not_vvod, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_podr" table="ur_folders" type="number" title="Отделение" parname="dep" ColumnVisible="0" ColumnDefault="kr_dep_current" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_podr" temp-col-name="n11">
          <dep-refresh-cmd>
            <root table="ur_folders">
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_podr as kod_podr/*number*/

from (select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_podr_x_n" table="ur_folders" />
          </dependants>
        </column>
        <column name="kodp_x_n" table="ur_folders.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="vvod_x_n" table="ur_folders.vvod" type="string" title="Способ учета задолженности" text-source-for="vvod" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.vvod as vvod/**//*number*/

from (select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.vvod as vvod  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n10 as vvod  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_podr_x_n" table="ur_folders.kod_podr" type="string" title="Отделение" text-source-for="kod_podr" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_podr as kod_podr/*number*/

from (select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kod_podr as kod_podr  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n11 as kod_podr  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_new_val" table="ur_folders" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
kod_isp.kodp as kodp_new_val/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders
--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_folders" type="number" title="" is-user-editable="1" />
        <column name="ur_folders_del_vld" table="ur_folders" type="string" title="Валидация удаления папки" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_folders_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_folders_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_folders" table="ur_folders" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_podr as kod_podr 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into ur_folders 
(kodp 
,vvod 
,kod_podr 
,kod_folders 
) 
 values  
(r.kodp 
,r.vvod 
,r.kod_podr 
,r.kod_folders 
) 
 returning  
kod_folders into :kod_folders; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_folders where kod_folders=:kod_folders</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_folders' 
and 
names=:form_id 
and 
f2=:kod_folders; 
if :row_state_id=1  then 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_podr as kod_podr 
,:kod_folders as kod_folders 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n10 
,n11 
,n1 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.vvod 
,r.kod_podr 
,r.kod_folders 
); 
end loop; 
else 
for r in  
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_podr as kod_podr 
,:kod_folders as kod_folders 
,a.kod_emp 
,a.kod_vi 
,a.kod_sdp 
,a.dat_create 
,a.zadol 
,a.u_m 
,a.d_m 
,a.kod_parent 
,a.kod_isp 
,a.tep_el 
,a.dat_finish 
,a.num_doc 
,a.tep_el_byt 
,a.kodp_new 
,a.kodps 
,a.namep 
,a.kod_category 
,a.kod_dog 
 
from ur_folders a  where kod_folders=:kod_folders) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n10 
,n11 
,n1 
,n3 
,n4 
,n5 
,d1 
,n6 
,s1 
,d3 
,n7 
,n8 
,n9 
,d2 
,s2 
,n12 
,n13 
,s3 
,s4 
,n14 
,n15 
) 
 values  
('ur_folders' 
,:form_id 
,:kod_folders 
,:row_state_id 
,r.kodp 
,r.vvod 
,r.kod_podr 
,r.kod_folders 
,r.kod_emp 
,r.kod_vi 
,r.kod_sdp 
,r.dat_create 
,r.zadol 
,r.u_m 
,r.d_m 
,r.kod_parent 
,r.kod_isp 
,r.tep_el 
,r.dat_finish 
,r.num_doc 
,r.tep_el_byt 
,r.kodp_new 
,r.kodps 
,r.namep 
,r.kod_category 
,r.kod_dog 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_folders' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_folders set  
(kodp 
,vvod 
,kod_podr 
,kod_folders 
) 
= 
 ( select  
:kodp as kodp 
,:vvod as vvod 
,:kod_podr as kod_podr 
,:kod_folders as kod_folders 
 
from dual ) 
 
where 
kod_folders=:kod_folders 
;
end;
</update-text>
      <events>
        <useaction event-name="object-save" action-type="execute-update" call="ur_folders_sync_dat_arh">
          <column table="this" column="kod_folders" />
        </useaction>
      </events>
      <scheme>
        <table name="ur_folders" as="ur_folders">
          <columns>
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="vvod" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="not_vvod" type="number" title="" visible="0" />
            <column name="kod_podr" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" visible="0" />
            <column name="vvod_x_n" type="string" title="Способ учета задолженности" visible="0" />
            <column name="kod_podr_x_n" type="string" title="Отделение" visible="0" />
            <column name="kodp_new_val" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_folders_del_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_folders_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_folders_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_folders.kodp as kodp, /*number*/
ur_folders.vvod as vvod, /*number*/
ur_folders.not_vvod as not_vvod, /*number*/
ur_folders.kod_podr as kod_podr, /*number*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
vvod_x_n.name as vvod_x_n, /*Способ учета задолженности*//*string*/
kod_podr_x_n.name as kod_podr_x_n, /*Отделение*//*string*/
ur_folders.kodp_new_val as kodp_new_val, /*number*/
ur_folders.is_new as is_new, /*number*/
ur_folders.is_not_new as is_not_new, /*number*/
qube.ur_folders_del_vld1 as ur_folders_del_vld, /*Валидация удаления папки*//*string*/
ur_folders.kod_folders as kod_folders/*number*//*key*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
max( case  when ( nvl( (nullif( nvl( qube.ur_pretenz_count_old1 ,0)  +nvl( qube.ur_pret_count1 ,0) ,0) )  ,0)!=0 )  then 'Есть претензии' when ( nvl( qube.ur_mat_count1 ,0)!=0 )  then 'Есть материалы переданные в суд' end )  as ur_folders_del_vld1/*Валидация удаления папки*//*string*/

from (
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
(
(
--
select qube.kod_folders as kod_folders, /*number*//*key*/
qube.ur_mat_count1 as ur_mat_count1, /*number*/
qube.ur_pret_count1 as ur_pret_count1, /*number*/
qube.ur_pretenz_count_old1 as ur_pretenz_count_old1/*number*/

from (
--
select un.kod_folders as kod_folders, /*number*//*key*/
sum(un.ur_mat_count1)  as ur_mat_count1, /*number*/
sum(un.ur_pret_count1)  as ur_pret_count1, /*number*/
sum(un.ur_pretenz_count_old1)  as ur_pretenz_count_old1/*number*/

from (
(
(
--
select ur_folders.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders
--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_mat_a_d.kod_folders as kod_folders, /*number*//*key*/
ur_mat_a_d.cnt as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat_a_d
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_mat_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pret_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
ur_pret_a_d.cnt as ur_pret_count1, /*number*/
null as ur_pretenz_count_old1/*number*/

from (
--ur_pret
select a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pret
a
--\ur_pret
)
ur_pret_a_d
--\ur_pret
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pret_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
union all
(
--
select ur_pretenz_a_d.kod_folders as kod_folders, /*number*//*key*/
null as ur_mat_count1, /*number*/
null as ur_pret_count1, /*number*/
ur_pretenz_a_d.cnt as ur_pretenz_count_old1/*number*/

from (
--ur_pretenz
select a.kod_pretenz as kod_pretenz, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
1 as cnt/*number*/

from ur_pretenz
a
--\ur_pretenz
)
ur_pretenz_a_d
--\ur_pretenz
left outer join
(
--ur_folders
select a.kod_folders as kod_folders/*number*//*key*/

from (select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
)
ur_folders on ur_pretenz_a_d.kod_folders = ur_folders.kod_folders--\ur_folders
where
ur_folders.kod_folders is not null )
--\
)
--\
)
un
--\
 group by
un.kod_folders/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_folders/*number*//*key*/
)
qube
--\
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.vvod as vvod, /**//*number*/
a.kod_podr as kod_podr, /*number*/
kod_isp.kodp as kodp_new_val, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_folders as kod_folders,a.kodp as kodp,a.vvod as vvod,a.kod_podr as kod_podr,0 as is_new,1 as is_not_new,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n10 as vvod,t.n11 as kod_podr,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
a
--\(select a.kod_folders as kod_folders,a.kodp as kodp,a.vvod as vvod,a.kod_podr as kod_podr,0 as is_new,1 as is_not_new,a.kod_isp as kod_isp  from ur_folders a where not exists (select * from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and a.kod_folders=t.f2 ) and   a.kod_folders in :kod_folders_prm   union all  select t.n1 as kod_folders,t.n2 as kodp,t.n10 as vvod,t.n11 as kod_podr,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new,t.n8 as kod_isp  from rr_temp t where t.skod ='ur_folders' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_folders_prm )
left outer join
(
--ur_isp
select a.kod_isp as kod_isp, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_isp
a
--\ur_isp
)
kod_isp on a.kod_isp = kod_isp.kod_isp--\ur_isp
)
ur_folders on ur_folders.kod_folders = qube.kod_folders--\ur_folders
left outer join
(
--kr_org
select a.kodp as kodp, /**//*number*//*key*/
a.name as name/*Отделение*//*string*/

from kr_org
a
--\kr_org
)
kod_podr_x_n on ur_folders.kod_podr = kod_podr_x_n.kodp--\kr_org
left outer join
(
--ur_folders_vvod
select a.kod as kod, /*number*//*key*/
a.name as name/*Вид суммы*//*string*/

from (
      select 0 as kod,'По платежным документам' as name from dual union all
      select 1,'Ручной ввод' from dual
    )a
--\folders_vvod
)
vvod_x_n on ur_folders.vvod = vvod_x_n.kod--\ur_folders_vvod
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on ur_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" parent-table="ur_folders" parent-key="kod_folders" is-ms-upd="1" key-dimension="kod_mat">
      <select-text>
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.pio_date as pio_date, /*Дата поступления материалов в ПИО*//*date*/
ur_mat.kod_emp as kod_emp, /*Исполнитель ПИО*//*number*/
qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
ur_mat.num_reg as num_reg, /*Номер иска*//*string*/
ur_mat.kod_doc as kod_doc, /*number*/
kod_doc.is_peresmotr as is_peresmotr, /*number*/
ur_mat.kod_subject as kod_subject, /*number*/
ur_mat.kod_parent as kod_parent, /*Обжалование*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_mat_pr_sch_gp_vld1 as ur_mat_pr_sch_gp_vld, /*string*/
qube.ur_mat_pr_sch_peni_vld1 as ur_mat_pr_sch_peni_vld, /*string*/
qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
ur_mat.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с*//*number*/
ur_mat.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности по*//*number*/
ur_mat.osnreal as osnreal, /*Основная реал.*//*number*/
ur_mat.peni as peni, /*Проценты (пени)*//*number*/
qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
ur_mat.ogr as ogr, /*Расх. за введ. огранич. реж. энергопотребл.*//*number*/
ur_mat.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*Оплата до вынес. реш. суда*//*number*/
qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp, /*Сумма гос. пошлины*//*number*/
ur_mat.dat_otv as dat_otv, /*Дата отправки документов ответчику*//*date*/
ur_mat.kod_sud as kod_sud, /*Суд / судебный участок*//*number*/
ur_mat.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
ur_mat.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
ur_mat.type_rassm as type_rassm, /*Порядок рассмотрения*//*number*/
ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
ur_mat.link_delo as link_delo, /*Гиперссылка*//*string*/
ur_mat.kod_scan as kod_scan, /*Файл*//*number*/
ur_mat.prim as prim, /*Примечание*//*string*/
ur_mat.is_not_new as is_not_new, /*number*/
ur_mat.dat_arh as dat_arh, /*Дата архивации*//*date*/
kod_emp_x_n.fio as kod_emp_x_n, /*Исполнитель ПИО*//*string*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
kod_parent_x_n.name as kod_parent_x_n, /*Обжалование*//*string*/
kod_sud_x_n.name as kod_sud_x_n, /*Суд / судебный участок*//*string*/
type_rassm_x_n.name as type_rassm_x_n, /*Порядок рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_folders as kod_folders, /*number*/
ur_mat.dat_otz as dat_otz, /*Дата возврата*//*date*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select ovr1.kod_mat as kod_mat, /*number*/
stragg_dist(ovr1.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
max(ovr1.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr2 is null )  and (( nvl( ovr1.expr3 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на ГП' end )  as ur_mat_pr_sch_gp_vld1, /*string*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr4 is null )  and (( nvl( ovr1.expr5 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на проценты(пени)' end )  as ur_mat_pr_sch_peni_vld1, /*string*/
sum(ovr1.ur_mat_zadol_po_isku1)  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
max(ovr1.mat_peni_period_str1)  as mat_peni_period_str1, /*Период пени*//*string*/
sum(ovr1.ur_mat_ostatok_zadol_do_resch1)  as ur_mat_ostatok_zadol_do_resch1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(ovr1.ur_mat_sum_gp1)  as ur_mat_sum_gp1, /*Сумма гос. пошлины*//*number*/
sum(ovr1.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max(ovr1.ur_dp_exists_vld1)  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
 nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0)  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
 vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 )  as mat_peni_period_str1, /*Период пени*//*string*/
 nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0)  as ur_mat_ostatok_zadol_do_resch1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Сумма гос. пошлины*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
 case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end  as ur_dp_exists_vld1, /*Валидация (наличие привязанных документов)*//*string*/
 max( qube.ur_hist_mat_dec_dat_entry1 )  over(  partition by kod_mat.kod_mat )  as expr1, 
 max( qube.ur_dp_pr_sch_gp1 )  over(  partition by kod_mat.kod_mat )  as expr2, 
 sum( qube.ur_hist_mat_dec_gp_otv1 )  over(  partition by kod_mat.kod_mat )  as expr3, 
 max( qube.ur_dp_pr_sch_peni1 )  over(  partition by kod_mat.kod_mat )  as expr4, 
 sum( qube.ur_hist_mat_dec_peni1 )  over(  partition by kod_mat.kod_mat )  as expr5

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
min(un.ur_dp_pr_sch_gp1)  as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
min(un.ur_dp_pr_sch_peni1)  as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_dec_peni1)  as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_sum_gp1)  as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1, /*number*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.name as kr_dog_name1, /*Договор*//*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat on kod_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null )  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
ur_dogplat_a_d.pr_sch_gp as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
ur_dogplat_a_d.pr_sch_peni as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt, /*number*/
 case  when (a.vid_real = 9)  then 1 end  as pr_sch_gp, /*Признак наличия счета на ГП*//*number*/
 case  when ((a.vid_real = 7) )  then 1 end  as pr_sch_peni/*Признак наличия счета на проценты(пени)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.peni as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.peni as peni, /*% за польз. чуж. ден. ср.*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.dat_entry as dat_entry_dec/*Дата вст. реш. в зак. силу*//*date*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat on kod_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.sum_gp as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.sum_gp as sum_gp, /*Оплачено госпошлины при подаче*//*number*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat
--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_mat_peni_period_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
ur_mat_peni_period_a_d.name as mat_peni_period_ym1/*Период*//*string*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.dat_arh as dat_arh/*Дата архивации*//*date*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_mat_peni_period_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
( 1=1 )  {  and ((ur_mat.dat_arh is null )  and ( nvl( :no_arh  ,0)=1 ) )  }  and (ur_mat.kod_folders = :fk_kod_folders )  and (ur_mat.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat on kod_mat.kod_mat = qube.kod_mat--\ur_mat
)
ovr1
--\
 group by
ovr1.kod_mat/*number*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_doc as kod_doc, /*number*/
a.num_reg as num_reg, /*Номер иска*//*string*/
a.dat_otv as dat_otv, /*Дата отправки документов ответчику*//*date*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
a.dat_otz as dat_otz, /*Дата возврата*//*date*/
a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
a.kod_subject as kod_subject, /*number*/
a.prim as prim, /*Примечание*//*string*/
a.kod_sud as kod_sud, /*number*/
a.kod_parent as kod_parent, /*number*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.kod_emp as kod_emp, /*number*/
a.osnreal as osnreal, /*number*/
a.period_zadol_s_vvod as period_zadol_s_vvod, /*number*/
a.period_zadol_po_vvod as period_zadol_po_vvod, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni, /*number*/
a.link_delo as link_delo, /*Гиперссылка*//*string*/
a.kod_scan as kod_scan, /*number*/
a.dat_arh as dat_arh, /*Дата архивации*//*date*/
a.type_rassm as type_rassm, /*Порядок рассмотрения*//*number*/
a.pio_date as pio_date, /*date*/
kod_folders.kod_sdp as kod_sdp, /*number*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--vr_type_rassm
select u.kod_type_rassm as kod_type_rassm, /*number*//*key*/
u.name as name/*string*/

from (
(
(
--
select 1 as kod_type_rassm, /*number*//*key*/
'Упрощенное производство' as name/*string*/

from dual

--\dual
)
--\
union all
(
--
select 2, /*number*//*key*/
'Общий порядок'/*string*/

from dual

--\dual
)
--\
union all
(
--
select 3, /*number*//*key*/
'Приказное производство'/*string*/

from dual

--\dual
)
--\
)
--\
)
u
--\
)
type_rassm_x_n on type_rassm_x_n.kod_type_rassm = ur_mat.type_rassm--\vr_type_rassm
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_parent_x_n on ur_mat.kod_parent = kod_parent_x_n.kod_mat--\ur_mat
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_mat.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
 case  when (a.prizn &gt; 1)  then 1 end  as is_peresmotr/*number*/

from us_doc
a
--\us_doc
)
kod_doc on ur_mat.kod_doc = kod_doc.kod_doc--\us_doc
--\
</select-text>
      <columns>
        <column name="kod_mat" table="ur_mat" type="number" title="" parname="cur_kod_mat" ColumnVisible="0" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n1" />
        <column name="pio_date" table="ur_mat" type="date" title="Дата поступления материалов в ПИО" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="pio_date" temp-col-name="d1" />
        <column name="kod_emp" table="ur_mat" type="number" title="Исполнитель ПИО" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_emp" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="fio">fio</column>
                </order>
                <select>--a
select <column table="a" column="kod_emp" key="1" as="kod_emp" used="1" type="number" sourcetable="./a/a/a" sourcecolumn="kod_emp" into="n1">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="fio" as="fio" key="0" used="1" type="string" title="Юрист" sourcetable="./a/a/a" sourcecolumn="fio" into="s1">a.fio as fio/*Юрист*//*string*/
</column></select>
                <from>
from <query name="kr_employee_urists" as="a" path="./a/a" order="fio" haskeys="1" used="1">(
<order notext="1"><column column="fio">fio</column></order><select>--kr_employee_urists
select <column table="a" column="kod_emp" key="1" as="kod_emp" used="1" type="number" sourcetable="./a/a/a" sourcecolumn="kod_emp">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="fio" title="Юрист" vid="1" as="fio" key="0" used="1" type="string" sourcetable="./a/a/a" sourcecolumn="fio">a.fio as fio/*Юрист*//*string*/
</column></select><from>
from <query name="kr_employee" as="a" path="./a/a/a" haskeys="1" used="1">(
<select>--kr_employee
select <column table="a" column="kod_emp" type="number" comment="код сотрудника" as="kod_emp" key="1" fixed="1" sourcetable="./a/a/a" sourcecolumn="kod_emp" used="1">a.kod_emp as kod_emp, /*number*//*key*/
</column><column table="a" column="kodp" type="number" title="" comment="код абонента (организации)" as="kodp" key="0" sourcetable="./a/a/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*/
</column><column table="a" column="kod_dolzhfun" type="number" comment="код должностной функции" as="kod_dolzhfun" reference="kk_dolzhfun" refcol="kod_dolzhfun" key="0" sourcetable="./a/a/a" sourcecolumn="kod_dolzhfun" used="1">a.kod_dolzhfun as kod_dolzhfun, /*number*/
</column><column table="a" column="fio" type="string" title="ФИО" comment="фио" vid="1" as="fio" key="0" sourcetable="./a/a/a" sourcecolumn="fio" used="1">a.fio as fio/*ФИО*//*string*/
</column></select><from>
from <table name="kr_employee" as="a" used="1">kr_employee
a
--\kr_employee
</table></from>)
a
--\kr_employee
</query></from><where>where
<call function="and" pth="" type="bool"><call function="in" pth="" type="bool">(<column table="a" column="kodp">a.kodp</column><text txtype="func"> in </text><query path="./a/a" used="1">(
<select>--
select <column table="b" column="kodp" as="kodp" fixed="1" key="1" keypath=".kodp" used="1" type="number" sourcetable="./a/a/b/a" sourcecolumn="kodp">b.kodp as kodp/*number*//*key*/
</column></select><from>
from <query name="kr_org_branch3" as="b" path="./a/a/b" used="1">(
<select>--kr_org_branch3
select <column table="a" column="kodp" as="kodp" type="number" title="" key="1" fixed="1" used="1" sourcetable="./a/a/b/a" sourcecolumn="kodp">a.kodp as kodp/**//*number*//*key*/
</column></select><from>
from <query name="kr_org" as="a" path="./a/a/b/a" haskeys="1" used="1">(
<select>--kr_org
select <column table="a" column="kodp" type="number" title="" as="kodp" key="1" fixed="1" sourcetable="./a/a/b/a" sourcecolumn="kodp" used="1">a.kodp as kodp, /**//*number*//*key*/
</column><column table="a" column="kod_parent" type="number" as="kod_parent" reference="kr_org" refcol="kodp" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_separator" type="number" as="kod_separator" reference="kk_orgseparator" refcol="kod_separator" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_separator" used="1">a.kod_separator as kod_separator, /*number*/
</column><column table="a" column="kod_ecls" type="number" as="kod_ecls" reference="kk_cls" refcol="kod_ecls" key="0" sourcetable="./a/a/b/a" sourcecolumn="kod_ecls" used="1">a.kod_ecls as kod_ecls/*number*/
</column></select><from>
from <table name="kr_org" as="a" used="1">kr_org
a
--\kr_org
</table></from>)
a
--\kr_org
</query></from><connect>connect by nocycle
<call function="and" pth="" type="bool"><call function="=" pth="" type="bool">(<column table="a" column="kodp" prior="1">prior a.kodp</column><text txtype="func"> = </text><column table="a" column="kod_parent">a.kod_parent</column>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="not" pth="" optional="1" type="bool">(<text txtype="func"> not </text><call function="and" pth="" type="bool">(<call function="=" pth="" type="bool">(<column column="kod_separator" table="a">a.kod_separator</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="case" pth="">(<text txtype="func"> case </text><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="not in" pth="" type="bool">(<column column="kodp" table="a">a.kodp</column><text txtype="func"> not in </text><call function="array" pth="">(<const><text txtype="const"> :dep </text></const>) </call>) </call><text txtype="func"> then </text><const><text>1</text></const></call><call function="else" pth="0" type="else"><text txtype="func"> else </text><const><text>0</text></const></call><text txtype="func"> end </text>) </call><text txtype="func"> = </text><const><text>1</text></const>) </call>) </call>) </call><text txtype="func"> } </text></call></connect><start>
start with <call function="and" pth="" type="bool"><call function="=" pth="" type="bool">(<column table="a" column="kod_separator">a.kod_separator</column><text txtype="func"> = </text><const><text>1</text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_ecls">a.kod_ecls</column><text txtype="func"> = </text><const><text>4</text></const>) </call></call></start>)
b
--\kr_org_branch3
</query></from>)
--\
</query>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_dolzhfun">a.kod_dolzhfun</column><text txtype="func"> = </text><const><text>-1</text></const>) </call></call></where><order>
order by fio</order>)
a
--\kr_employee_urists
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_emp" key="1" as="kod_emp" thissrc="kod_emp">a.kod_emp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_emp" key="1" as="kod_emp" thissrc="kod_emp">a.kod_emp</column><text txtype="func"> ) like lower( </text><const><text>:kod_emp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="fio" as="fio" thissrc="fio">a.fio</column><text txtype="func"> ) like lower( </text><const><text>:fio_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by fio</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" haskeys="1" as="a">
              <queries>
                <query order="fio" class="1" timestamp="13.02.2017 19:36:42" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\kr_employee.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="dep" type="number">
                      <!--<const>(102276621)</const>-->
                    </param>
                    <param name="pk_prm" type="array" />
                    <param name="kod_emp_filter" type="string" />
                    <param name="fio_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_emp" key="1" as="kod_emp" />
                    <column table="a" column="fio" as="fio" />
                  </select>
                  <from>
                    <query name="kr_employee_urists" as="a">
                      <withparams>
                        <call function="array">
                          <useparam name="dep" />
                        </call>
                      </withparams>
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_emp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_emp" />
                        <useparam name="kod_emp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="fio" />
                        <useparam name="fio_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="fio" />
                  </order>
                  <withparams>
                    <useparam name="dep" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_emp_filter" />
                    <useparam name="fio_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="dep" type="number">
                  <!--<const>(102276621)</const>-->
                  <const>:dep </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_emp_filter" type="string">
                  <const>:kod_emp_filter </const>
                </param>
                <param name="fio_filter" type="string">
                  <const>:fio_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="dep_pio" parname="dep" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_emp_x_n.fio as kod_emp_x_n, /*Исполнитель ПИО*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_emp as kod_emp/*number*/

from (select a.kod_mat as kod_mat,a.kod_emp as kod_emp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n2 as kod_emp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_emp as kod_emp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n2 as kod_emp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_mat.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_emp_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="kr_dog_name" table="ur_mat" type="string" title="Договор" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
stragg_dist(qube.kr_dog_name1)  as kr_dog_name1/*Договор*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1/*Договор*//*string*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1/*Договор*//*string*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1/*Договор*//*string*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.name as kr_dog_name1/*Договор*//*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1/*string*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="num_reg" table="ur_mat" type="string" title="Номер иска" ColumnEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="num_reg" temp-col-name="s1" />
        <column name="kod_doc" table="ur_mat" type="number" title="Документ" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_doc" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_doc" into="n1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" used="1" sourcetable="./a/a" sourcecolumn="abbr" into="s1">a.abbr as abbr, /*Аббревиатура*//*string*/
</column><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" used="1" sourcetable="./a/a" sourcecolumn="name" into="s2">a.name as name/*Вид документа*//*string*/
</column></select>
                <from>
from <query name="us_doc" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*/
</column><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name, /*Вид документа*//*string*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from>)
a
--\us_doc
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp">a.kod_sdp</column><text txtype="func"> in </text><const><text>:kod_sdp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" thissrc="kod_doc">a.kod_doc</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" thissrc="kod_doc">a.kod_doc</column><text txtype="func"> ) like lower( </text><const><text>:kod_doc_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" thissrc="abbr">a.abbr</column><text txtype="func"> ) like lower( </text><const><text>:abbr_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" type="string" title="Вид документа" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" haskeys="1" as="a">
              <queries>
                <query class="1" title="Документ" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_doc.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kod_sdp" type="number" column="kod_sdp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_doc_filter" type="string" />
                    <param name="abbr_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" />
                    <column table="a" column="abbr" type="string" title="Аббревиатура" as="abbr" key="0" />
                    <column table="a" column="name" type="string" title="Вид документа" as="name" key="0" />
                  </select>
                  <from>
                    <query name="us_doc" as="a" title="Документ" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="in" optional="1">
                          <column table="a" column="kod_sdp" />
                          <useparam name="kod_sdp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_doc" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_doc" />
                        <useparam name="kod_doc_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="abbr" />
                        <useparam name="abbr_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kod_sdp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_doc_filter" />
                    <useparam name="abbr_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_sdp" type="number" column="kod_sdp">
                  <const>:kod_sdp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_doc_filter" type="string">
                  <const>:kod_doc_filter </const>
                </param>
                <param name="abbr_filter" type="string">
                  <const>:abbr_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kod_sdp" type="number" column="kod_sdp" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_doc.is_peresmotr as is_peresmotr, /*number*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc/*number*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
 case  when (a.prizn &gt; 1)  then 1 end  as is_peresmotr/*number*/

from us_doc
a
--\us_doc
)
kod_doc on ur_mat.kod_doc = kod_doc.kod_doc--\us_doc
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="is_peresmotr" table="ur_mat" />
            <dependant name="kod_doc_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="is_peresmotr" table="kod_doc" type="number" title="" parname="is_peresmotr" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_doc.is_peresmotr as is_peresmotr, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc/*number*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
 case  when (a.prizn &gt; 1)  then 1 end  as is_peresmotr/*number*/

from us_doc
a
--\us_doc
)
kod_doc on ur_mat.kod_doc = kod_doc.kod_doc--\us_doc
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_subject" table="ur_mat" type="number" title="Предмет" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_subject" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_subject" as="kod_subject" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_subject" into="n1">a.kod_subject as kod_subject, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Предмет иска" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Предмет иска*//*string*/
</column></select>
                <from>
from <query name="us_subject" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_subject
select <column table="a" column="kod_subject" type="number" key="1" as="kod_subject" used="1" sourcetable="./a/a" sourcecolumn="kod_subject">a.kod_subject as kod_subject, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Предмет иска" vid="1" as="name" used="1" sourcetable="./a/a" sourcecolumn="name" key="0">a.name as name/*Предмет иска*//*string*/
</column></select><from>
from <table name="us_subject" as="a" title="Предмет" used="1">us_subject
a
--\us_subject
</table></from>)
a
--\us_subject
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_subject" as="kod_subject" title="" key="1" thissrc="kod_subject">a.kod_subject</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_subject" as="kod_subject" title="" key="1" thissrc="kod_subject">a.kod_subject</column><text txtype="func"> ) like lower( </text><const><text>:kod_subject_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Предмет иска" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" haskeys="1" as="a">
              <queries>
                <query class="1" title="Предмет" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\us_subject.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_subject_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_subject" as="kod_subject" title="" key="1" />
                    <column table="a" column="name" as="name" title="Предмет иска" />
                  </select>
                  <from>
                    <query name="us_subject" as="a" title="Предмет" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_subject" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_subject" />
                        <useparam name="kod_subject_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_subject_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_subject_filter" type="string">
                  <const>:kod_subject_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_subject as kod_subject/*number*/

from (select a.kod_mat as kod_mat,a.kod_subject as kod_subject  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n4 as kod_subject  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_subject as kod_subject  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n4 as kod_subject  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_subject_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="kod_parent" table="ur_mat" type="number" title="Обжалование" ClientEditable="is_peresmotr" is-user-editable="1" ClientMandatory="is_peresmotr" is-updateable="1" is-updateable-ext="1" update-target="kod_parent" temp-col-name="n5">
          <sel-list-compiled>
            <root>
              <query class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_mat" into="n1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="name" as="name" key="0" used="1" type="string" title="Иск" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" into="s1">a.name as name/*Иск*//*string*/
</column></select>
                <from>
from <query name="ur_mat" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_folders" type="number" as="kod_folders" reference="ur_folders" refcol="kod_folders" key="0" sourcetable="./a/a" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*/
</column><call function="||" as="name" title="Иск" key="0" pth="" type="string" used="1" sourcetable="./a/a/kod_doc" sourcecolumn="abbr"><column table="kod_doc" column="abbr">kod_doc.abbr</column><text txtype="func"> || </text><const><text>'  '</text></const><text txtype="func"> || </text><column table="a" column="num_delo">a.num_delo</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Иск*//*string*/
</call></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="us_doc" as="kod_doc" join="left outer" path="./a/a/kod_doc" haskeys="1" used="1">left outer join
(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a/kod_doc" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from><call function="=" type="bool">)
kod_doc on <column table="a" column="kod_doc">a.kod_doc</column><text txtype="func"> = </text><column table="kod_doc" column="kod_doc">kod_doc.kod_doc</column></call>--\us_doc
</query></from>)
a
--\ur_mat
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><const><text>:p_kod_fold </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> ) like lower( </text><const><text>:kod_mat_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" haskeys="1" as="a">
              <queries>
                <query class="1" timestamp="05.06.2017 19:40:30" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\ur_mat.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param type="number" name="p_kod_fold" column="kod_folders" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_mat_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_mat" as="kod_mat" key="1" fixed="1" />
                    <column table="a" column="name" as="name" key="0" />
                  </select>
                  <from>
                    <query name="ur_mat" as="a" title="Материалы переданные в суд" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="=">
                        <column table="a" column="kod_folders" />
                        <useparam name="p_kod_fold" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="kod_mat_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="p_kod_fold" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_mat_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param type="number" name="p_kod_fold" column="kod_folders">
                  <const>:p_kod_fold </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_mat_filter" type="string">
                  <const>:kod_mat_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param type="number" name="p_kod_fold" column="kod_folders" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_parent_x_n.name as kod_parent_x_n, /*Обжалование*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_parent as kod_parent/*number*/

from (select a.kod_mat as kod_mat,a.kod_parent as kod_parent  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n5 as kod_parent  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_parent as kod_parent  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n5 as kod_parent  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_parent_x_n on ur_mat.kod_parent = kod_parent_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_parent_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="ur_hist_mat_dec_dat_entry" table="ur_mat" type="date" title="Дата вст. реш. в зак. силу" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max(qube.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1/*Дата вст. реш. в зак. силу*//*date*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1/*Дата вст. реш. в зак. силу*//*date*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1/*Дата вст. реш. в зак. силу*//*date*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1/*Дата вст. реш. в зак. силу*//*date*/

from (
(
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1/*Дата вст. реш. в зак. силу*//*date*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.dat_entry as dat_entry_dec/*Дата вст. реш. в зак. силу*//*date*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_dec_dat_entry1/*date*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_mat_pr_sch_gp_vld" table="ur_mat" type="string" title="Дата вст. реш. в зак. силу" parname="ur_mat_pr_sch_gp_vld" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_pr_sch_gp_vld1 as ur_mat_pr_sch_gp_vld, /*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select ovr1.kod_mat as kod_mat, /*number*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr2 is null )  and (( nvl( ovr1.expr3 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на ГП' end )  as ur_mat_pr_sch_gp_vld1/*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
 max( qube.ur_hist_mat_dec_dat_entry1 )  over(  partition by kod_mat.kod_mat )  as expr1, 
 max( qube.ur_dp_pr_sch_gp1 )  over(  partition by kod_mat.kod_mat )  as expr2, 
 sum( qube.ur_hist_mat_dec_gp_otv1 )  over(  partition by kod_mat.kod_mat )  as expr3

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
min(un.ur_dp_pr_sch_gp1)  as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.pr_sch_gp as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
 case  when (a.vid_real = 9)  then 1 end  as pr_sch_gp/*Признак наличия счета на ГП*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dp_pr_sch_gp1, /*number*/
ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1/*Гос. пошлина, взысканная с ответчика*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.dat_entry as dat_entry_dec/*Дата вст. реш. в зак. силу*//*date*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
kod_mat on kod_mat.kod_mat = qube.kod_mat--\ur_mat
)
ovr1
--\
 group by
ovr1.kod_mat/*number*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_mat_pr_sch_peni_vld" table="ur_mat" type="string" title="Дата вст. реш. в зак. силу" parname="ur_mat_pr_sch_peni_vld" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_pr_sch_peni_vld1 as ur_mat_pr_sch_peni_vld, /*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select ovr1.kod_mat as kod_mat, /*number*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr2 is null )  and (( nvl( ovr1.expr3 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на проценты(пени)' end )  as ur_mat_pr_sch_peni_vld1/*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
 max( qube.ur_hist_mat_dec_dat_entry1 )  over(  partition by kod_mat.kod_mat )  as expr1, 
 max( qube.ur_dp_pr_sch_peni1 )  over(  partition by kod_mat.kod_mat )  as expr2, 
 sum( qube.ur_hist_mat_dec_peni1 )  over(  partition by kod_mat.kod_mat )  as expr3

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1/*% за польз. чуж. ден. ср.*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1/*% за польз. чуж. ден. ср.*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
min(un.ur_dp_pr_sch_peni1)  as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
sum(un.ur_hist_mat_dec_peni1)  as ur_hist_mat_dec_peni1/*% за польз. чуж. ден. ср.*//*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.pr_sch_peni as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_peni1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
 case  when ((a.vid_real = 7) )  then 1 end  as pr_sch_peni/*Признак наличия счета на проценты(пени)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dp_pr_sch_peni1, /*number*/
ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat_dec_a_d.peni as ur_hist_mat_dec_peni1/*% за польз. чуж. ден. ср.*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.peni as peni, /*% за польз. чуж. ден. ср.*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.dat_entry as dat_entry_dec/*Дата вст. реш. в зак. силу*//*date*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_peni1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
kod_mat on kod_mat.kod_mat = qube.kod_mat--\ur_mat
)
ovr1
--\
 group by
ovr1.kod_mat/*number*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_mat_zadol_po_isku" table="ur_mat" type="number" title="Задолженность по иску" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  as ur_mat_zadol_po_isku1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="period_zadol_s_vvod" table="ur_mat" type="number" title="Период задолженности с" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="period_zadol_s_vvod" temp-col-name="n6">
          <sel-list-compiled>
            <root>
              <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="ym">ym</column>
                </order>
                <select>--a
select <column table="a" column="ym" key="1" as="ym" used="1" type="number" into="n1">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период" into="s1">a.name as name/*Период*//*string*/
</column></select>
                <from>
from <query name="spr_time_ym" as="a" path="./a/a" order="ym desc" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym
select <column table="a" column="ym" key="1" as="ym" used="1" type="number">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период">a.name as name/*Период*//*string*/
</column></select><from>
from <query name="spr_time_ym_pre" as="a" path="./a/a/a" order="ym" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym_pre
select <call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text> as ym, /*number*//*key*/
</call><call function="ym to char" as="name" title="Период" key="0" group="max" pth="" type="string" used="1">max(<text txtype="func"> trim(to_char( </text><call function="date to ym" as="ym" key="1" pth="" type="number" thissrc="ym">(<text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>) </call><text txtype="func"> ,'9999.99')) </text>)  as name/*Период*//*string*/
</call></select><from>
from <table name="vv_day" as="a" used="1">vv_day
a
--\vv_day
</table></from><group> group by
<call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>/*number*//*key*/
</call></group><order>
order by ym</order>)
a
--\spr_time_ym_pre
</query></from><order>
order by ym desc</order>)
a
--\spr_time_ym
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="le" pth="" type="bool">(<column table="a" column="ym">a.ym</column><text txtype="func"> &lt;= </text><call function="date to ym" pth="" type="number">(<text txtype="func"> to_number(to_char( </text><call function="sysdate" pth="" type="date">(<text txtype="func"> sysdate </text>) </call><text txtype="func"> ,'YYYYMM'))/100 </text>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> in </text><const><text>:obj_name </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> ) like lower( </text><const><text>:ym_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by ym desc</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" as="a">
              <queries>
                <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="obj_name" type="array" />
                    <param name="ym_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="ym" key="1" as="ym" />
                    <column table="a" column="name" vid="1" is-name="1" as="name" />
                  </select>
                  <from>
                    <query name="spr_time_ym" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="le">
                        <column table="a" column="ym" />
                        <call function="date to ym">
                          <call function="sysdate" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="name" />
                        <useparam name="obj_name" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="ym_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="ym" />
                  </order>
                  <order>
                    <column column="ym" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="obj_name" />
                    <useparam name="ym_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="obj_name" type="array">
                  <const>:obj_name </const>
                </param>
                <param name="ym_filter" type="string">
                  <const>:ym_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars />
        </column>
        <column name="period_zadol_po_vvod" table="ur_mat" type="number" title="Период задолженности по" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="period_zadol_po_vvod" temp-col-name="n7">
          <sel-list-compiled>
            <root>
              <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="ym">ym</column>
                </order>
                <select>--a
select <column table="a" column="ym" key="1" as="ym" used="1" type="number" into="n1">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период" into="s1">a.name as name/*Период*//*string*/
</column></select>
                <from>
from <query name="spr_time_ym" as="a" path="./a/a" order="ym desc" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym
select <column table="a" column="ym" key="1" as="ym" used="1" type="number">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период">a.name as name/*Период*//*string*/
</column></select><from>
from <query name="spr_time_ym_pre" as="a" path="./a/a/a" order="ym" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym_pre
select <call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text> as ym, /*number*//*key*/
</call><call function="ym to char" as="name" title="Период" key="0" group="max" pth="" type="string" used="1">max(<text txtype="func"> trim(to_char( </text><call function="date to ym" as="ym" key="1" pth="" type="number" thissrc="ym">(<text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>) </call><text txtype="func"> ,'9999.99')) </text>)  as name/*Период*//*string*/
</call></select><from>
from <table name="vv_day" as="a" used="1">vv_day
a
--\vv_day
</table></from><group> group by
<call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>/*number*//*key*/
</call></group><order>
order by ym</order>)
a
--\spr_time_ym_pre
</query></from><order>
order by ym desc</order>)
a
--\spr_time_ym
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="le" pth="" type="bool">(<column table="a" column="ym">a.ym</column><text txtype="func"> &lt;= </text><call function="date to ym" pth="" type="number">(<text txtype="func"> to_number(to_char( </text><call function="sysdate" pth="" type="date">(<text txtype="func"> sysdate </text>) </call><text txtype="func"> ,'YYYYMM'))/100 </text>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> in </text><const><text>:obj_name </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> ) like lower( </text><const><text>:ym_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by ym desc</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" as="a">
              <queries>
                <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="obj_name" type="array" />
                    <param name="ym_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="ym" key="1" as="ym" />
                    <column table="a" column="name" vid="1" is-name="1" as="name" />
                  </select>
                  <from>
                    <query name="spr_time_ym" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="le">
                        <column table="a" column="ym" />
                        <call function="date to ym">
                          <call function="sysdate" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="name" />
                        <useparam name="obj_name" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="ym_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="ym" />
                  </order>
                  <order>
                    <column column="ym" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="obj_name" />
                    <useparam name="ym_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="obj_name" type="array">
                  <const>:obj_name </const>
                </param>
                <param name="ym_filter" type="string">
                  <const>:ym_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars />
        </column>
        <column name="osnreal" table="ur_mat" type="number" title="Основная реал." ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="osnreal" temp-col-name="n8">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum( nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0) )  as ur_mat_ostatok_zadol_do_resch1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ur_mat_zadol_po_isku" table="ur_mat" />
            <dependant name="ur_mat_ostatok_zadol_do_resch" table="ur_mat" />
          </dependants>
        </column>
        <column name="peni" table="ur_mat" type="number" title="Проценты (пени)" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="peni" temp-col-name="n9">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum( nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0) )  as ur_mat_ostatok_zadol_do_resch1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ur_mat_zadol_po_isku" table="ur_mat" />
            <dependant name="ur_mat_ostatok_zadol_do_resch" table="ur_mat" />
          </dependants>
        </column>
        <column name="mat_peni_period_str" table="ur_mat" type="string" title="Период пени" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 ) )  as mat_peni_period_str1/*Период пени*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1/*Период*//*string*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat_peni_period_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_mat_peni_period_a_d.name as mat_peni_period_ym1/*Период*//*string*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat_peni_period_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ogr" table="ur_mat" type="number" title="Расх. за введ. огранич. реж. энергопотребл." is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="ogr" temp-col-name="n10">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum( nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0) )  as ur_mat_ostatok_zadol_do_resch1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ur_mat_zadol_po_isku" table="ur_mat" />
            <dependant name="ur_mat_ostatok_zadol_do_resch" table="ur_mat" />
          </dependants>
        </column>
        <column name="ur_opl_do_resh_vvod" table="ur_mat" type="number" title="Оплата до вынес. реш. суда" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="ur_opl_do_resh_vvod" temp-col-name="n11">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0) )  as ur_mat_ostatok_zadol_do_resch1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ur_mat_ostatok_zadol_do_resch" table="ur_mat" />
          </dependants>
        </column>
        <column name="ur_mat_ostatok_zadol_do_resch" table="ur_mat" type="number" title="Остаток задолженности до вынес. реш. суда" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0) )  as ur_mat_ostatok_zadol_do_resch1/*Расходы за введение ограничения режима энергопотребления*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_mat_sum_gp" table="ur_mat" type="number" title="Сумма гос. пошлины" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_mat_sum_gp1 as ur_mat_sum_gp, /*Сумма гос. пошлины*//*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_mat_sum_gp1)  as ur_mat_sum_gp1/*Сумма гос. пошлины*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1/*Оплачено госпошлины при подаче*//*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1/*Оплачено госпошлины при подаче*//*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_mat_sum_gp1)  as ur_mat_sum_gp1/*Оплачено госпошлины при подаче*//*number*/

from (
(
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.sum_gp as ur_mat_sum_gp1/*Оплачено госпошлины при подаче*//*number*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.sum_gp as sum_gp/*Оплачено госпошлины при подаче*//*number*/

from (select a.kod_mat as kod_mat,a.sum_gp as sum_gp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n18 as sum_gp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.sum_gp as sum_gp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n18 as sum_gp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_otv" table="ur_mat" type="date" title="Дата отправки документов ответчику" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_otv" temp-col-name="d2" />
        <column name="kod_sud" table="ur_mat" type="number" title="Суд / судебный участок" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_sud" temp-col-name="n12">
          <sel-list-compiled>
            <root>
              <query class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="name">name</column>
                  <column column="kod_sud">kod_sud</column>
                </order>
                <select>--a
select <column table="us_sud" column="kod_sud" key="1" as="kod_sud" used="1" type="number" sourcetable="./a/us_sud" sourcecolumn="kod_sud" into="n1">us_sud.kod_sud as kod_sud, /*number*//*key*/
</column><column table="us_sud" column="kod_parent" as="kod_parent" key="0" used="1" type="number" sourcetable="./a/us_sud" sourcecolumn="kod_parent" reference="us_sud" refcol="kod_sud" into="n2">us_sud.kod_parent as kod_parent, /*number*/
</column><column table="us_sud" column="name" title="Судебный участок" as="name" key="0" used="1" type="string" sourcetable="./a/us_sud" sourcecolumn="name" into="s1">us_sud.name as name/*Судебный участок*//*string*/
</column></select>
                <from>
from <query name="us_sud" as="us_sud" path="./a/us_sud" haskeys="1" used="1">(
<select>--us_sud
select <column table="a" column="kod_sud" type="number" key="1" as="kod_sud" sourcetable="./a/us_sud" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Судебный участок" as="name" key="0" sourcetable="./a/us_sud" sourcecolumn="name" used="1">a.name as name, /*Судебный участок*//*string*/
</column><column table="a" column="kod_parent" type="number" as="kod_parent" reference="us_sud" refcol="kod_sud" key="0" sourcetable="./a/us_sud" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent/*number*/
</column></select><from>
from <table name="us_sud" as="a" title="Суд / судебный участок" used="1">us_sud
a
--\us_sud
</table></from>)
us_sud
--\us_sud
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="us_sud" column="kod_sud" key="1" as="kod_sud" thissrc="kod_sud">us_sud.kod_sud</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="kod_sud" key="1" as="kod_sud" thissrc="kod_sud">us_sud.kod_sud</column><text txtype="func"> ) like lower( </text><const><text>:kod_sud_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="kod_parent" as="kod_parent" thissrc="kod_parent">us_sud.kod_parent</column><text txtype="func"> ) like lower( </text><const><text>:kod_parent_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="name" title="Судебный участок" as="name" thissrc="name">us_sud.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by name, kod_sud</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" as="a">
              <queries>
                <query class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_sud_filter" type="string" />
                    <param name="kod_parent_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="us_sud" column="kod_sud" key="1" as="kod_sud" />
                    <column table="us_sud" column="kod_parent" as="kod_parent" />
                    <column table="us_sud" column="name" title="Судебный участок" as="name" />
                  </select>
                  <from>
                    <query name="us_sud" as="us_sud" title="Суд / судебный участок" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_sud" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_sud" />
                        <useparam name="kod_sud_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_parent" />
                        <useparam name="kod_parent_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="name" />
                    <column column="kod_sud" />
                  </order>
                  <order>
                    <column column="name" />
                    <column column="kod_sud" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_sud_filter" />
                    <useparam name="kod_parent_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_sud_filter" type="string">
                  <const>:kod_sud_filter </const>
                </param>
                <param name="kod_parent_filter" type="string">
                  <const>:kod_parent_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sud_x_n.name as kod_sud_x_n, /*Суд / судебный участок*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from (select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_sud_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="dat_doc" table="ur_mat" type="date" title="Дата подачи в суд" is-user-editable="1" Mandatory="dat_otz" is-updateable="1" is-updateable-ext="1" update-target="dat_doc" temp-col-name="d3">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx/*Примерный срок рассмотрения*//*date*/

from (select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="date_rassm_approx" table="ur_mat" />
          </dependants>
        </column>
        <column name="dat_prin" table="ur_mat" type="date" title="Дата принятия документов в суде" is-user-editable="1" Mandatory="qube.ur_hist_mat_count" is-updateable="1" is-updateable-ext="1" update-target="dat_prin" temp-col-name="d4">
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx/*Примерный срок рассмотрения*//*date*/

from (select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="date_rassm_approx" table="ur_mat" />
          </dependants>
        </column>
        <column name="type_rassm" table="ur_mat" type="number" title="Порядок рассмотрения" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="type_rassm" temp-col-name="n13">
          <sel-list-compiled>
            <root>
              <query title="Типы судебного производства" timestamp="19.12.2022 12:56:49" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\vr_type_rassm.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_type_rassm" as="kod_type_rassm" title="" key="1" used="1" type="number" into="n1">a.kod_type_rassm as kod_type_rassm, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="" key="0" used="1" type="string" into="s1">a.name as name/**//*string*/
</column></select>
                <from>
from <query name="vr_type_rassm" as="a" path="./a/a" haskeys="1" used="1">(
<select>--vr_type_rassm
select <column table="u" column="kod_type_rassm" type="number" key="1" as="kod_type_rassm" used="1">u.kod_type_rassm as kod_type_rassm, /*number*//*key*/
</column><column table="u" column="name" type="string" vid="1" is-name="1" as="name" used="1" key="0">u.name as name/*string*/
</column></select><from>
from <query as="u" used="1" path="./a/a/u">(
<query used="1" path="./a/a/u">(
<query union="1" used="1" path="./a/a/u">(
<select>--
select <const as="kod_type_rassm" type="number" used="1" key="1"><text>1</text> as kod_type_rassm, /*number*//*key*/
</const><const as="name" type="string" used="1" key="0"><text>'Упрощенное производство'</text> as name/*string*/
</const></select><from>
from <table name="dual" used="1">dual

--\dual
</table></from>)
--\
</query><query union="1" used="1" path="./a/a/u">union all
(
<select>--
select <const type="number" used="1" key="1"><text>2</text>, /*number*//*key*/
</const><const type="string" used="1" key="0"><text>'Общий порядок'</text>/*string*/
</const></select><from>
from <table name="dual" used="1">dual

--\dual
</table></from>)
--\
</query><query union="1" used="1" path="./a/a/u">union all
(
<select>--
select <const type="number" used="1" key="1"><text>3</text>, /*number*//*key*/
</const><const type="string" used="1" key="0"><text>'Приказное производство'</text>/*string*/
</const></select><from>
from <table name="dual" used="1">dual

--\dual
</table></from>)
--\
</query>)
--\
</query>)
u
--\
</query></from>)
a
--\vr_type_rassm
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_type_rassm" as="kod_type_rassm" title="" key="1" thissrc="kod_type_rassm">a.kod_type_rassm</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_type_rassm" as="kod_type_rassm" title="" key="1" thissrc="kod_type_rassm">a.kod_type_rassm</column><text txtype="func"> ) like lower( </text><const><text>:kod_type_rassm_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Типы судебного производства" timestamp="19.12.2022 12:56:49" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\vr_type_rassm.xml" haskeys="1" as="a">
              <queries>
                <query title="Типы судебного производства" timestamp="19.12.2022 12:56:49" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\vr_type_rassm.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_type_rassm_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_type_rassm" as="kod_type_rassm" title="" key="1" />
                    <column table="a" column="name" as="name" title="" />
                  </select>
                  <from>
                    <query name="vr_type_rassm" as="a" title="Типы судебного производства" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_type_rassm" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_type_rassm" />
                        <useparam name="kod_type_rassm_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_type_rassm_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_type_rassm_filter" type="string">
                  <const>:kod_type_rassm_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
type_rassm_x_n.name as type_rassm_x_n, /*Порядок рассмотрения*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.type_rassm as type_rassm, /*Порядок рассмотрения*//*number*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx/*Примерный срок рассмотрения*//*date*/

from (select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--vr_type_rassm
select u.kod_type_rassm as kod_type_rassm, /*number*//*key*/
u.name as name/*string*/

from (
(
(
--
select 1 as kod_type_rassm, /*number*//*key*/
'Упрощенное производство' as name/*string*/

from dual

--\dual
)
--\
union all
(
--
select 2, /*number*//*key*/
'Общий порядок'/*string*/

from dual

--\dual
)
--\
union all
(
--
select 3, /*number*//*key*/
'Приказное производство'/*string*/

from dual

--\dual
)
--\
)
--\
)
u
--\
)
type_rassm_x_n on type_rassm_x_n.kod_type_rassm = ur_mat.type_rassm--\vr_type_rassm
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="date_rassm_approx" table="ur_mat" />
            <dependant name="type_rassm_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="date_rassm_approx" table="ur_mat" type="date" title="Примерный срок рассмотрения" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx/*Примерный срок рассмотрения*//*date*/

from (select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.type_rassm as type_rassm,a.dat_doc as dat_doc,a.dat_prin as dat_prin  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm,t.d3 as dat_doc,t.d4 as dat_prin  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="num_delo" table="ur_mat" type="string" title="Номер дела" is-user-editable="1" Mandatory="qube.ur_hist_mat_count" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s2" />
        <column name="link_delo" table="ur_mat" type="string" title="Гиперссылка" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="link_delo" temp-col-name="s3" />
        <column name="kod_scan" table="ur_mat" type="number" title="Файл" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_scan" temp-col-name="n14">
          <sel-list-compiled>
            <root>
              <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_scan" as="kod_scan" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_scan" into="n1">a.kod_scan as kod_scan, /**//*number*//*key*/
</column><column table="a" column="file_name" as="file_name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="file_name" into="s1">a.file_name as file_name/**//*string*/
</column></select>
                <from>
from <query name="ur_scan_docs" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_scan_docs
select <column table="a" column="kod_scan" type="number" comment="уникальный ключ" as="kod_scan" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_scan" used="1">a.kod_scan as kod_scan, /*number*//*key*/
</column><column table="a" column="file_name" type="string" title="" comment="имя файла" vid="1" spec-column="file-name" as="file_name" key="0" sourcetable="./a/a" sourcecolumn="file_name" used="1">a.file_name as file_name/**//*string*/
</column></select><from>
from <table name="ur_scan_docs" as="a" title="Файл" used="1">ur_scan_docs
a
--\ur_scan_docs
</table></from>)
a
--\ur_scan_docs
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> ) like lower( </text><const><text>:kod_scan_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="file_name" as="file_name" title="" thissrc="file_name">a.file_name</column><text txtype="func"> ) like lower( </text><const><text>:file_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" as="a">
              <queries>
                <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_scan_filter" type="string" />
                    <param name="file_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_scan" as="kod_scan" title="" key="1" />
                    <column table="a" column="file_name" as="file_name" title="" />
                  </select>
                  <from>
                    <query name="ur_scan_docs" as="a" title="Файл" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="kod_scan_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="file_name" />
                        <useparam name="file_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_scan_filter" />
                    <useparam name="file_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_scan_filter" type="string">
                  <const>:kod_scan_filter </const>
                </param>
                <param name="file_name_filter" type="string">
                  <const>:file_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_mat as kod_mat,a.kod_scan as kod_scan  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n14 as kod_scan  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_scan as kod_scan  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n14 as kod_scan  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_scan_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="prim" table="ur_mat" type="string" title="Примечание" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="prim" temp-col-name="s4" />
        <column name="is_not_new" table="ur_mat" type="number" title="" parname="item_is_not_new" ColumnVisible="0" />
        <column name="dat_arh" table="ur_mat" type="date" title="Дата архивации" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_arh" temp-col-name="d5" />
        <column name="kod_emp_x_n" table="ur_mat.kod_emp" type="string" title="Исполнитель ПИО" text-source-for="kod_emp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_emp_x_n.fio as kod_emp_x_n, /*Исполнитель ПИО*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_emp as kod_emp/*number*/

from (select a.kod_mat as kod_mat,a.kod_emp as kod_emp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n2 as kod_emp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_emp as kod_emp  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n2 as kod_emp  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_mat.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_doc_x_n" table="ur_mat.kod_doc" type="string" title="Документ" text-source-for="kod_doc" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_doc as kod_doc/*number*/

from (select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_doc as kod_doc  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n3 as kod_doc  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_subject_x_n" table="ur_mat.kod_subject" type="string" title="Предмет" text-source-for="kod_subject" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_subject as kod_subject/*number*/

from (select a.kod_mat as kod_mat,a.kod_subject as kod_subject  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n4 as kod_subject  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_subject as kod_subject  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n4 as kod_subject  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_parent_x_n" table="ur_mat.kod_parent" type="string" title="Обжалование" text-source-for="kod_parent" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_parent_x_n.name as kod_parent_x_n, /*Обжалование*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_parent as kod_parent/*number*/

from (select a.kod_mat as kod_mat,a.kod_parent as kod_parent  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n5 as kod_parent  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_parent as kod_parent  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n5 as kod_parent  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_parent_x_n on ur_mat.kod_parent = kod_parent_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sud_x_n" table="ur_mat.kod_sud" type="string" title="Суд / судебный участок" text-source-for="kod_sud" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sud_x_n.name as kod_sud_x_n, /*Суд / судебный участок*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from (select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="type_rassm_x_n" table="ur_mat.type_rassm" type="string" title="Порядок рассмотрения" text-source-for="type_rassm" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select type_rassm_x_n.name as type_rassm_x_n, /*Порядок рассмотрения*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.type_rassm as type_rassm/*Порядок рассмотрения*//*number*/

from (select a.kod_mat as kod_mat,a.type_rassm as type_rassm  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.type_rassm as type_rassm  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n13 as type_rassm  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--vr_type_rassm
select u.kod_type_rassm as kod_type_rassm, /*number*//*key*/
u.name as name/*string*/

from (
(
(
--
select 1 as kod_type_rassm, /*number*//*key*/
'Упрощенное производство' as name/*string*/

from dual

--\dual
)
--\
union all
(
--
select 2, /*number*//*key*/
'Общий порядок'/*string*/

from dual

--\dual
)
--\
union all
(
--
select 3, /*number*//*key*/
'Приказное производство'/*string*/

from dual

--\dual
)
--\
)
--\
)
u
--\
)
type_rassm_x_n on type_rassm_x_n.kod_type_rassm = ur_mat.type_rassm--\vr_type_rassm
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan_x_n" table="ur_mat.kod_scan" type="string" title="Файл" text-source-for="kod_scan" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_mat as kod_mat,a.kod_scan as kod_scan  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n14 as kod_scan  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_scan as kod_scan  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n14 as kod_scan  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp" table="ur_mat" type="number" title="" is-user-editable="1" is-refreshed="1">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_sdp" into="n1">a.kod_sdp as kod_sdp, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Юридический документ" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Юридический документ*//*string*/
</column></select>
                <from>
from <query name="uk_sdp" as="a" path="./a/a" haskeys="1" used="1">(
<select>--uk_sdp
select <column table="a" column="kod_sdp" type="number" as="kod_sdp" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Юридический документ" vid="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Юридический документ*//*string*/
</column></select><from>
from <table name="uk_sdp" as="a" used="1">uk_sdp
a
--\uk_sdp
</table></from>)
a
--\uk_sdp
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" thissrc="kod_sdp">a.kod_sdp</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" thissrc="kod_sdp">a.kod_sdp</column><text txtype="func"> ) like lower( </text><const><text>:kod_sdp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Юридический документ" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\uk_sdp.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_sdp_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_sdp" as="kod_sdp" title="" key="1" />
                    <column table="a" column="name" as="name" title="Юридический документ" />
                  </select>
                  <from>
                    <query name="uk_sdp" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_sdp" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_sdp" />
                        <useparam name="kod_sdp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_sdp_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_sdp_filter" type="string">
                  <const>:kod_sdp_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_folders.kod_sdp as kod_sdp/*number*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_mat
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_folders" table="ur_mat" type="number" title="Папка" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_folders" temp-col-name="n15">
          <sel-list-compiled>
            <root>
              <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_folders" as="kod_folders" title="" key="1" used="1" type="number" agg="count" sourcetable="./a/a" sourcecolumn="kod_folders" into="n1">a.kod_folders as kod_folders, /**//*number*//*key*/
</column><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" key="0" used="1" type="date" sourcetable="./a/a" sourcecolumn="dat_create" into="d1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" key="0" used="1" type="date" visible="is_not_new" sourcetable="./a/a" sourcecolumn="dat_finish" into="d2">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" key="0" used="1" type="string" visible="is_not_new" sourcetable="./a/a" sourcecolumn="num_doc" into="s1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_category" reference="us_category" refcol="kod_category" into="n2">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" key="0" used="1" type="string" into="s2">kod_category.sp_col_name as kod_category_x_n, /*Категория потребителя*//*string*/
</column><column table="a" column="ndog" as="ndog" title="Номер договора" key="0" used="1" type="string" agg="max" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" into="s3">a.ndog as ndog, /*Номер договора*//*string*/
</column><column table="a" column="name" as="name" title="Договор" key="0" used="1" type="string" agg="max" into="s4">a.name as name, /*Договор*//*string*/
</column><column table="a" column="is_active" as="is_active" title="Статус папки" key="0" used="1" type="number" into="n3">a.is_active as is_active, /*Статус папки*//*number*/
</column><column table="a" column="font_color" as="font_color" title="Цвет текста" key="0" used="1" type="string" into="s5">a.font_color as font_color, /*Цвет текста*//*string*/
</column><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" key="0" used="1" type="string" into="s6">a.info_reminder as info_reminder/*Напоминание*//*string*/
</column></select>
                <from>
from <query name="ur_folders" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="dat_create" type="date" title="Дата создания папки" column-mandatory="1" column-default="today" as="dat_create" key="0" sourcetable="./a/a" sourcecolumn="dat_create" used="1">a.dat_create as dat_create, /*Дата создания папки*//*date*/
</column><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" sourcetable="./a/a" sourcecolumn="dat_finish" used="1">a.dat_finish as dat_finish, /*Дата сброса папки в архив*//*date*/
</column><column table="a" column="num_doc" type="string" title="Документ (основание для сброса папки в архив)" comment="док-т - основание для архивации папки" visible="is_not_new" as="num_doc" key="0" sourcetable="./a/a" sourcecolumn="num_doc" used="1">a.num_doc as num_doc, /*Документ (основание для сброса папки в архив)*//*string*/
</column><column table="a" column="kod_category" type="number" comment="категория абонента" title="Категория потребителя" as="kod_category" reference="us_category" refcol="kod_category" key="0" sourcetable="./a/a" sourcecolumn="kod_category" used="1">a.kod_category as kod_category, /*Категория потребителя*//*number*/
</column><column table="kod_dog" column="ndog" is-fact="1" fact="ur_folders_ndog" agg="max" as="ndog" key="0" used="1" type="string" title="Номер договора" sourcetable="./a/a/kod_dog" sourcecolumn="ndog">kod_dog.ndog as ndog, /*Номер договора*//*string*/
</column><column table="kod_dog" column="name" is-fact="1" fact="ur_folders_dog_name" agg="max" as="name" key="0" used="1" type="string" title="Договор">kod_dog.name as name, /*Договор*//*string*/
</column><call function="true if null" as="is_active" title="Статус папки" key="0" pth="" type="number" used="1"><text txtype="func"> decode ( </text><column table="a" column="dat_finish" type="date" title="Дата сброса папки в архив" comment="дата сброса папки в архив" visible="is_not_new" as="dat_finish" key="0" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ,null,1,0) </text> as is_active, /*Статус папки*//*number*/
</call><call as="font_color" function="case" title="Цвет текста" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder1" dgroup="max">ur_mat.mat_reminder1</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'102,51,99'</text></const></call><call function="when" pth="0" type="when"><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="ur_mat" column="mat_reminder2" dgroup="max">ur_mat.mat_reminder2</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>'139,0,0'</text></const></call><text txtype="func"> end </text> as font_color, /*Цвет текста*//*string*/
</call><call function="||" as="info_reminder" title="Напоминание" key="0" pth="" type="string" used="1"><column table="ur_mat" column="mat_reminder1">ur_mat.mat_reminder1</column><text txtype="func"> || </text><column table="ur_mat" column="mat_reminder2">ur_mat.mat_reminder2</column> as info_reminder/*Напоминание*//*string*/
</call></select><from>
from <table name="ur_folders" as="a" title="Папка" used="1">ur_folders
a
--\ur_folders
</table><query as="ur_mat" join="left outer" path="./a/a/ur_mat" used="1">left outer join
(
<select>--
select <column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders as kod_folders, /*number*//*key*/
</column><column table="ur_mat" group="max" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">max(ur_mat.mat_reminder1)  as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="ur_mat" group="max" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">max(ur_mat.mat_reminder2)  as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <query name="ur_mat" as="ur_mat" path="./a/a/ur_mat/ur_mat" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_folders" type="number" as="kod_folders" reference="ur_folders" refcol="kod_folders" key="0" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*/
</column><column table="kod_mat_reminder" column="mat_reminder1" as="mat_reminder1" key="0" used="1" type="string" title="Напоминание 1">kod_mat_reminder.mat_reminder1 as mat_reminder1, /*Напоминание 1*//*string*/
</column><column table="kod_mat_reminder" column="mat_reminder2" as="mat_reminder2" key="0" used="1" type="string" title="Напоминание 2">kod_mat_reminder.mat_reminder2 as mat_reminder2/*Напоминание 2*//*string*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="uv_mat_reminders" as="kod_mat_reminder" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder" used="1">left outer join
(
<select>--uv_mat_reminders
select <column table="a" column="kod_mat" as="kod_mat" key="0" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat, /*number*/
</column><call function="if" as="mat_reminder1" title="Напоминание 1" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="lt" pth="" type="bool">(<column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> &lt; </text><call function="add_months" pth="" type="date">(<text txtype="func"> add_months( </text><const type="date"><text>sysdate</text></const><text txtype="func"> , </text><const type="number"><text>-1</text></const><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl0" pth="" type="number">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_count1" table="qube" as="ur_hist_mat_count1">qube.ur_hist_mat_count1</column><text txtype="func"> ,0) </text>) </call><text txtype="func"> = </text><const type="number"><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'История не заполнена. '</text></const><text txtype="func"> end </text> as mat_reminder1, /*Напоминание 1*//*string*/
</call><call function="if" as="mat_reminder2" title="Напоминание 2" type="string" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="and" pth="" type="bool">(<call function="!=0" pth="" type="bool">(<text txtype="func"> nvl( </text><column column="ur_hist_mat_dec_pr_resh1" table="qube" as="ur_hist_mat_dec_pr_resh1">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0)!=0 </text>) </call><text txtype="func"> and </text><call function="is null" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_entry1" table="qube" as="ur_hist_mat_dec_dat_entry1">qube.ur_hist_mat_dec_dat_entry1</column><text txtype="func"> is null </text>) </call><text txtype="func"> and </text><call function="lt" pth="" type="bool">(<column column="ur_hist_mat_dec_dat_resh1" table="qube" as="ur_hist_mat_dec_dat_resh1">qube.ur_hist_mat_dec_dat_resh1</column><text txtype="func"> &lt; </text><call function="-" pth="" type="number">(<const type="date"><text>sysdate</text></const><text txtype="func"> - </text><const type="number"><text>40</text></const>) </call>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<call function="nvl" pth="">(<text txtype="func"> nvl( </text><column column="qube_mat_pp_cld_inf_cnt_nd1" table="qube" as="qube_mat_pp_cld_inf_cnt_nd1">qube.qube_mat_pp_cld_inf_cnt_nd1</column><text txtype="func"> , </text><const><text>0</text></const><text txtype="func"> ) </text>) </call><text txtype="func"> = </text><const><text>0</text></const>) </call>) </call><text txtype="func"> then </text><const><text>'Не введена дата вступления решения в законную силу. '</text></const><text txtype="func"> end </text> as mat_reminder2/*Напоминание 2*//*string*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" group="sum" key="0" used="1" type="number" agg="sum">sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" group="max" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(qube.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" group="max" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(qube.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" group="sum" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(qube.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="qube_mat_pp_cld_inf_cnt_nd1" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube.qube_mat_pp_cld_inf_cnt_nd1 as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="qube" column="ur_hist_mat_count1" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
</column><column table="qube" column="ur_hist_mat_dec_dat_entry1" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_dat_resh1" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">qube.ur_hist_mat_dec_dat_resh1 as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="qube_mat_pp_cld_inf_cnt_nd1" group="sum" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">sum(un.qube_mat_pp_cld_inf_cnt_nd1)  as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><column table="un" column="ur_hist_mat_count1" group="sum" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
</column><column table="un" column="ur_hist_mat_dec_dat_entry1" group="max" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="un" column="ur_hist_mat_dec_dat_resh1" group="max" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" type="date" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">max(un.ur_hist_mat_dec_dat_resh1)  as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*//*date*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un" used="1">(
<query multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube_mat_pp_cld_inf_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube_mat_pp_cld_inf_a_d" column="cnt_nd" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1" type="number" title="Судебный акт - решение" agg="sum">qube_mat_pp_cld_inf_a_d.cnt_nd as qube_mat_pp_cld_inf_cnt_nd1, /*Судебный акт - решение*//*number*/
</column><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="qube_mat_pp_cld_inf" as="qube_mat_pp_cld_inf_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d" used="1">(
<select>--qube_mat_pp_cld_inf
select <column table="kod_mat_pp" column="kod_parent" as="kod_mat_pp" key-dimension="kod_mat_pp" dimension="kod_mat_pp" key="0" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">kod_mat_pp.kod_parent as kod_mat_pp, /*number*/
</column><call function="-nvl" as="cnt_nd" agg="sum" key="0" pth="" type="number" used="1" title="Судебный акт - решение"><text txtype="func"> nvl( </text><call function="()" as="cnt" type="number" agg="sum" pth="">(<const><text>1</text></const>) </call><text txtype="func"> ,0) </text><text txtype="func"> -nvl( </text><column column="ur_hist_mat_dec_pr_resh1" as="cnt_dec" agg="sum" is-fact-use="1" thissrc="cnt_dec" table="qube">qube.ur_hist_mat_dec_pr_resh1</column><text txtype="func"> ,0) </text> as cnt_nd/*Судебный акт - решение*//*number*/
</call></select><from>
from <query haskeys="1" as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" agg="sum" is-fact-use="1" as="ur_hist_mat_dec_pr_resh1" group="max" key="0" used="1" type="number" title="Судебный акт - решение">max(qube.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" keypath=".kod_mat_pp" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube" used="1">(
<query as="qube" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube" used="1">(
<select>--
select <column table="qube" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="qube" column="ur_hist_mat_dec_pr_resh1" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">qube.ur_hist_mat_dec_pr_resh1 as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="qube" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube" used="1">(
<select>--
select <column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><column table="un" column="ur_hist_mat_dec_pr_resh1" group="max" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">max(un.ur_hist_mat_dec_pr_resh1)  as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query as="un" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un" used="1">(
<query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="kod_mat_pp" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat">kod_mat_pp.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="kod_mat_pp" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
kod_mat_pp
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" condsource="qube_mat_pp_cld_inf"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="kod_mat_pp" column="kod_parent">kod_mat_pp.kod_parent</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="kod_mat_pp" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" comment="код родительского иска д/аппеляции,кассации,надзор" as="kod_parent" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent, /*number*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
kod_mat_pp on <column table="kod_mat_pp" column="kod_mat">kod_mat_pp.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from>)
qube_mat_pp_cld_inf_a_d
--\qube_mat_pp_cld_inf
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="qube_mat_pp_cld_inf_a_d" column="kod_mat_pp">qube_mat_pp_cld_inf_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where /></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_a_d" column="kod_mat_pp" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_a_d.kod_mat_pp as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><column table="ur_hist_mat_a_d" column="cnt" as="ur_hist_mat_count1" key="0" used="1" type="number" agg="sum">ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
</column><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_hist_mat" dimension="kod_hist_mat" as="ur_hist_mat_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><const type="number" as="cnt" fact="ur_hist_mat_count" agg="sum" key="0" used="1"><text>1</text> as cnt, /*number*/
</const><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat_pp" reference="ur_mat" refcol="kod_mat" key="0" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*/
</column></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat" used="1">ur_hist_mat
a
--\ur_hist_mat
</table></from>)
ur_hist_mat_a_d
--\ur_hist_mat
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_a_d" column="kod_mat_pp">ur_hist_mat_a_d.kod_mat_pp</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_hist_mat_dec" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="ur_hist_mat_dec_a_d" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" reference="ur_mat" refcol="kod_mat">ur_hist_mat_dec_a_d.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><column table="ur_hist_mat_dec_a_d" column="dat_entry_dec" as="ur_hist_mat_dec_dat_entry1" key="0" used="1" type="date" title="Дата вст. реш. в зак. силу" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry">ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
</column><column table="ur_hist_mat_dec_a_d" column="dat_resh" as="ur_hist_mat_dec_dat_resh1" key="0" used="1" title="Дата принятия решения" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post">ur_hist_mat_dec_a_d.dat_resh as ur_hist_mat_dec_dat_resh1, /*Дата принятия решения*/
</column><column table="ur_hist_mat_dec_a_d" column="pr_resh" as="ur_hist_mat_dec_pr_resh1" key="0" used="1" type="number" title="Судебный акт - решение">ur_hist_mat_dec_a_d.pr_resh as ur_hist_mat_dec_pr_resh1/*Судебный акт - решение*//*number*/
</column></select><from>
from <query name="ur_hist_mat_dec" dimension="kod_hist_mat_dec" as="ur_hist_mat_dec_a_d" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" haskeys="1" used="1">(
<select>--ur_hist_mat_dec
select <column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" column-mandatory="1" as="kod_mat" reference="ur_mat" refcol="kod_mat" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*/
</column><column table="a" column="kod_hist_mat" type="number" key-dimension="kod_hist_mat" column-mandatory="1" as="kod_hist_mat_desc" key="1" fixed="1" thissrc="kod_hist_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="kod_hist_mat" used="1">a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
</column><column table="a" column="dat_post" as="dat_resh" agg="max" title="Дата принятия решения" dimension="dat" is-final-dimension="1" is-private-dimension="1" is-fact="1" fact="ur_hist_mat_dec_dat_resh" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_post" used="1">a.dat_post as dat_resh, /*Дата принятия решения*/
</column><column table="a" column="dat_entry" type="date" title="Дата вст. реш. в зак. силу" comment="дата вступления решения в законную силу,  Емцов - поменял условие валидации по 38755" valid="dat_entry_vld" as="dat_entry_dec" key="0" thissrc="dat_entry" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d" sourcecolumn="dat_entry" used="1">a.dat_entry as dat_entry_dec, /*Дата вст. реш. в зак. силу*//*date*/
</column><call function="if" as="pr_resh" title="Судебный акт - решение" type="number" key="0" pth="" thissrc="resh" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="=" pth="" type="bool">(<column table="kod_result" column="kod_post">kod_result.kod_post</column><text txtype="func"> = </text><const><text>2</text></const>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as pr_resh/*Судебный акт - решение*//*number*/
</call></select><from>
from <table name="ur_hist_mat" as="a" title="История рассмотрения" dimension="kod_hist_mat_dec" used="1">ur_hist_mat
a
--\ur_hist_mat
</table><query name="us_result" as="kod_result" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" haskeys="1" used="1">left outer join
(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="decision" type="number" title="" comment="1- является окончательным решением" as="decision" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/ur_hist_mat_dec_a_d/kod_result" sourcecolumn="decision" used="1">a.decision as decision/**//*number*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from><call function="=" type="bool">)
kod_result on <column table="a" column="kod_result">a.kod_result</column><text txtype="func"> = </text><column table="kod_result" column="kod_result">kod_result.kod_result</column></call>--\us_result
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_result" column="decision">kod_result.decision</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
</query><query name="ur_mat_pp" dimension="kod_mat_pp" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="ur_hist_mat_dec_a_d" column="kod_mat">ur_hist_mat_dec_a_d.kod_mat</column><text txtype="func"> = </text><column table="a" column="kod_mat">a.kod_mat</column></call>--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query><query dimension="kod_mat_pp" multiplicate-point="1" as="un" union="1" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un" used="1">union all
(
<select>--
select <column table="a" column="kod_mat" as="kod_mat_pp" key="1" used="1" type="number" agg="max" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat">a.kod_mat as kod_mat_pp, /*number*//*key*/
</column><const type="number" as="qube_mat_pp_cld_inf_cnt_nd1" key="0" used="1"><text>null</text> as qube_mat_pp_cld_inf_cnt_nd1, /*number*/
</const><const type="number" as="ur_hist_mat_count1" key="0" used="1"><text>null</text> as ur_hist_mat_count1, /*number*/
</const><const type="date" as="ur_hist_mat_dec_dat_entry1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_entry1, /*date*/
</const><const type="date" as="ur_hist_mat_dec_dat_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_dat_resh1, /*date*/
</const><const type="number" as="ur_hist_mat_dec_pr_resh1" key="0" used="1"><text>null</text> as ur_hist_mat_dec_pr_resh1/*number*/
</const></select><from>
from <query name="ur_mat_pp" dimension="kod_mat_pp" as="a" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" haskeys="1" used="1">(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where>)
a
--\ur_mat_pp
</query><qubecontent><where>where
<call function="is not null" dont-push="1" condsource="uv_mat_reminders"><column table="a" column="kod_mat">a.kod_mat</column></call></where></qubecontent></from><where>where
<call function="is not null" pth="" type="bool"><column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> is not null </text></call></where>)
--\
</query>)
--\
</query>)
un
--\
</query></from><group> group by
<column table="un" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">un.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query></from>)
--\
</query>)
--\
</query>)
qube
--\
</query></from>)
qube
--\
</query></from><group> group by
<column table="qube" column="kod_mat_pp" group="1" as="kod_mat_pp" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/qube/qube/qube/qube/qube/un/un/qube_mat_pp_cld_inf_a_d/kod_mat_pp" sourcecolumn="kod_parent" reference="ur_mat" refcol="kod_mat">qube.kod_mat_pp/*number*//*key*/
</column></group>)
qube
--\
</query><query name="ur_mat_pp" dimension="kod_mat_pp" link-mp-point="1" as="a" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" haskeys="1" used="1">left outer join
(
<select>--ur_mat_pp
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="dat_doc" type="date" title="Дата подачи в суд" mandatory="dat_otz" fact="ur_mat_dat_doc_max" agg="max" as="dat_doc" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="dat_doc" used="1">a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
</column><column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat_pp" key="1" fixed="1" thissrc="kod_mat" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat_pp/*number*//*key*/
</column></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" dimension="kod_mat_pp" used="1">ur_mat
a
--\ur_mat
</table><query name="ur_folders" dimension="kod_folders" as="kod_folders" join="left outer" path="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" haskeys="1" used="1">left outer join
(
<select>--ur_folders
select <column table="a" column="kod_folders" type="number" fact="count_ur_folders" agg="count" as="kod_folders" key="1" fixed="1" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_folders" used="1">a.kod_folders as kod_folders, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a/ur_mat/ur_mat/kod_mat_reminder/a/kod_folders" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp/*number*/
</column></select><from>
from <table name="ur_folders" as="a" title="Папка" dimension="kod_folders" used="1">ur_folders
a
--\ur_folders
</table></from><call function="=" type="bool">)
kod_folders on <column table="a" column="kod_folders">a.kod_folders</column><text txtype="func"> = </text><column table="kod_folders" column="kod_folders">kod_folders.kod_folders</column></call>--\ur_folders
</query></from><where>where
<call function="=" pth="" type="bool"><column table="kod_folders" column="kod_sdp">kod_folders.kod_sdp</column><text txtype="func"> = </text><const><text>1</text></const></call></where><call function="=" type="bool">)
a on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="qube" column="kod_mat_pp">qube.kod_mat_pp</column></call>--\ur_mat_pp
</query></from><call function="=" type="bool">)
kod_mat_reminder on <column table="a" column="kod_mat">a.kod_mat</column><text txtype="func"> = </text><column table="kod_mat_reminder" column="kod_mat">kod_mat_reminder.kod_mat</column></call>--\uv_mat_reminders
</query></from>)
ur_mat
--\ur_mat
</query></from><group> group by
<column table="ur_mat" column="kod_folders" group="1" as="kod_folders" key="1" used="1" type="number" sourcetable="./a/a/ur_mat/ur_mat" sourcecolumn="kod_folders" reference="ur_folders" refcol="kod_folders">ur_mat.kod_folders/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
ur_mat on <column table="ur_mat" column="kod_folders">ur_mat.kod_folders</column><text txtype="func"> = </text><column table="a" column="kod_folders">a.kod_folders</column></call>--\
</query><query name="kr_dogovor" as="kod_dog" join="left outer" path="./a/a/kod_dog" haskeys="1" used="1">left outer join
(
<select>--kr_dogovor
select <column table="a" column="kod_dog" type="number" key-dimension="kod_dog" fact="kr_dogovor_kod_dog" agg="max" fact-dimension="kod_dog" as="kod_dog" key="1" fixed="1" sourcetable="./a/a/kod_dog" sourcecolumn="kod_dog" used="1">a.kod_dog as kod_dog, /*number*//*key*/
</column><column table="a" column="ndog" type="string" title="Номер договора" comment="номер договора" fact="kr_dog_ndog" agg="stragg_dist" vid="1" as="ndog" key="0" sourcetable="./a/a/kod_dog" sourcecolumn="ndog" used="1">a.ndog as ndog, /*Номер договора*//*string*/
</column><call function="||" as="name" title="Договор" agg="stragg_dist" key="0" pth="" type="string" used="1"><column table="a" column="ndog">a.ndog</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_dog">a.dat_dog</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Договор*//*string*/
</call></select><from>
from <table name="kr_dogovor" as="a" title="Договор" used="1">kr_dogovor
a
--\kr_dogovor
</table></from><call function="=" type="bool">)
kod_dog on <column table="a" column="kod_dog">a.kod_dog</column><text txtype="func"> = </text><column table="kod_dog" column="kod_dog">kod_dog.kod_dog</column></call>--\kr_dogovor
</query></from>)
a
--\ur_folders
</query><query name="us_category" as="kod_category" join="left outer" path="./a/kod_category" haskeys="1" used="1">left outer join
(
<select>--us_category
select <column table="а" column="kod_category" type="number" key="1" as="kod_category" sourcetable="./a/kod_category" sourcecolumn="kod_category" used="1">а.kod_category as kod_category, /*number*//*key*/
</column><call function="||" as="sp_col_name" title="" pth="" type="string" key="0" used="1"><column table="а" column="name" type="string" is-name="1">а.name</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><column table="а" column="abbr" type="string" is-name="1">а.abbr</column> as sp_col_name/**//*string*/
</call></select><from>
from <table name="us_category" as="а" title="Категория потребителей (юристы)" used="1">us_category
а
--\us_category
</table></from><call function="=" type="bool">)
kod_category on <column table="a" column="kod_category">a.kod_category</column><text txtype="func"> = </text><column table="kod_category" column="kod_category">kod_category.kod_category</column></call>--\us_category
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_folders" as="kod_folders" title="" key="1" thissrc="kod_folders">a.kod_folders</column><text txtype="func"> ) like lower( </text><const><text>:kod_folders_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_create" as="dat_create" title="Дата создания папки" thissrc="dat_create">a.dat_create</column><text txtype="func"> ) like lower( </text><const><text>:dat_create_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" thissrc="dat_finish">a.dat_finish</column><text txtype="func"> ) like lower( </text><const><text>:dat_finish_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" thissrc="num_doc">a.num_doc</column><text txtype="func"> ) like lower( </text><const><text>:num_doc_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_category" as="kod_category" title="Категория потребителя" thissrc="kod_category">a.kod_category</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" thissrc="kod_category_x_n">kod_category.sp_col_name</column><text txtype="func"> ) like lower( </text><const><text>:kod_category_x_n_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ndog" as="ndog" title="Номер договора" thissrc="ndog">a.ndog</column><text txtype="func"> ) like lower( </text><const><text>:ndog_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Договор" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="is_active" as="is_active" title="Статус папки" thissrc="is_active">a.is_active</column><text txtype="func"> ) like lower( </text><const><text>:is_active_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="font_color" as="font_color" title="Цвет текста" thissrc="font_color">a.font_color</column><text txtype="func"> ) like lower( </text><const><text>:font_color_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="info_reminder" as="info_reminder" title="Напоминание" thissrc="info_reminder">a.info_reminder</column><text txtype="func"> ) like lower( </text><const><text>:info_reminder_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" haskeys="1" as="a">
              <queries>
                <query title="Папка" class="1" delete-validation="qube.ur_folders_del_vld" timestamp="20.09.2023 22:56:41" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_folders.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_folders_filter" type="string" />
                    <param name="dat_create_filter" type="string" />
                    <param name="dat_finish_filter" type="string" />
                    <param name="num_doc_filter" type="string" />
                    <param name="kod_category_filter" type="string" />
                    <param name="kod_category_x_n_filter" type="string" />
                    <param name="ndog_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="is_active_filter" type="string" />
                    <param name="font_color_filter" type="string" />
                    <param name="info_reminder_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_folders" as="kod_folders" title="" key="1" />
                    <column table="a" column="dat_create" as="dat_create" title="Дата создания папки" />
                    <column table="a" column="dat_finish" as="dat_finish" title="Дата сброса папки в архив" />
                    <column table="a" column="num_doc" as="num_doc" title="Документ (основание для сброса папки в архив)" />
                    <column table="a" column="kod_category" as="kod_category" title="Категория потребителя" />
                    <column table="kod_category" column="sp_col_name" as="kod_category_x_n" title="Категория потребителя" />
                    <column table="a" column="ndog" as="ndog" title="Номер договора" />
                    <column table="a" column="name" as="name" title="Договор" />
                    <column table="a" column="is_active" as="is_active" title="Статус папки" />
                    <column table="a" column="font_color" as="font_color" title="Цвет текста" />
                    <column table="a" column="info_reminder" as="info_reminder" title="Напоминание" />
                  </select>
                  <from>
                    <query name="ur_folders" as="a" title="Папка">
                      <link name="kod_category" as="kod_category" table="us_category" child="ur_folders" field="kod_category" parent="us_category" back="ur_folders" title="Категория потребителей (юристы)" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_folders" />
                        <useparam name="kod_folders_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_create" />
                        <useparam name="dat_create_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="dat_finish" />
                        <useparam name="dat_finish_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_doc" />
                        <useparam name="num_doc_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category" />
                        <useparam name="kod_category_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_category_x_n" />
                        <useparam name="kod_category_x_n_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ndog" />
                        <useparam name="ndog_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="is_active" />
                        <useparam name="is_active_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="font_color" />
                        <useparam name="font_color_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="info_reminder" />
                        <useparam name="info_reminder_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_folders_filter" />
                    <useparam name="dat_create_filter" />
                    <useparam name="dat_finish_filter" />
                    <useparam name="num_doc_filter" />
                    <useparam name="kod_category_filter" />
                    <useparam name="kod_category_x_n_filter" />
                    <useparam name="ndog_filter" />
                    <useparam name="name_filter" />
                    <useparam name="is_active_filter" />
                    <useparam name="font_color_filter" />
                    <useparam name="info_reminder_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_folders_filter" type="string">
                  <const>:kod_folders_filter </const>
                </param>
                <param name="dat_create_filter" type="string">
                  <const>:dat_create_filter </const>
                </param>
                <param name="dat_finish_filter" type="string">
                  <const>:dat_finish_filter </const>
                </param>
                <param name="num_doc_filter" type="string">
                  <const>:num_doc_filter </const>
                </param>
                <param name="kod_category_filter" type="string">
                  <const>:kod_category_filter </const>
                </param>
                <param name="kod_category_x_n_filter" type="string">
                  <const>:kod_category_x_n_filter </const>
                </param>
                <param name="ndog_filter" type="string">
                  <const>:ndog_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="is_active_filter" type="string">
                  <const>:is_active_filter </const>
                </param>
                <param name="font_color_filter" type="string">
                  <const>:font_color_filter </const>
                </param>
                <param name="info_reminder_filter" type="string">
                  <const>:info_reminder_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_folders.kod_sdp as kod_sdp/*number*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_mat
--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_sdp" table="ur_mat" />
          </dependants>
        </column>
        <column name="dat_otz" table="ur_mat" type="date" title="Дата возврата" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_otz" temp-col-name="d6" />
        <column name="ur_hist_mat_count" table="ur_mat" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="ur_mat" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_mat as kod_mat 
,:pio_date as pio_date 
,:kod_emp as kod_emp 
,:num_reg as num_reg 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:kod_parent as kod_parent 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:ur_opl_do_resh_vvod as ur_opl_do_resh_vvod 
,:dat_otv as dat_otv 
,:kod_sud as kod_sud 
,:dat_doc as dat_doc 
,:dat_prin as dat_prin 
,:type_rassm as type_rassm 
,:num_delo as num_delo 
,:link_delo as link_delo 
,:kod_scan as kod_scan 
,:prim as prim 
,:dat_arh as dat_arh 
,:kod_folders as kod_folders 
,:dat_otz as dat_otz 
 
from dual ) 
 
loop 
insert into ur_mat 
(kod_mat 
,pio_date 
,kod_emp 
,num_reg 
,kod_doc 
,kod_subject 
,kod_parent 
,period_zadol_s_vvod 
,period_zadol_po_vvod 
,osnreal 
,peni 
,ogr 
,ur_opl_do_resh_vvod 
,dat_otv 
,kod_sud 
,dat_doc 
,dat_prin 
,type_rassm 
,num_delo 
,link_delo 
,kod_scan 
,prim 
,dat_arh 
,kod_folders 
,dat_otz 
) 
 values  
(r.kod_mat 
,r.pio_date 
,r.kod_emp 
,r.num_reg 
,r.kod_doc 
,r.kod_subject 
,r.kod_parent 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.ur_opl_do_resh_vvod 
,r.dat_otv 
,r.kod_sud 
,r.dat_doc 
,r.dat_prin 
,r.type_rassm 
,r.num_delo 
,r.link_delo 
,r.kod_scan 
,r.prim 
,r.dat_arh 
,r.kod_folders 
,r.dat_otz 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_mat' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_mat as kod_mat 
,:pio_date as pio_date 
,:kod_emp as kod_emp 
,:num_reg as num_reg 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:kod_parent as kod_parent 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:ur_opl_do_resh_vvod as ur_opl_do_resh_vvod 
,:dat_otv as dat_otv 
,:kod_sud as kod_sud 
,:dat_doc as dat_doc 
,:dat_prin as dat_prin 
,:type_rassm as type_rassm 
,:num_delo as num_delo 
,:link_delo as link_delo 
,:kod_scan as kod_scan 
,:prim as prim 
,:dat_arh as dat_arh 
,:kod_folders as kod_folders 
,:dat_otz as dat_otz 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,d1 
,n2 
,s1 
,n3 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,n10 
,n11 
,d2 
,n12 
,d3 
,d4 
,n13 
,s2 
,s3 
,n14 
,s4 
,d5 
,n15 
,d6 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
,r.pio_date 
,r.kod_emp 
,r.num_reg 
,r.kod_doc 
,r.kod_subject 
,r.kod_parent 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.ur_opl_do_resh_vvod 
,r.dat_otv 
,r.kod_sud 
,r.dat_doc 
,r.dat_prin 
,r.type_rassm 
,r.num_delo 
,r.link_delo 
,r.kod_scan 
,r.prim 
,r.dat_arh 
,r.kod_folders 
,r.dat_otz 
); 
end loop; 
else 
for r in  
 ( select  
:kod_mat as kod_mat 
,:pio_date as pio_date 
,:kod_emp as kod_emp 
,:num_reg as num_reg 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:kod_parent as kod_parent 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:ur_opl_do_resh_vvod as ur_opl_do_resh_vvod 
,:dat_otv as dat_otv 
,:kod_sud as kod_sud 
,:dat_doc as dat_doc 
,:dat_prin as dat_prin 
,:type_rassm as type_rassm 
,:num_delo as num_delo 
,:link_delo as link_delo 
,:kod_scan as kod_scan 
,:prim as prim 
,:dat_arh as dat_arh 
,:kod_folders as kod_folders 
,:dat_otz as dat_otz 
,a.kod_ssp 
,a.kod_ret_isk 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.fio_otz 
,a.prichina_otz 
,a.sum_gp 
,a.dat_gp 
,a.num_pp_gp 
,a.kodp 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.shtraf 
,a.otvetch_info 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.astrent_exists 
,a.dat_post 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,d1 
,n2 
,s1 
,n3 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,n10 
,n11 
,d2 
,n12 
,d3 
,d4 
,n13 
,s2 
,s3 
,n14 
,s4 
,d5 
,n15 
,d6 
,n16 
,n17 
,s5 
,d7 
,s6 
,s7 
,s8 
,n18 
,d8 
,s9 
,n19 
,n20 
,n21 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,d9 
,s10 
,n28 
,s11 
,n29 
,s12 
,d10 
,n30 
,s13 
,d11 
,n31 
,d12 
,s14 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.kod_mat 
,r.pio_date 
,r.kod_emp 
,r.num_reg 
,r.kod_doc 
,r.kod_subject 
,r.kod_parent 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.ur_opl_do_resh_vvod 
,r.dat_otv 
,r.kod_sud 
,r.dat_doc 
,r.dat_prin 
,r.type_rassm 
,r.num_delo 
,r.link_delo 
,r.kod_scan 
,r.prim 
,r.dat_arh 
,r.kod_folders 
,r.dat_otz 
,r.kod_ssp 
,r.kod_ret_isk 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.fio_otz 
,r.prichina_otz 
,r.sum_gp 
,r.dat_gp 
,r.num_pp_gp 
,r.kodp 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.shtraf 
,r.otvetch_info 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.astrent_exists 
,r.dat_post 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(kod_mat 
,pio_date 
,kod_emp 
,num_reg 
,kod_doc 
,kod_subject 
,kod_parent 
,period_zadol_s_vvod 
,period_zadol_po_vvod 
,osnreal 
,peni 
,ogr 
,ur_opl_do_resh_vvod 
,dat_otv 
,kod_sud 
,dat_doc 
,dat_prin 
,type_rassm 
,num_delo 
,link_delo 
,kod_scan 
,prim 
,dat_arh 
,kod_folders 
,dat_otz 
) 
= 
 ( select  
:kod_mat as kod_mat 
,:pio_date as pio_date 
,:kod_emp as kod_emp 
,:num_reg as num_reg 
,:kod_doc as kod_doc 
,:kod_subject as kod_subject 
,:kod_parent as kod_parent 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:ur_opl_do_resh_vvod as ur_opl_do_resh_vvod 
,:dat_otv as dat_otv 
,:kod_sud as kod_sud 
,:dat_doc as dat_doc 
,:dat_prin as dat_prin 
,:type_rassm as type_rassm 
,:num_delo as num_delo 
,:link_delo as link_delo 
,:kod_scan as kod_scan 
,:prim as prim 
,:dat_arh as dat_arh 
,:kod_folders as kod_folders 
,:dat_otz as dat_otz 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction name="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
            <column table="this" column="kod_folders" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="ur_mat">
          <columns>
            <column name="kod_mat" type="number" title="" visible="0" />
            <column name="pio_date" type="date" title="Дата поступления материалов в ПИО" />
            <column name="kod_emp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kr_dog_name" type="string" title="Договор" />
            <column name="num_reg" type="string" title="Номер иска" />
            <column name="kod_doc" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_peresmotr" type="number" title="" visible="0" />
            <column name="kod_subject" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_parent" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_hist_mat_dec_dat_entry" type="date" title="Дата вст. реш. в зак. силу" />
            <column name="ur_mat_pr_sch_gp_vld" type="string" title="Дата вст. реш. в зак. силу" visible="0" />
            <column name="ur_mat_pr_sch_peni_vld" type="string" title="Дата вст. реш. в зак. силу" visible="0" />
            <column name="ur_mat_zadol_po_isku" type="number" title="Задолженность по иску" />
            <column name="period_zadol_s_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
            <column name="period_zadol_po_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности по" />
            <column name="osnreal" type="number" title="Основная реал." />
            <column name="peni" type="number" title="Проценты (пени)" />
            <column name="mat_peni_period_str" type="string" title="Период пени" />
            <column name="ogr" type="number" title="Расх. за введ. огранич. реж. энергопотребл." />
            <column name="ur_opl_do_resh_vvod" type="number" title="Оплата до вынес. реш. суда" />
            <column name="ur_mat_ostatok_zadol_do_resch" type="number" title="Остаток задолженности до вынес. реш. суда" />
            <column name="ur_mat_sum_gp" type="number" title="Сумма гос. пошлины" />
            <column name="dat_otv" type="date" title="Дата отправки документов ответчику" />
            <column name="kod_sud" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_doc" type="date" title="Дата подачи в суд" />
            <column name="dat_prin" type="date" title="Дата принятия документов в суде" />
            <column name="type_rassm" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="date_rassm_approx" type="date" title="Примерный срок рассмотрения" />
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="link_delo" type="string" title="Гиперссылка" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="is_not_new" type="number" title="" visible="0" />
            <column name="dat_arh" type="date" title="Дата архивации" />
            <column name="kod_emp_x_n" type="string" title="Исполнитель ПИО" />
            <column name="kod_doc_x_n" type="string" title="Документ" />
            <column name="kod_subject_x_n" type="string" title="Предмет" />
            <column name="kod_parent_x_n" type="string" title="Обжалование" />
            <column name="kod_sud_x_n" type="string" title="Суд / судебный участок" />
            <column name="type_rassm_x_n" type="string" title="Порядок рассмотрения" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_otz" type="date" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod_mat" type="number" title="" visible="0" />
            <column name="pio_date" type="date" title="Дата поступления материалов в ПИО" />
            <column name="kod_emp_x_n" type="string" title="Исполнитель ПИО" />
            <column name="kod_emp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kr_dog_name" type="string" title="Договор" />
            <column name="num_reg" type="string" title="Номер иска" />
            <column name="kod_doc_x_n" type="string" title="Документ" />
            <column name="kod_doc" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_peresmotr" type="number" title="" visible="0" />
            <column name="kod_subject_x_n" type="string" title="Предмет" />
            <column name="kod_subject" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_parent_x_n" type="string" title="Обжалование" />
            <column name="kod_parent" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_hist_mat_dec_dat_entry" type="date" title="Дата вст. реш. в зак. силу" />
            <column name="ur_mat_pr_sch_gp_vld" type="string" title="Дата вст. реш. в зак. силу" visible="0" />
            <column name="ur_mat_pr_sch_peni_vld" type="string" title="Дата вст. реш. в зак. силу" visible="0" />
            <column name="ur_mat_zadol_po_isku" type="number" title="Задолженность по иску" />
            <column name="period_zadol_s_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
            <column name="period_zadol_po_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности по" />
            <column name="osnreal" type="number" title="Основная реал." />
            <column name="peni" type="number" title="Проценты (пени)" />
            <column name="mat_peni_period_str" type="string" title="Период пени" />
            <column name="ogr" type="number" title="Расх. за введ. огранич. реж. энергопотребл." />
            <column name="ur_opl_do_resh_vvod" type="number" title="Оплата до вынес. реш. суда" />
            <column name="ur_mat_ostatok_zadol_do_resch" type="number" title="Остаток задолженности до вынес. реш. суда" />
            <column name="ur_mat_sum_gp" type="number" title="Сумма гос. пошлины" />
            <column name="dat_otv" type="date" title="Дата отправки документов ответчику" />
            <column name="kod_sud_x_n" type="string" title="Суд / судебный участок" />
            <column name="kod_sud" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_doc" type="date" title="Дата подачи в суд" />
            <column name="dat_prin" type="date" title="Дата принятия документов в суде" />
            <column name="type_rassm_x_n" type="string" title="Порядок рассмотрения" />
            <column name="type_rassm" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="date_rassm_approx" type="date" title="Примерный срок рассмотрения" />
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="link_delo" type="string" title="Гиперссылка" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="is_not_new" type="number" title="" visible="0" />
            <column name="dat_arh" type="date" title="Дата архивации" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_folders" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_otz" type="date" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
ur_mat.pio_date as pio_date, /*Дата поступления материалов в ПИО*//*date*/
ur_mat.kod_emp as kod_emp, /*Исполнитель ПИО*//*number*/
qube.kr_dog_name1 as kr_dog_name, /*Договор*//*string*/
ur_mat.num_reg as num_reg, /*Номер иска*//*string*/
ur_mat.kod_doc as kod_doc, /*number*/
kod_doc.is_peresmotr as is_peresmotr, /*number*/
ur_mat.kod_subject as kod_subject, /*number*/
ur_mat.kod_parent as kod_parent, /*Обжалование*//*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_mat_pr_sch_gp_vld1 as ur_mat_pr_sch_gp_vld, /*string*/
qube.ur_mat_pr_sch_peni_vld1 as ur_mat_pr_sch_peni_vld, /*string*/
qube.ur_mat_zadol_po_isku1 as ur_mat_zadol_po_isku, /*Задолженность по иску*//*number*/
ur_mat.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с*//*number*/
ur_mat.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности по*//*number*/
ur_mat.osnreal as osnreal, /*Основная реал.*//*number*/
ur_mat.peni as peni, /*Проценты (пени)*//*number*/
qube.mat_peni_period_str1 as mat_peni_period_str, /*Период пени*//*string*/
ur_mat.ogr as ogr, /*Расх. за введ. огранич. реж. энергопотребл.*//*number*/
ur_mat.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*Оплата до вынес. реш. суда*//*number*/
qube.ur_mat_ostatok_zadol_do_resch1 as ur_mat_ostatok_zadol_do_resch, /*Остаток задолженности до вынес. реш. суда*//*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp, /*Сумма гос. пошлины*//*number*/
ur_mat.dat_otv as dat_otv, /*Дата отправки документов ответчику*//*date*/
ur_mat.kod_sud as kod_sud, /*Суд / судебный участок*//*number*/
ur_mat.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
ur_mat.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
ur_mat.type_rassm as type_rassm, /*Порядок рассмотрения*//*number*/
ur_mat.date_rassm_approx as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
ur_mat.link_delo as link_delo, /*Гиперссылка*//*string*/
ur_mat.kod_scan as kod_scan, /*Файл*//*number*/
ur_mat.prim as prim, /*Примечание*//*string*/
ur_mat.is_not_new as is_not_new, /*number*/
ur_mat.dat_arh as dat_arh, /*Дата архивации*//*date*/
kod_emp_x_n.fio as kod_emp_x_n, /*Исполнитель ПИО*//*string*/
kod_doc_x_n.abbr as kod_doc_x_n, /*Документ*//*string*/
kod_subject_x_n.name as kod_subject_x_n, /*Предмет*//*string*/
kod_parent_x_n.name as kod_parent_x_n, /*Обжалование*//*string*/
kod_sud_x_n.name as kod_sud_x_n, /*Суд / судебный участок*//*string*/
type_rassm_x_n.name as type_rassm_x_n, /*Порядок рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_mat.kod_sdp as kod_sdp, /*number*/
ur_mat.kod_folders as kod_folders, /*number*/
ur_mat.dat_otz as dat_otz, /*Дата возврата*//*date*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select ovr1.kod_mat as kod_mat, /*number*/
stragg_dist(ovr1.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
max(ovr1.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr2 is null )  and (( nvl( ovr1.expr3 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на ГП' end )  as ur_mat_pr_sch_gp_vld1, /*string*/
max( case  when ((ovr1.expr1 &lt;= ( sysdate ) )  and (ovr1.expr4 is null )  and (( nvl( ovr1.expr5 ,0) )  &gt; 0) )  then '[inf]Реш. вступило в зак. силу, необходимо сформировать счет на проценты(пени)' end )  as ur_mat_pr_sch_peni_vld1, /*string*/
sum(ovr1.ur_mat_zadol_po_isku1)  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
max(ovr1.mat_peni_period_str1)  as mat_peni_period_str1, /*Период пени*//*string*/
sum(ovr1.ur_mat_ostatok_zadol_do_resch1)  as ur_mat_ostatok_zadol_do_resch1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(ovr1.ur_mat_sum_gp1)  as ur_mat_sum_gp1, /*Сумма гос. пошлины*//*number*/
sum(ovr1.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max(ovr1.ur_dp_exists_vld1)  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
 nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0)  as ur_mat_zadol_po_isku1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
 vg_period.ym_enum_str_to_ym_ranges_str( qube.mat_peni_period_ym1 )  as mat_peni_period_str1, /*Период пени*//*string*/
 nvl( ( nvl( qube.ur_mat_osnreal1 ,0)  +nvl( qube.ur_mat_peni1 ,0)  +nvl( qube.ur_mat_ogr1 ,0) )  ,0)  -nvl( qube.ur_mat_ur_opl_do_resh_vvod1 ,0)  as ur_mat_ostatok_zadol_do_resch1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Сумма гос. пошлины*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
 case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end  as ur_dp_exists_vld1, /*Валидация (наличие привязанных документов)*//*string*/
 max( qube.ur_hist_mat_dec_dat_entry1 )  over(  partition by kod_mat.kod_mat )  as expr1, 
 max( qube.ur_dp_pr_sch_gp1 )  over(  partition by kod_mat.kod_mat )  as expr2, 
 sum( qube.ur_hist_mat_dec_gp_otv1 )  over(  partition by kod_mat.kod_mat )  as expr3, 
 max( qube.ur_dp_pr_sch_peni1 )  over(  partition by kod_mat.kod_mat )  as expr4, 
 sum( qube.ur_hist_mat_dec_peni1 )  over(  partition by kod_mat.kod_mat )  as expr5

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kr_dog_name1 as kr_dog_name1, /*Договор*//*string*/
qube.mat_peni_period_ym1 as mat_peni_period_ym1, /*Период*//*string*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_dp_pr_sch_gp1 as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
qube.ur_dp_pr_sch_peni1 as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1, /*number*/
qube.ur_hist_mat_dec_dat_entry1 as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
qube.ur_hist_mat_dec_gp_otv1 as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_dec_peni1 as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_mat_ogr1 as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_mat_osnreal1 as ur_mat_osnreal1, /*number*/
qube.ur_mat_peni1 as ur_mat_peni1, /*number*/
qube.ur_mat_sum_gp1 as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
qube.ur_mat_ur_opl_do_resh_vvod1 as ur_mat_ur_opl_do_resh_vvod1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
stragg_dist(un.kr_dog_name1)  as kr_dog_name1, /*Договор*//*string*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
min(un.ur_dp_pr_sch_gp1)  as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
min(un.ur_dp_pr_sch_peni1)  as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max(un.ur_hist_mat_dec_dat_entry1)  as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
sum(un.ur_hist_mat_dec_gp_otv1)  as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_dec_peni1)  as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_mat_ogr1)  as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_mat_osnreal1)  as ur_mat_osnreal1, /*number*/
sum(un.ur_mat_peni1)  as ur_mat_peni1, /*number*/
sum(un.ur_mat_sum_gp1)  as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
sum(un.ur_mat_ur_opl_do_resh_vvod1)  as ur_mat_ur_opl_do_resh_vvod1, /*number*/
stragg(un.mat_peni_period_ym1)  as mat_peni_period_ym1/*Период*//*string*/

from (
(
(
--
select dims.kod_mat as kod_mat, /*number*//*key*/
kr_dogovor.name as kr_dog_name1, /*Договор*//*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--
select kr_dogovor_a_d.kod_dog as kod_dog_prm, /*number*//*key*/
kod_dogplat_a_d.kod_mat as kod_mat/*number*//*key*/

from (
--kr_dogovor
select a.kod_dog as kod_dog/*number*//*key*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor_a_d
--\kr_dogovor
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_dog as kod_dog, /*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat_a_d on kod_dogplat_a_d.kod_dog = kr_dogovor_a_d.kod_dog--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null  group by
kr_dogovor_a_d.kod_dog, /*number*//*key*/
kod_dogplat_a_d.kod_mat/*number*//*key*/
)
dims
--\
left outer join
(
--kr_dogovor
select a.kod_dog as kod_dog, /*number*//*key*/
a.ndog || ' от ' || ( to_char( a.dat_dog ,'DD.MM.YYYY') )  as name/*Договор*//*string*/

from kr_dogovor
a
--\kr_dogovor
)
kr_dogovor on kr_dogovor.kod_dog = dims.kod_dog_prm--\kr_dogovor
)
--\
union all
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
ur_dogplat_a_d.pr_sch_gp as ur_dp_pr_sch_gp1, /*Признак наличия счета на ГП*//*number*/
ur_dogplat_a_d.pr_sch_peni as ur_dp_pr_sch_peni1, /*Признак наличия счета на проценты(пени)*//*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt, /*number*/
 case  when (a.vid_real = 9)  then 1 end  as pr_sch_gp, /*Признак наличия счета на ГП*//*number*/
 case  when ((a.vid_real = 7) )  then 1 end  as pr_sch_peni/*Признак наличия счета на проценты(пени)*//*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select kod_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
ur_hist_mat_dec_a_d.dat_entry_dec as ur_hist_mat_dec_dat_entry1, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat_dec_a_d.gp_otv as ur_hist_mat_dec_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.peni as ur_hist_mat_dec_peni1, /*% за польз. чуж. ден. ср.*//*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.peni as peni, /*% за польз. чуж. ден. ср.*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.dat_entry as dat_entry_dec/*Дата вст. реш. в зак. силу*//*date*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
kod_hist_mat_a_d on ur_hist_mat_dec_a_d.kod_hist_mat = kod_hist_mat_a_d.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on kod_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
ur_mat.ogr as ur_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_mat.osnreal as ur_mat_osnreal1, /*number*/
ur_mat.peni as ur_mat_peni1, /*number*/
ur_mat.sum_gp as ur_mat_sum_gp1, /*Оплачено госпошлины при подаче*//*number*/
ur_mat.ur_opl_do_resh_vvod as ur_mat_ur_opl_do_resh_vvod1, /*number*/
null as mat_peni_period_ym1/*string*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.sum_gp as sum_gp, /*Оплачено госпошлины при подаче*//*number*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni/*number*/

from (select a.kod_mat as kod_mat,a.sum_gp as sum_gp,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n18 as sum_gp,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.sum_gp as sum_gp,a.ogr as ogr,a.osnreal as osnreal,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n18 as sum_gp,t.n10 as ogr,t.n8 as osnreal,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat_peni_period_a_d.kod_mat as kod_mat, /*number*//*key*/
null as kr_dog_name1, /*string*/
null as ur_dogplat_count1, /*number*/
null as ur_dp_pr_sch_gp1, /*number*/
null as ur_dp_pr_sch_peni1, /*number*/
null as ur_hist_mat_count1, /*number*/
null as ur_hist_mat_dec_dat_entry1, /*date*/
null as ur_hist_mat_dec_gp_otv1, /*number*/
null as ur_hist_mat_dec_peni1, /*number*/
null as ur_mat_ogr1, /*number*/
null as ur_mat_osnreal1, /*number*/
null as ur_mat_peni1, /*number*/
null as ur_mat_sum_gp1, /*number*/
null as ur_mat_ur_opl_do_resh_vvod1, /*number*/
ur_mat_peni_period_a_d.name as mat_peni_period_ym1/*Период*//*string*/

from (
--ur_mat_peni_period
select a.kod_peni_period as kod_peni_period, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
spr_time_ym.name as name/*Период*//*string*/

from ur_mat_peni_period
a
--\ur_mat_peni_period
left outer join
(
--spr_time_ym
select a.ym as ym, /*number*//*key*/
a.name as name/*Период*//*string*/

from (
--spr_time_ym_pre
select  to_number(to_char( a.dat_day ,'YYYYMM'))/100  as ym, /*number*//*key*/
max( trim(to_char( ( to_number(to_char( a.dat_day ,'YYYYMM'))/100 )  ,'9999.99')) )  as name/*Период*//*string*/

from vv_day
a
--\vv_day
 group by
 to_number(to_char( a.dat_day ,'YYYYMM'))/100 /*number*//*key*/

order by ym)
a
--\spr_time_ym_pre
)
spr_time_ym on a.ym = spr_time_ym.ym--\spr_time_ym
)
ur_mat_peni_period_a_d
--\ur_mat_peni_period
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat_peni_period_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
kod_mat on kod_mat.kod_mat = qube.kod_mat--\ur_mat
)
ovr1
--\
 group by
ovr1.kod_mat/*number*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders, /*number*/
a.kod_doc as kod_doc, /*number*/
a.num_reg as num_reg, /*Номер иска*//*string*/
a.dat_otv as dat_otv, /*Дата отправки документов ответчику*//*date*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
a.dat_otz as dat_otz, /*Дата возврата*//*date*/
a.dat_doc as dat_doc, /*Дата подачи в суд*//*date*/
a.kod_subject as kod_subject, /*number*/
a.prim as prim, /*Примечание*//*string*/
a.kod_sud as kod_sud, /*number*/
a.kod_parent as kod_parent, /*number*/
nvl(a.ogr,0)  as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.kod_emp as kod_emp, /*number*/
a.osnreal as osnreal, /*number*/
a.period_zadol_s_vvod as period_zadol_s_vvod, /*number*/
a.period_zadol_po_vvod as period_zadol_po_vvod, /*number*/
a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod, /*number*/
a.peni as peni, /*number*/
a.link_delo as link_delo, /*Гиперссылка*//*string*/
a.kod_scan as kod_scan, /*number*/
a.dat_arh as dat_arh, /*Дата архивации*//*date*/
a.type_rassm as type_rassm, /*Порядок рассмотрения*//*number*/
a.pio_date as pio_date, /*date*/
kod_folders.kod_sdp as kod_sdp, /*number*/
 case  when ((( nvl( a.type_rassm , 2 ) )  = 1)  and (a.dat_doc is not null ) )  then (( add_months( a.dat_doc , 2 ) )  + ( 7 ) )  when ((a.type_rassm = 3)  and (a.dat_prin is not null ) )  then (a.dat_prin + ( 15 ) )  end  as date_rassm_approx, /*Примерный срок рассмотрения*//*date*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,a.kod_folders as kod_folders,a.kod_doc as kod_doc,a.num_reg as num_reg,a.dat_otv as dat_otv,a.num_delo as num_delo,a.dat_prin as dat_prin,a.dat_otz as dat_otz,a.dat_doc as dat_doc,a.kod_subject as kod_subject,a.prim as prim,a.kod_sud as kod_sud,a.kod_parent as kod_parent,a.ogr as ogr,a.kod_emp as kod_emp,a.osnreal as osnreal,a.period_zadol_s_vvod as period_zadol_s_vvod,a.period_zadol_po_vvod as period_zadol_po_vvod,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni,a.link_delo as link_delo,a.kod_scan as kod_scan,a.dat_arh as dat_arh,a.type_rassm as type_rassm,a.pio_date as pio_date,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders,t.n3 as kod_doc,t.s1 as num_reg,t.d2 as dat_otv,t.s2 as num_delo,t.d4 as dat_prin,t.d6 as dat_otz,t.d3 as dat_doc,t.n4 as kod_subject,t.s4 as prim,t.n12 as kod_sud,t.n5 as kod_parent,t.n10 as ogr,t.n2 as kod_emp,t.n8 as osnreal,t.n6 as period_zadol_s_vvod,t.n7 as period_zadol_po_vvod,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni,t.s3 as link_delo,t.n14 as kod_scan,t.d5 as dat_arh,t.n13 as type_rassm,t.d1 as pio_date,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_folders as kod_folders,a.kod_doc as kod_doc,a.num_reg as num_reg,a.dat_otv as dat_otv,a.num_delo as num_delo,a.dat_prin as dat_prin,a.dat_otz as dat_otz,a.dat_doc as dat_doc,a.kod_subject as kod_subject,a.prim as prim,a.kod_sud as kod_sud,a.kod_parent as kod_parent,a.ogr as ogr,a.kod_emp as kod_emp,a.osnreal as osnreal,a.period_zadol_s_vvod as period_zadol_s_vvod,a.period_zadol_po_vvod as period_zadol_po_vvod,a.ur_opl_do_resh_vvod as ur_opl_do_resh_vvod,a.peni as peni,a.link_delo as link_delo,a.kod_scan as kod_scan,a.dat_arh as dat_arh,a.type_rassm as type_rassm,a.pio_date as pio_date,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n15 as kod_folders,t.n3 as kod_doc,t.s1 as num_reg,t.d2 as dat_otv,t.s2 as num_delo,t.d4 as dat_prin,t.d6 as dat_otz,t.d3 as dat_doc,t.n4 as kod_subject,t.s4 as prim,t.n12 as kod_sud,t.n5 as kod_parent,t.n10 as ogr,t.n2 as kod_emp,t.n8 as osnreal,t.n6 as period_zadol_s_vvod,t.n7 as period_zadol_po_vvod,t.n11 as ur_opl_do_resh_vvod,t.n9 as peni,t.s3 as link_delo,t.n14 as kod_scan,t.d5 as dat_arh,t.n13 as type_rassm,t.d1 as pio_date,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on a.kod_folders = kod_folders.kod_folders--\ur_folders
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--vr_type_rassm
select u.kod_type_rassm as kod_type_rassm, /*number*//*key*/
u.name as name/*string*/

from (
(
(
--
select 1 as kod_type_rassm, /*number*//*key*/
'Упрощенное производство' as name/*string*/

from dual

--\dual
)
--\
union all
(
--
select 2, /*number*//*key*/
'Общий порядок'/*string*/

from dual

--\dual
)
--\
union all
(
--
select 3, /*number*//*key*/
'Приказное производство'/*string*/

from dual

--\dual
)
--\
)
--\
)
u
--\
)
type_rassm_x_n on type_rassm_x_n.kod_type_rassm = ur_mat.type_rassm--\vr_type_rassm
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_parent_x_n on ur_mat.kod_parent = kod_parent_x_n.kod_mat--\ur_mat
left outer join
(
--us_subject
select a.kod_subject as kod_subject, /*number*//*key*/
a.name as name/*Предмет иска*//*string*/

from us_subject
a
--\us_subject
)
kod_subject_x_n on ur_mat.kod_subject = kod_subject_x_n.kod_subject--\us_subject
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc_x_n on ur_mat.kod_doc = kod_doc_x_n.kod_doc--\us_doc
left outer join
(
--kr_employee
select a.kod_emp as kod_emp, /*number*//*key*/
a.fio as fio/*ФИО*//*string*/

from kr_employee
a
--\kr_employee
)
kod_emp_x_n on ur_mat.kod_emp = kod_emp_x_n.kod_emp--\kr_employee
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
 case  when (a.prizn &gt; 1)  then 1 end  as is_peresmotr/*number*/

from us_doc
a
--\us_doc
)
kod_doc on ur_mat.kod_doc = kod_doc.kod_doc--\us_doc
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_hist_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_hist_mat" column-editable="0" key="kod_hist_mat" parent-table="ur_mat" parent-key="kod_mat" is-ms-upd="1" key-dimension="kod_hist_mat">
      <select-text>
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.kod_zased as kod_zased, /*Судья*//*number*/
ur_hist_mat.dat_rassm as dat_rassm, /*Дата суд. разб.*//*date*/
ur_hist_mat.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
ur_hist_mat.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
ur_hist_mat.dat_receipt_post as dat_receipt_post, /*Дата пол. суд. акта*//*date*/
ur_hist_mat.dat_send_petition_il as dat_send_petition_il, /*Дата напр. ход-ва о выдаче ИЛ*//*date*/
ur_hist_mat.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
kod_result.kod_post as kod_post, /*Судебный акт*//*number*/
ur_hist_mat.kod_result as kod_result, /*Результат рассмотрения*//*number*/
ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.decision_not_otmena as decision_not_otmena, /*number*/
qube.ur_hist_mat_sum_pris_all1 as ur_hist_mat_sum_pris_all, /*Всего*//*number*/
ur_hist_mat.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с*//*number*/
ur_hist_mat.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности с*//*number*/
ur_hist_mat.osnreal as osnreal, /*Основная реализация*//*number*/
ur_hist_mat.peni as peni, /*Проценты (пени)*//*number*/
ur_hist_mat.ogr as ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.gp_otv as gp_otv, /*ГП с ответчика*//*number*/
ur_hist_mat.astrent as astrent, /*Астрент*//*number*/
ur_hist_mat.sud_izd as sud_izd, /*Судебные издержки*//*number*/
qube.ur_hist_mat_opl_all1 as ur_hist_mat_opl_all, /*Всего*//*number*/
ur_hist_mat.opl_osnreal as opl_osnreal, /*Осн. реал.*//*number*/
ur_hist_mat.opl_peni as opl_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.opl_ogr as opl_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.opl_gpotv as opl_gpotv, /*ГП*//*number*/
ur_hist_mat.opl_astrent as opl_astrent, /*Астрент*//*number*/
ur_hist_mat.opl_sud_izd as opl_sud_izd, /*Судебные издержки*//*number*/
qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
ur_hist_mat.ostatok_osnreal as ostatok_osnreal, /*Осн. реал. *//*number*/
ur_hist_mat.ostatok_peni as ostatok_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.ostatok_ogr as ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.ostatok_gp_otv as ostatok_gp_otv, /*ГП*//*number*/
ur_hist_mat.ostatok_astrent as ostatok_astrent, /*Астрент*//*number*/
ur_hist_mat.ostatok_sud_izd as ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
kod_post_x_n.name as kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new/*number*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  as ur_hist_mat_sum_pris_all1, /*Задолженность по решению суда (Всего)*//*number*/
sum( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  as ur_hist_mat_opl_all1, /*Оплачено до выдачи исп листа (Всего)*//*number*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1, /*Остаток задолженности (Всего)*//*number*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1, /*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1, /*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat
--\ur_hist_mat
where
(ur_hist_mat.kod_mat = :fk_kod_mat )  and (ur_hist_mat.kod_hist_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec_a_d.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec_a_d.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec_a_d.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec_a_d.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat on ur_hist_mat_dec_a_d.kod_hist_mat = ur_hist_mat.kod_hist_mat--\ur_hist_mat
where
(ur_hist_mat.kod_mat = :fk_kod_mat )  and (ur_hist_mat.kod_hist_mat is not null ) )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
(ur_hist_mat.kod_mat = :fk_kod_mat )  and (ur_hist_mat.kod_hist_mat is not null )  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_rassm as dat_rassm, /*Дата/время суд. разб.*//*date*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd, /*Судебные издержки*//*number*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.ogr as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /**//*number*/
a.peni as peni, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
a.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
a.opl_sud_izd as opl_sud_izd, /*Оплачено: Судебные издержки*//*number*/
a.kod_scan as kod_scan, /*number*/
a.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
a.dat_receipt_post as dat_receipt_post, /**//*date*/
a.dat_send_petition_il as dat_send_petition_il, /**//*date*/
a.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с (ручной ввод)*//*number*/
a.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности по (ручной ввод)*//*number*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
kod_result.kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
 case  when ((kod_result.kod_result != 99)  and (kod_result.decision is not null ) )  then 1 end  as decision_not_otmena, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on ur_hist_mat.kod_result = kod_result.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
kod_post_x_n on kod_result.kod_post = kod_post_x_n.kod_post--\us_post
--\
</select-text>
      <columns>
        <column name="kod_hist_mat" table="ur_hist_mat" type="number" title="" parname="cur_kod_hist_mat" ColumnVisible="0" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_hist_mat" temp-col-name="n1" />
        <column name="kod_mat" table="ur_hist_mat" type="number" title="Материалы переданные в суд" parname="cur_kod_mat1" ColumnVisible="0" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n2">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_mat_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_zased" table="ur_hist_mat" type="number" title="Судья" is-user-editable="1" ClientMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_zased" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query title="Судьи" order="fio, kod_zased" class="1" timestamp="13.09.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="fio">fio</column>
                  <column column="kod_zased">kod_zased</column>
                </order>
                <select>--a
select <column table="us_zased" column="kod_zased" key="1" as="kod_zased" used="1" type="number" sourcetable="./a/us_zased" sourcecolumn="kod_zased" into="n1">us_zased.kod_zased as kod_zased, /*number*//*key*/
</column><column table="us_zased" column="fio" title="Судья" vid="1" as="fio" key="0" used="1" type="string" sourcetable="./a/us_zased" sourcecolumn="fio" into="s1">us_zased.fio as fio, /*Судья*//*string*/
</column><column table="us_sud" column="name" as="sud_name" title="Судебный участок" vid="1" key="0" used="1" type="string" sourcetable="./a/us_sud" sourcecolumn="name" into="s2">us_sud.name as sud_name/*Судебный участок*//*string*/
</column></select>
                <from>
from <query name="us_zased" as="us_zased" path="./a/us_zased" haskeys="1" used="1">(
<select>--us_zased
select <column table="a" column="kod_zased" type="number" key="1" as="kod_zased" sourcetable="./a/us_zased" sourcecolumn="kod_zased" used="1">a.kod_zased as kod_zased, /*number*//*key*/
</column><column table="a" column="kod_ssp" type="number" as="kod_ssp" reference="us_ssp" refcol="kod_ssp" key="0" sourcetable="./a/us_zased" sourcecolumn="kod_ssp" used="1">a.kod_ssp as kod_ssp, /*number*/
</column><column table="a" column="fio" type="string" title="Судья" as="fio" key="0" sourcetable="./a/us_zased" sourcecolumn="fio" used="1">a.fio as fio, /*Судья*//*string*/
</column><column table="a" column="kod_sud" type="number" as="kod_sud" reference="us_sud" refcol="kod_sud" key="0" sourcetable="./a/us_zased" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud/*number*/
</column></select><from>
from <table name="us_zased" as="a" used="1">us_zased
a
--\us_zased
</table></from>)
us_zased
--\us_zased
</query><query name="us_sud" as="us_sud" join="inner" path="./a/us_sud" haskeys="1" used="1">inner join
(
<select>--us_sud
select <column table="a" column="kod_sud" type="number" key="1" as="kod_sud" sourcetable="./a/us_sud" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Судебный участок" as="name" key="0" sourcetable="./a/us_sud" sourcecolumn="name" used="1">a.name as name/*Судебный участок*//*string*/
</column></select><from>
from <table name="us_sud" as="a" title="Суд / судебный участок" used="1">us_sud
a
--\us_sud
</table></from><call function="=" type="bool">)
us_sud on <column table="us_sud" column="kod_sud">us_sud.kod_sud</column><text txtype="func"> = </text><column table="us_zased" column="kod_sud">us_zased.kod_sud</column></call>--\us_sud
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="is null" pth="" type="bool">(<column table="us_zased" column="kod_ssp">us_zased.kod_ssp</column><text txtype="func"> is null </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="us_zased" column="kod_zased" key="1" as="kod_zased" thissrc="kod_zased">us_zased.kod_zased</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_zased" column="kod_zased" key="1" as="kod_zased" thissrc="kod_zased">us_zased.kod_zased</column><text txtype="func"> ) like lower( </text><const><text>:kod_zased_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_zased" column="fio" title="Судья" vid="1" as="fio" thissrc="fio">us_zased.fio</column><text txtype="func"> ) like lower( </text><const><text>:fio_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="name" as="sud_name" title="Судебный участок" vid="1" thissrc="sud_name">us_sud.name</column><text txtype="func"> ) like lower( </text><const><text>:sud_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by fio, kod_zased</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Судьи" order="fio, kod_zased" class="1" timestamp="13.09.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" as="a">
              <queries>
                <query title="Судьи" order="fio, kod_zased" class="1" timestamp="13.09.2023 12:50:00" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_zased_filter" type="string" />
                    <param name="fio_filter" type="string" />
                    <param name="sud_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="us_zased" column="kod_zased" key="1" as="kod_zased" />
                    <column table="us_zased" column="fio" title="Судья" vid="1" as="fio" />
                    <column table="us_sud" column="name" as="sud_name" title="Судебный участок" vid="1" />
                  </select>
                  <from>
                    <query name="us_zased" as="us_zased" />
                    <query name="us_sud" as="us_sud" join="inner" dname="us_zased_sud" title="Суд / судебный участок">
                      <call function="=">
                        <column table="us_sud" column="kod_sud" />
                        <column table="us_zased" column="kod_sud" />
                      </call>
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="is null">
                        <column table="us_zased" column="kod_ssp" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="kod_zased_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="fio" />
                        <useparam name="fio_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="sud_name" />
                        <useparam name="sud_name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="fio" />
                    <column column="kod_zased" />
                  </order>
                  <order>
                    <column column="fio" />
                    <column column="kod_zased" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_zased_filter" />
                    <useparam name="fio_filter" />
                    <useparam name="sud_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_zased_filter" type="string">
                  <const>:kod_zased_filter </const>
                </param>
                <param name="fio_filter" type="string">
                  <const>:fio_filter </const>
                </param>
                <param name="sud_name_filter" type="string">
                  <const>:sud_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_zased_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="dat_rassm" table="ur_hist_mat" type="date" title="Дата суд. разб." is-user-editable="1" ClientMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_rassm" temp-col-name="d1" />
        <column name="dat_entry" table="ur_hist_mat" type="date" title="Дата вст. реш. в зак. силу" is-user-editable="1" Valid="dat_entry_vld" is-updateable="1" is-updateable-ext="1" update-target="dat_entry" temp-col-name="d2">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="dat_send_il" table="ur_hist_mat" type="date" title="Дата направления ИЛ в филиал" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_send_il" temp-col-name="d3" />
        <column name="dat_post" table="ur_hist_mat" type="date" title="Дата прин. суд. акта" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_post" temp-col-name="d4" />
        <column name="dat_receipt_post" table="ur_hist_mat" type="date" title="Дата пол. суд. акта" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_receipt_post" temp-col-name="d5" />
        <column name="dat_send_petition_il" table="ur_hist_mat" type="date" title="Дата напр. ход-ва о выдаче ИЛ" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_send_petition_il" temp-col-name="d6" />
        <column name="dat_srok" table="ur_hist_mat" type="date" title="Срок обжалования решения" Exists="decision" is-user-editable="1" Mandatory="decision2" is-updateable="1" is-updateable-ext="1" update-target="dat_srok" temp-col-name="d7">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_post" table="kod_result" type="number" title="Судебный акт" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_result.kod_post as kod_post, /*Судебный акт*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on ur_hist_mat.kod_result = kod_result.kod_result--\us_result
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result" table="ur_hist_mat" type="number" title="Результат рассмотрения" is-user-editable="1" ColumnMandatory="1" Valid="qube.kod_result_vld" is-updateable="1" is-updateable-ext="1" update-target="kod_result" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" haskeys="1" noname="1" path="." used="1">
                <select>--us_result_list
select <column table="a" column="kod_result" as="kod_result" key="1" fixed="1" used="1" type="number" sourcetable="./a" sourcecolumn="kod_result" into="n1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="name" title="Результат рассмотрения" as="name" key="0" used="1" type="string" sourcetable="./a" sourcecolumn="name" into="s1">a.name as name/*Результат рассмотрения*//*string*/
</column></select>
                <from>
from <query name="us_result" as="a" path="./a" haskeys="1" used="1">(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="name" type="string" title="Результат рассмотрения" vid="1" as="name" key="0" sourcetable="./a" sourcecolumn="name" used="1">a.name as name/*Результат рассмотрения*//*string*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from>)
a
--\us_result
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kod_post">a.kod_post</column><text txtype="func"> = </text><const><text>:kod_post </text></const>) </call><text txtype="func"> } </text></call></where>--\us_result_list
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" haskeys="1">
              <queries>
                <query name="us_result_list" as="a">
                  <withparams>
                    <useparam name="kod_post" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_post" type="number" column="result_kod_post">
                  <const>:kod_post </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kod_post" type="number" column="result_kod_post" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_result.kod_post as kod_post, /*Судебный акт*//*number*/
ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.decision_not_otmena as decision_not_otmena, /*number*/
kod_post_x_n.name as kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result, /*number*/
kod_result.kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
 case  when ((kod_result.kod_result != 99)  and (kod_result.decision is not null ) )  then 1 end  as decision_not_otmena/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,a.dat_srok as dat_srok,a.dat_entry as dat_entry  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result,t.d7 as dat_srok,t.d2 as dat_entry  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,a.dat_srok as dat_srok,a.dat_entry as dat_entry  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result,t.d7 as dat_srok,t.d2 as dat_entry  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on ur_hist_mat.kod_result = kod_result.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
kod_post_x_n on kod_result.kod_post = kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_post" table="ur_hist_mat" />
            <dependant name="decision" table="ur_hist_mat" />
            <dependant name="decision_not_otmena" table="ur_hist_mat" />
            <dependant name="kod_post_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_x_n" table="ur_hist_mat" />
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
            <dependant name="decision2" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
            <dependant name="result_kod_post" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="decision" table="ur_hist_mat" type="number" title="" parname="decision" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.decision as decision/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="decision_not_otmena" table="ur_hist_mat" type="number" title="" parname="decision_not_otmena" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision_not_otmena as decision_not_otmena, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((kod_result.kod_result != 99)  and (kod_result.decision is not null ) )  then 1 end  as decision_not_otmena/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_sum_pris_all" table="ur_hist_mat" type="number" title="Всего" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_sum_pris_all1 as ur_hist_mat_sum_pris_all, /*Всего*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  as ur_hist_mat_sum_pris_all1/*Задолженность по решению суда (Всего)*//*number*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec_a_d.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec_a_d.sud_izd_dubl as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl/*% за польз. чуж. ден. ср.*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat_dec_a_d.kod_hist_mat = ur_hist_mat.kod_hist_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="period_zadol_s_vvod" table="ur_hist_mat" type="number" title="Период задолженности с" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="period_zadol_s_vvod" temp-col-name="n5">
          <sel-list-compiled>
            <root>
              <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="ym">ym</column>
                </order>
                <select>--a
select <column table="a" column="ym" key="1" as="ym" used="1" type="number" into="n1">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период" into="s1">a.name as name/*Период*//*string*/
</column></select>
                <from>
from <query name="spr_time_ym" as="a" path="./a/a" order="ym desc" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym
select <column table="a" column="ym" key="1" as="ym" used="1" type="number">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период">a.name as name/*Период*//*string*/
</column></select><from>
from <query name="spr_time_ym_pre" as="a" path="./a/a/a" order="ym" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym_pre
select <call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text> as ym, /*number*//*key*/
</call><call function="ym to char" as="name" title="Период" key="0" group="max" pth="" type="string" used="1">max(<text txtype="func"> trim(to_char( </text><call function="date to ym" as="ym" key="1" pth="" type="number" thissrc="ym">(<text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>) </call><text txtype="func"> ,'9999.99')) </text>)  as name/*Период*//*string*/
</call></select><from>
from <table name="vv_day" as="a" used="1">vv_day
a
--\vv_day
</table></from><group> group by
<call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>/*number*//*key*/
</call></group><order>
order by ym</order>)
a
--\spr_time_ym_pre
</query></from><order>
order by ym desc</order>)
a
--\spr_time_ym
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="le" pth="" type="bool">(<column table="a" column="ym">a.ym</column><text txtype="func"> &lt;= </text><call function="date to ym" pth="" type="number">(<text txtype="func"> to_number(to_char( </text><call function="sysdate" pth="" type="date">(<text txtype="func"> sysdate </text>) </call><text txtype="func"> ,'YYYYMM'))/100 </text>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> in </text><const><text>:obj_name </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> ) like lower( </text><const><text>:ym_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by ym desc</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" as="a">
              <queries>
                <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="obj_name" type="array" />
                    <param name="ym_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="ym" key="1" as="ym" />
                    <column table="a" column="name" vid="1" is-name="1" as="name" />
                  </select>
                  <from>
                    <query name="spr_time_ym" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="le">
                        <column table="a" column="ym" />
                        <call function="date to ym">
                          <call function="sysdate" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="name" />
                        <useparam name="obj_name" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="ym_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="ym" />
                  </order>
                  <order>
                    <column column="ym" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="obj_name" />
                    <useparam name="ym_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="obj_name" type="array">
                  <const>:obj_name </const>
                </param>
                <param name="ym_filter" type="string">
                  <const>:ym_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars />
        </column>
        <column name="period_zadol_po_vvod" table="ur_hist_mat" type="number" title="Период задолженности с" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="period_zadol_po_vvod" temp-col-name="n6">
          <sel-list-compiled>
            <root>
              <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="ym">ym</column>
                </order>
                <select>--a
select <column table="a" column="ym" key="1" as="ym" used="1" type="number" into="n1">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период" into="s1">a.name as name/*Период*//*string*/
</column></select>
                <from>
from <query name="spr_time_ym" as="a" path="./a/a" order="ym desc" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym
select <column table="a" column="ym" key="1" as="ym" used="1" type="number">a.ym as ym, /*number*//*key*/
</column><column table="a" column="name" vid="1" is-name="1" as="name" key="0" used="1" type="string" title="Период">a.name as name/*Период*//*string*/
</column></select><from>
from <query name="spr_time_ym_pre" as="a" path="./a/a/a" order="ym" haskeys="1" used="1">(
<order notext="1"><column column="ym">ym</column></order><select>--spr_time_ym_pre
select <call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text> as ym, /*number*//*key*/
</call><call function="ym to char" as="name" title="Период" key="0" group="max" pth="" type="string" used="1">max(<text txtype="func"> trim(to_char( </text><call function="date to ym" as="ym" key="1" pth="" type="number" thissrc="ym">(<text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>) </call><text txtype="func"> ,'9999.99')) </text>)  as name/*Период*//*string*/
</call></select><from>
from <table name="vv_day" as="a" used="1">vv_day
a
--\vv_day
</table></from><group> group by
<call function="date to ym" as="ym" key="1" group="1" pth="" type="number" used="1"><text txtype="func"> to_number(to_char( </text><column table="a" column="dat_day">a.dat_day</column><text txtype="func"> ,'YYYYMM'))/100 </text>/*number*//*key*/
</call></group><order>
order by ym</order>)
a
--\spr_time_ym_pre
</query></from><order>
order by ym desc</order>)
a
--\spr_time_ym
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="le" pth="" type="bool">(<column table="a" column="ym">a.ym</column><text txtype="func"> &lt;= </text><call function="date to ym" pth="" type="number">(<text txtype="func"> to_number(to_char( </text><call function="sysdate" pth="" type="date">(<text txtype="func"> sysdate </text>) </call><text txtype="func"> ,'YYYYMM'))/100 </text>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> in </text><const><text>:obj_name </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="ym" key="1" as="ym" thissrc="ym">a.ym</column><text txtype="func"> ) like lower( </text><const><text>:ym_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" vid="1" is-name="1" as="name" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by ym desc</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" as="a">
              <queries>
                <query order="ym desc" class="1" comment="Запрос для полей с выбором периода в формах арбитража" timestamp="04.09.2023 14:16:08" file="sql.builder.templates\sql.builder\projects\common\time\spr_time_intervals.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="obj_name" type="array" />
                    <param name="ym_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="ym" key="1" as="ym" />
                    <column table="a" column="name" vid="1" is-name="1" as="name" />
                  </select>
                  <from>
                    <query name="spr_time_ym" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="le">
                        <column table="a" column="ym" />
                        <call function="date to ym">
                          <call function="sysdate" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="name" />
                        <useparam name="obj_name" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="ym" />
                        <useparam name="ym_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="ym" />
                  </order>
                  <order>
                    <column column="ym" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="obj_name" />
                    <useparam name="ym_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="obj_name" type="array">
                  <const>:obj_name </const>
                </param>
                <param name="ym_filter" type="string">
                  <const>:ym_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars />
        </column>
        <column name="osnreal" table="ur_hist_mat" type="number" title="Основная реализация" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="osnreal" temp-col-name="n7">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_osnreal as ostatok_osnreal, /*Осн. реал. *//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal/*Остаток задолженности по осн. реал*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_osnreal" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="peni" table="ur_hist_mat" type="number" title="Проценты (пени)" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="peni" temp-col-name="n8">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_peni as ostatok_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni/*Остаток задолженности по пени*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_peni" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="ogr" table="ur_hist_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="ogr" temp-col-name="n9">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_ogr as ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr/*Остаток задолженности по расходам на ограничения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_ogr" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="gp_otv" table="ur_hist_mat" type="number" title="ГП с ответчика" Exists="decision" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="gp_otv" temp-col-name="n10">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_gp_otv as ostatok_gp_otv, /*ГП*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv/*Остаток задолженности по гос.пошлине*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_gp_otv" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="astrent" table="ur_hist_mat" type="number" title="Астрент" Exists="decision" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="astrent" temp-col-name="n11">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_astrent as ostatok_astrent, /*Астрент*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent/*Остаток задолженности по астренту*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_astrent" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="sud_izd" table="ur_hist_mat" type="number" title="Судебные издержки" Exists="decision" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="sud_izd" temp-col-name="n12">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_sud_izd as ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd/*Остаток задолженности по судебным издержкам*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_sud_izd" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="ur_hist_mat_opl_all" table="ur_hist_mat" type="number" title="Всего" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_opl_all1 as ur_hist_mat_opl_all, /*Всего*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  as ur_hist_mat_opl_all1/*Оплачено до выдачи исп листа (Всего)*//*number*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1/*Оплачено: Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1/*Оплачено: Судебные издержки*//*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1/*Оплачено: Судебные издержки*//*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec_a_d.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1/*Оплачено: Судебные издержки*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat_dec_a_d.kod_hist_mat = ur_hist_mat.kod_hist_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="opl_osnreal" table="ur_hist_mat" type="number" title="Осн. реал." ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_osnreal" temp-col-name="n13">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_osnreal as ostatok_osnreal, /*Осн. реал. *//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal/*Остаток задолженности по осн. реал*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_osnreal" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="opl_peni" table="ur_hist_mat" type="number" title="Проценты (пени)" ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_peni" temp-col-name="n14">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_peni as ostatok_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni/*Остаток задолженности по пени*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_peni" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="opl_ogr" table="ur_hist_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_ogr" temp-col-name="n15">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_ogr as ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr/*Остаток задолженности по расходам на ограничения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_ogr" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="opl_gpotv" table="ur_hist_mat" type="number" title="ГП" ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_gpotv" temp-col-name="n16">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_gp_otv as ostatok_gp_otv, /*ГП*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv/*Остаток задолженности по гос.пошлине*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_gp_otv" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="opl_astrent" table="ur_hist_mat" type="number" title="Астрент" ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_astrent" temp-col-name="n17">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_astrent as ostatok_astrent, /*Астрент*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent/*Остаток задолженности по астренту*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_astrent" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="opl_sud_izd" table="ur_hist_mat" type="number" title="Судебные издержки" ClientExists="decision_not_otmena" ClientEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="opl_sud_izd" temp-col-name="n18">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_sud_izd as ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd/*Остаток задолженности по судебным издержкам*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="ostatok_sud_izd" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="ur_hist_mat_ostatok_zadol_all" table="ur_hist_mat" type="number" title="Всего" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1/*Остаток задолженности (Всего)*//*number*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec_a_d.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec_a_d.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec_a_d.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec_a_d.sud_izd_dubl as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat_dec_a_d.kod_hist_mat = ur_hist_mat.kod_hist_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_osnreal" table="ur_hist_mat" type="number" title="Осн. реал. " ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_osnreal as ostatok_osnreal, /*Осн. реал. *//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal/*Остаток задолженности по осн. реал*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.osnreal as osnreal,a.opl_osnreal as opl_osnreal  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n7 as osnreal,t.n13 as opl_osnreal  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_peni" table="ur_hist_mat" type="number" title="Проценты (пени)" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_peni as ostatok_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni/*Остаток задолженности по пени*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.peni as peni,a.opl_peni as opl_peni  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n8 as peni,t.n14 as opl_peni  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_ogr" table="ur_hist_mat" type="number" title="Расх. за введ. огр. реж. энергопотр." ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_ogr as ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr/*Остаток задолженности по расходам на ограничения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.ogr as ogr,a.opl_ogr as opl_ogr  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n9 as ogr,t.n15 as opl_ogr  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_gp_otv" table="ur_hist_mat" type="number" title="ГП" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_gp_otv as ostatok_gp_otv, /*ГП*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv/*Остаток задолженности по гос.пошлине*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.gp_otv as gp_otv,a.opl_gpotv as opl_gpotv  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n10 as gp_otv,t.n16 as opl_gpotv  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_astrent" table="ur_hist_mat" type="number" title="Астрент" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_astrent as ostatok_astrent, /*Астрент*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent/*Остаток задолженности по астренту*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.astrent as astrent,a.opl_astrent as opl_astrent  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n11 as astrent,t.n17 as opl_astrent  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ostatok_sud_izd" table="ur_hist_mat" type="number" title="Судебные издержки" ClientExists="decision_not_otmena" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.ostatok_sud_izd as ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd/*Остаток задолженности по судебным издержкам*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.sud_izd as sud_izd,a.opl_sud_izd as opl_sud_izd  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n12 as sud_izd,t.n18 as opl_sud_izd  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan" table="ur_hist_mat" type="number" title="Файл" ColumnEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_scan" temp-col-name="n19">
          <sel-list-compiled>
            <root>
              <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_scan" as="kod_scan" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_scan" into="n1">a.kod_scan as kod_scan, /**//*number*//*key*/
</column><column table="a" column="file_name" as="file_name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="file_name" into="s1">a.file_name as file_name/**//*string*/
</column></select>
                <from>
from <query name="ur_scan_docs" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_scan_docs
select <column table="a" column="kod_scan" type="number" comment="уникальный ключ" as="kod_scan" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_scan" used="1">a.kod_scan as kod_scan, /*number*//*key*/
</column><column table="a" column="file_name" type="string" title="" comment="имя файла" vid="1" spec-column="file-name" as="file_name" key="0" sourcetable="./a/a" sourcecolumn="file_name" used="1">a.file_name as file_name/**//*string*/
</column></select><from>
from <table name="ur_scan_docs" as="a" title="Файл" used="1">ur_scan_docs
a
--\ur_scan_docs
</table></from>)
a
--\ur_scan_docs
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> ) like lower( </text><const><text>:kod_scan_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="file_name" as="file_name" title="" thissrc="file_name">a.file_name</column><text txtype="func"> ) like lower( </text><const><text>:file_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" as="a">
              <queries>
                <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_scan_filter" type="string" />
                    <param name="file_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_scan" as="kod_scan" title="" key="1" />
                    <column table="a" column="file_name" as="file_name" title="" />
                  </select>
                  <from>
                    <query name="ur_scan_docs" as="a" title="Файл" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="kod_scan_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="file_name" />
                        <useparam name="file_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_scan_filter" />
                    <useparam name="file_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_scan_filter" type="string">
                  <const>:kod_scan_filter </const>
                </param>
                <param name="file_name_filter" type="string">
                  <const>:file_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_scan_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="prim" table="ur_hist_mat" type="string" title="Примечание" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="prim" temp-col-name="s1" />
        <column name="kod_mat_x_n" table="ur_hist_mat.kod_mat" type="string" title="Материалы переданные в суд" text-source-for="kod_mat" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_zased_x_n" table="ur_hist_mat.kod_zased" type="string" title="Судья" text-source-for="kod_zased" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_post_x_n" table="kod_result.kod_post" type="string" title="Судебный акт" text-source-for="kod_post" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_post_x_n.name as kod_post_x_n, /*Судебный акт*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on ur_hist_mat.kod_result = kod_result.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
kod_post_x_n on kod_result.kod_post = kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result_x_n" table="ur_hist_mat.kod_result" type="string" title="Результат рассмотрения" text-source-for="kod_result" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan_x_n" table="ur_hist_mat.kod_scan" type="string" title="Файл" text-source-for="kod_scan" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_entry_vld" table="ur_hist_mat" type="string" title="Дата вступления, валидация" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="decision2" table="ur_hist_mat" type="number" title="С судебным актом решение и признаком окончательного решения" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2/*С судебным актом решение и признаком окончательного решения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result_vld" table="ur_hist_mat" type="string" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="result_kod_post" table="ur_hist_mat" type="number" title="Судебный акт" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_hist_mat as kod_hist_mat 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_entry as dat_entry 
,:dat_send_il as dat_send_il 
,:dat_post as dat_post 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_srok as dat_srok 
,:kod_result as kod_result 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:gp_otv as gp_otv 
,:astrent as astrent 
,:sud_izd as sud_izd 
,:opl_osnreal as opl_osnreal 
,:opl_peni as opl_peni 
,:opl_ogr as opl_ogr 
,:opl_gpotv as opl_gpotv 
,:opl_astrent as opl_astrent 
,:opl_sud_izd as opl_sud_izd 
,:kod_scan as kod_scan 
,:prim as prim 
 
from dual ) 
 
loop 
insert into ur_hist_mat 
(kod_hist_mat 
,kod_mat 
,kod_zased 
,dat_rassm 
,dat_entry 
,dat_send_il 
,dat_post 
,dat_receipt_post 
,dat_send_petition_il 
,dat_srok 
,kod_result 
,period_zadol_s_vvod 
,period_zadol_po_vvod 
,osnreal 
,peni 
,ogr 
,gp_otv 
,astrent 
,sud_izd 
,opl_osnreal 
,opl_peni 
,opl_ogr 
,opl_gpotv 
,opl_astrent 
,opl_sud_izd 
,kod_scan 
,prim 
) 
 values  
(r.kod_hist_mat 
,r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_entry 
,r.dat_send_il 
,r.dat_post 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_srok 
,r.kod_result 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.gp_otv 
,r.astrent 
,r.sud_izd 
,r.opl_osnreal 
,r.opl_peni 
,r.opl_ogr 
,r.opl_gpotv 
,r.opl_astrent 
,r.opl_sud_izd 
,r.kod_scan 
,r.prim 
) 
 returning  
kod_hist_mat into :kod_hist_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_hist_mat where kod_hist_mat=:kod_hist_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_hist_mat' 
and 
names=:form_id 
and 
f2=:kod_hist_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_hist_mat as kod_hist_mat 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_entry as dat_entry 
,:dat_send_il as dat_send_il 
,:dat_post as dat_post 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_srok as dat_srok 
,:kod_result as kod_result 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:gp_otv as gp_otv 
,:astrent as astrent 
,:sud_izd as sud_izd 
,:opl_osnreal as opl_osnreal 
,:opl_peni as opl_peni 
,:opl_ogr as opl_ogr 
,:opl_gpotv as opl_gpotv 
,:opl_astrent as opl_astrent 
,:opl_sud_izd as opl_sud_izd 
,:kod_scan as kod_scan 
,:prim as prim 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,d1 
,d2 
,d3 
,d4 
,d5 
,d6 
,d7 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,n10 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,s1 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.kod_hist_mat 
,r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_entry 
,r.dat_send_il 
,r.dat_post 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_srok 
,r.kod_result 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.gp_otv 
,r.astrent 
,r.sud_izd 
,r.opl_osnreal 
,r.opl_peni 
,r.opl_ogr 
,r.opl_gpotv 
,r.opl_astrent 
,r.opl_sud_izd 
,r.kod_scan 
,r.prim 
); 
end loop; 
else 
for r in  
 ( select  
:kod_hist_mat as kod_hist_mat 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_entry as dat_entry 
,:dat_send_il as dat_send_il 
,:dat_post as dat_post 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_srok as dat_srok 
,:kod_result as kod_result 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:gp_otv as gp_otv 
,:astrent as astrent 
,:sud_izd as sud_izd 
,:opl_osnreal as opl_osnreal 
,:opl_peni as opl_peni 
,:opl_ogr as opl_ogr 
,:opl_gpotv as opl_gpotv 
,:opl_astrent as opl_astrent 
,:opl_sud_izd as opl_sud_izd 
,:kod_scan as kod_scan 
,:prim as prim 
,a.gp_es 
,a.u_m 
,a.d_m 
,a.ukaz 
,a.kod_stage 
,a.kod_busin 
,a.dat_mor 
,a.kod_hist_mat_new 
,a.dat_vz 
,a.proc 
,a.kodp 
,a.opl_proc 
,a.data_prinyat 
,a.snum_z 
,a.fio_court 
,a.kod_post 
,a.shtraf 
,a.manual_sums 
,a.gp_ret 
,a.proc_calc 
,a.kod_vid_proc 
,a.proc_const 
,a.dat_mor_out 
,a.opl_ogr_dat 
,a.opl_sud_izd_dat 
,a.dat_send_zv 
,a.gosposhlina 
,a.dat_um_mor_dolg 
,a.sum_um_mor_dolg 
,a.kod_osn_um_mor_dolg 
,a.comment_um_mor_dolg 
 
from ur_hist_mat a  where kod_hist_mat=:kod_hist_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,d1 
,d2 
,d3 
,d4 
,d5 
,d6 
,d7 
,n4 
,n5 
,n6 
,n7 
,n8 
,n9 
,n10 
,n11 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,s1 
,n20 
,s2 
,d8 
,s3 
,n21 
,n22 
,d9 
,n23 
,d10 
,n24 
,n25 
,n26 
,d11 
,s4 
,s5 
,n27 
,n28 
,n29 
,n30 
,n31 
,n32 
,n33 
,d12 
,d13 
,d14 
,d15 
,n34 
,d16 
,n35 
,n36 
,s6 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.kod_hist_mat 
,r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_entry 
,r.dat_send_il 
,r.dat_post 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_srok 
,r.kod_result 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.osnreal 
,r.peni 
,r.ogr 
,r.gp_otv 
,r.astrent 
,r.sud_izd 
,r.opl_osnreal 
,r.opl_peni 
,r.opl_ogr 
,r.opl_gpotv 
,r.opl_astrent 
,r.opl_sud_izd 
,r.kod_scan 
,r.prim 
,r.gp_es 
,r.u_m 
,r.d_m 
,r.ukaz 
,r.kod_stage 
,r.kod_busin 
,r.dat_mor 
,r.kod_hist_mat_new 
,r.dat_vz 
,r.proc 
,r.kodp 
,r.opl_proc 
,r.data_prinyat 
,r.snum_z 
,r.fio_court 
,r.kod_post 
,r.shtraf 
,r.manual_sums 
,r.gp_ret 
,r.proc_calc 
,r.kod_vid_proc 
,r.proc_const 
,r.dat_mor_out 
,r.opl_ogr_dat 
,r.opl_sud_izd_dat 
,r.dat_send_zv 
,r.gosposhlina 
,r.dat_um_mor_dolg 
,r.sum_um_mor_dolg 
,r.kod_osn_um_mor_dolg 
,r.comment_um_mor_dolg 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_hist_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_hist_mat set  
(kod_hist_mat 
,kod_mat 
,kod_zased 
,dat_rassm 
,dat_entry 
,dat_send_il 
,dat_post 
,dat_receipt_post 
,dat_send_petition_il 
,dat_srok 
,kod_result 
,period_zadol_s_vvod 
,period_zadol_po_vvod 
,osnreal 
,peni 
,ogr 
,gp_otv 
,astrent 
,sud_izd 
,opl_osnreal 
,opl_peni 
,opl_ogr 
,opl_gpotv 
,opl_astrent 
,opl_sud_izd 
,kod_scan 
,prim 
) 
= 
 ( select  
:kod_hist_mat as kod_hist_mat 
,:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_entry as dat_entry 
,:dat_send_il as dat_send_il 
,:dat_post as dat_post 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_srok as dat_srok 
,:kod_result as kod_result 
,:period_zadol_s_vvod as period_zadol_s_vvod 
,:period_zadol_po_vvod as period_zadol_po_vvod 
,:osnreal as osnreal 
,:peni as peni 
,:ogr as ogr 
,:gp_otv as gp_otv 
,:astrent as astrent 
,:sud_izd as sud_izd 
,:opl_osnreal as opl_osnreal 
,:opl_peni as opl_peni 
,:opl_ogr as opl_ogr 
,:opl_gpotv as opl_gpotv 
,:opl_astrent as opl_astrent 
,:opl_sud_izd as opl_sud_izd 
,:kod_scan as kod_scan 
,:prim as prim 
 
from dual ) 
 
where 
kod_hist_mat=:kod_hist_mat 
;
end;
</update-text>
      <scheme>
        <table name="ur_hist_mat" as="ur_hist_mat">
          <columns>
            <column name="kod_hist_mat" type="number" title="" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_zased" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_rassm" type="date" title="Дата суд. разб." />
            <column name="dat_entry" type="date" title="Дата вст. реш. в зак. силу" />
            <column name="dat_send_il" type="date" title="Дата направления ИЛ в филиал" />
            <column name="dat_post" type="date" title="Дата прин. суд. акта" />
            <column name="dat_receipt_post" type="date" title="Дата пол. суд. акта" />
            <column name="dat_send_petition_il" type="date" title="Дата напр. ход-ва о выдаче ИЛ" />
            <column name="dat_srok" type="date" title="Срок обжалования решения" />
            <column name="kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="decision" type="number" title="" visible="0" />
            <column name="decision_not_otmena" type="number" title="" visible="0" />
            <column name="ur_hist_mat_sum_pris_all" type="number" title="Всего" />
            <column name="period_zadol_s_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
            <column name="period_zadol_po_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
            <column name="osnreal" type="number" title="Основная реализация" />
            <column name="peni" type="number" title="Проценты (пени)" />
            <column name="ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="gp_otv" type="number" title="ГП с ответчика" />
            <column name="astrent" type="number" title="Астрент" />
            <column name="sud_izd" type="number" title="Судебные издержки" />
            <column name="ur_hist_mat_opl_all" type="number" title="Всего" />
            <column name="opl_osnreal" type="number" title="Осн. реал." />
            <column name="opl_peni" type="number" title="Проценты (пени)" />
            <column name="opl_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="opl_gpotv" type="number" title="ГП" />
            <column name="opl_astrent" type="number" title="Астрент" />
            <column name="opl_sud_izd" type="number" title="Судебные издержки" />
            <column name="ur_hist_mat_ostatok_zadol_all" type="number" title="Всего" />
            <column name="ostatok_osnreal" type="number" title="Осн. реал. " />
            <column name="ostatok_peni" type="number" title="Проценты (пени)" />
            <column name="ostatok_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
            <column name="ostatok_gp_otv" type="number" title="ГП" />
            <column name="ostatok_astrent" type="number" title="Астрент" />
            <column name="ostatok_sud_izd" type="number" title="Судебные издержки" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="kod_mat_x_n" type="string" title="Материалы переданные в суд" visible="0" />
            <column name="kod_zased_x_n" type="string" title="Судья" />
            <column name="kod_post_x_n" type="string" title="Судебный акт" />
            <column name="kod_result_x_n" type="string" title="Результат рассмотрения" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="dat_entry_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="decision2" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="result_kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="kod_hist_mat" type="number" title="" visible="0" />
            <column name="kod_mat_x_n" type="string" title="Материалы переданные в суд" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_zased_x_n" type="string" title="Судья" />
            <column name="kod_zased" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_rassm" type="date" title="Дата суд. разб." />
            <column name="dat_entry" type="date" title="Дата вст. реш. в зак. силу" />
            <column name="dat_send_il" type="date" title="Дата направления ИЛ в филиал" />
            <column name="dat_post" type="date" title="Дата прин. суд. акта" />
            <column name="dat_receipt_post" type="date" title="Дата пол. суд. акта" />
            <column name="dat_send_petition_il" type="date" title="Дата напр. ход-ва о выдаче ИЛ" />
            <column name="dat_srok" type="date" title="Срок обжалования решения" />
            <column name="kod_post_x_n" type="string" title="Судебный акт" />
            <column name="kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result_x_n" type="string" title="Результат рассмотрения" />
            <column name="kod_result" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="decision" type="number" title="" visible="0" />
            <column name="decision_not_otmena" type="number" title="" visible="0" />
            <band title="Задолженность по решению суда">
              <column name="ur_hist_mat_sum_pris_all" type="number" title="Всего" />
              <column name="period_zadol_s_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
              <column name="period_zadol_po_vvod" type="number" format="F2" edit-mask="F2" title="Период задолженности с" />
              <column name="osnreal" type="number" title="Основная реализация" />
              <column name="peni" type="number" title="Проценты (пени)" />
              <column name="ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="gp_otv" type="number" title="ГП с ответчика" />
              <column name="astrent" type="number" title="Астрент" />
              <column name="sud_izd" type="number" title="Судебные издержки" />
            </band>
            <band title="Оплата по. реш. суда до выдачи исп. листа">
              <column name="ur_hist_mat_opl_all" type="number" title="Всего" />
              <column name="opl_osnreal" type="number" title="Осн. реал." />
              <column name="opl_peni" type="number" title="Проценты (пени)" />
              <column name="opl_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="opl_gpotv" type="number" title="ГП" />
              <column name="opl_astrent" type="number" title="Астрент" />
              <column name="opl_sud_izd" type="number" title="Судебные издержки" />
            </band>
            <band title="Остаток задол.  по реш. суда до выд. исп. листа">
              <column name="ur_hist_mat_ostatok_zadol_all" type="number" title="Всего" />
              <column name="ostatok_osnreal" type="number" title="Осн. реал. " />
              <column name="ostatok_peni" type="number" title="Проценты (пени)" />
              <column name="ostatok_ogr" type="number" title="Расх. за введ. огр. реж. энергопотр." />
              <column name="ostatok_gp_otv" type="number" title="ГП" />
              <column name="ostatok_astrent" type="number" title="Астрент" />
              <column name="ostatok_sud_izd" type="number" title="Судебные издержки" />
            </band>
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="prim" type="string" title="Примечание" />
            <column name="dat_entry_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="decision2" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="result_kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_hist_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_hist_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.kod_zased as kod_zased, /*Судья*//*number*/
ur_hist_mat.dat_rassm as dat_rassm, /*Дата суд. разб.*//*date*/
ur_hist_mat.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
ur_hist_mat.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
ur_hist_mat.dat_receipt_post as dat_receipt_post, /*Дата пол. суд. акта*//*date*/
ur_hist_mat.dat_send_petition_il as dat_send_petition_il, /*Дата напр. ход-ва о выдаче ИЛ*//*date*/
ur_hist_mat.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
kod_result.kod_post as kod_post, /*Судебный акт*//*number*/
ur_hist_mat.kod_result as kod_result, /*Результат рассмотрения*//*number*/
ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.decision_not_otmena as decision_not_otmena, /*number*/
qube.ur_hist_mat_sum_pris_all1 as ur_hist_mat_sum_pris_all, /*Всего*//*number*/
ur_hist_mat.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с*//*number*/
ur_hist_mat.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности с*//*number*/
ur_hist_mat.osnreal as osnreal, /*Основная реализация*//*number*/
ur_hist_mat.peni as peni, /*Проценты (пени)*//*number*/
ur_hist_mat.ogr as ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.gp_otv as gp_otv, /*ГП с ответчика*//*number*/
ur_hist_mat.astrent as astrent, /*Астрент*//*number*/
ur_hist_mat.sud_izd as sud_izd, /*Судебные издержки*//*number*/
qube.ur_hist_mat_opl_all1 as ur_hist_mat_opl_all, /*Всего*//*number*/
ur_hist_mat.opl_osnreal as opl_osnreal, /*Осн. реал.*//*number*/
ur_hist_mat.opl_peni as opl_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.opl_ogr as opl_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.opl_gpotv as opl_gpotv, /*ГП*//*number*/
ur_hist_mat.opl_astrent as opl_astrent, /*Астрент*//*number*/
ur_hist_mat.opl_sud_izd as opl_sud_izd, /*Судебные издержки*//*number*/
qube.ur_hist_mat_ostatok_zadol_all1 as ur_hist_mat_ostatok_zadol_all, /*Всего*//*number*/
ur_hist_mat.ostatok_osnreal as ostatok_osnreal, /*Осн. реал. *//*number*/
ur_hist_mat.ostatok_peni as ostatok_peni, /*Проценты (пени)*//*number*/
ur_hist_mat.ostatok_ogr as ostatok_ogr, /*Расх. за введ. огр. реж. энергопотр.*//*number*/
ur_hist_mat.ostatok_gp_otv as ostatok_gp_otv, /*ГП*//*number*/
ur_hist_mat.ostatok_astrent as ostatok_astrent, /*Астрент*//*number*/
ur_hist_mat.ostatok_sud_izd as ostatok_sud_izd, /*Судебные издержки*//*number*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
kod_post_x_n.name as kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new/*number*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  as ur_hist_mat_sum_pris_all1, /*Задолженность по решению суда (Всего)*//*number*/
sum( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  as ur_hist_mat_opl_all1, /*Оплачено до выдачи исп листа (Всего)*//*number*/
sum( nvl( ( nvl( qube.ur_hist_mat_osnreal1 ,0)  +nvl( qube.ur_hist_mat_peni1 ,0)  +nvl( qube.ur_hist_mat_ogr1 ,0)  +nvl( qube.ur_hist_mat_gp_otv1 ,0)  +nvl( qube.ur_hist_mat_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_astrent1 ,0) )  ,0)  -nvl( ( nvl( qube.ur_hist_mat_opl_osnreal1 ,0)  +nvl( qube.ur_hist_mat_opl_peni1 ,0)  +nvl( qube.ur_hist_mat_opl_gpotv1 ,0)  +nvl( qube.ur_hist_mat_opl_sud_izd1 ,0)  +nvl( qube.ur_hist_mat_opl_ogr1 ,0)  +nvl( qube.ur_hist_mat_opl_astrent1 ,0) )  ,0) )  as ur_hist_mat_ostatok_zadol_all1, /*Остаток задолженности (Всего)*//*number*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1, /*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_astrent1 as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1, /*number*/
qube.ur_hist_mat_gp_otv1 as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
qube.ur_hist_mat_ogr1 as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_astrent1 as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_gpotv1 as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
qube.ur_hist_mat_opl_ogr1 as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
qube.ur_hist_mat_opl_osnreal1 as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_peni1 as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
qube.ur_hist_mat_opl_sud_izd1 as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
qube.ur_hist_mat_osnreal1 as ur_hist_mat_osnreal1, /*number*/
qube.ur_hist_mat_peni1 as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
qube.ur_hist_mat_sud_izd1 as ur_hist_mat_sud_izd1/*Судебные издержки*//*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_astrent1)  as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
sum(un.ur_hist_mat_gp_otv1)  as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
sum(un.ur_hist_mat_ogr1)  as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_astrent1)  as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_gpotv1)  as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
sum(un.ur_hist_mat_opl_ogr1)  as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
sum(un.ur_hist_mat_opl_osnreal1)  as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_peni1)  as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
sum(un.ur_hist_mat_opl_sud_izd1)  as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
sum(un.ur_hist_mat_osnreal1)  as ur_hist_mat_osnreal1, /*number*/
sum(un.ur_hist_mat_peni1)  as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
sum(un.ur_hist_mat_sud_izd1)  as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select ur_hist_mat_dec_a_d.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_a_d.astrent as ur_hist_mat_astrent1, /*Астрент (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.gp_otv_dubl as ur_hist_mat_gp_otv1, /*Гос. пошлина, взысканная с ответчика*//*number*/
ur_hist_mat_dec_a_d.ogr_dubl as ur_hist_mat_ogr1, /*Расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_astrent as ur_hist_mat_opl_astrent1, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_gpotv as ur_hist_mat_opl_gpotv1, /*Оплачено ГП*//*number*/
ur_hist_mat_dec_a_d.opl_ogr_dubl as ur_hist_mat_opl_ogr1, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
ur_hist_mat_dec_a_d.opl_osnreal as ur_hist_mat_opl_osnreal1, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_peni as ur_hist_mat_opl_peni1, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
ur_hist_mat_dec_a_d.opl_sud_izd_dubl as ur_hist_mat_opl_sud_izd1, /*Оплачено: Судебные издержки*//*number*/
ur_hist_mat_dec_a_d.osnreal as ur_hist_mat_osnreal1, /*number*/
ur_hist_mat_dec_a_d.peni_dubl as ur_hist_mat_peni1, /*% за польз. чуж. ден. ср.*//*number*/
ur_hist_mat_dec_a_d.sud_izd_dubl as ur_hist_mat_sud_izd1, /*Судебные издержки*//*number*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat_dec
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.osnreal as osnreal, /**//*number*/
a.kod_hist_mat as kod_hist_mat_desc, /*number*//*key*/
a.gp_otv as gp_otv_dubl, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd_dubl, /*Судебные издержки*//*number*/
a.ogr as ogr_dubl, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.peni as peni_dubl, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr_dubl, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.opl_sud_izd as opl_sud_izd_dubl/*Оплачено: Судебные издержки*//*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_a_d
--\ur_hist_mat_dec
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat_dec_a_d.kod_hist_mat = ur_hist_mat.kod_hist_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_astrent1, /*number*/
null as ur_hist_mat_gp_otv1, /*number*/
null as ur_hist_mat_ogr1, /*number*/
null as ur_hist_mat_opl_astrent1, /*number*/
null as ur_hist_mat_opl_gpotv1, /*number*/
null as ur_hist_mat_opl_ogr1, /*number*/
null as ur_hist_mat_opl_osnreal1, /*number*/
null as ur_hist_mat_opl_peni1, /*number*/
null as ur_hist_mat_opl_sud_izd1, /*number*/
null as ur_hist_mat_osnreal1, /*number*/
null as ur_hist_mat_peni1, /*number*/
null as ur_hist_mat_sud_izd1, /*number*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_rassm as dat_rassm, /*Дата/время суд. разб.*//*date*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.gp_otv as gp_otv, /*Гос. пошлина, взысканная с ответчика*//*number*/
a.sud_izd as sud_izd, /*Судебные издержки*//*number*/
a.astrent as astrent, /*Астрент (ручной ввод)*//*number*/
a.opl_peni as opl_peni, /*Оплачено пени до выдачи исп листа (ручной ввод)*//*number*/
a.opl_astrent as opl_astrent, /*Оплачено астрент до выдачи исп листа (ручной ввод)*//*number*/
a.opl_osnreal as opl_osnreal, /*Оплачено осн реал до выдачи исп листа (ручной ввод)*//*number*/
a.opl_gpotv as opl_gpotv, /*Оплачено ГП*//*number*/
a.ogr as ogr, /*Расходы за введение ограничения режима энергопотребления*//*number*/
a.osnreal as osnreal, /**//*number*/
a.peni as peni, /*% за польз. чуж. ден. ср.*//*number*/
a.opl_ogr as opl_ogr, /*Оплачено: расходы за введение ограничения режима энергопотребления*//*number*/
a.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
a.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
a.opl_sud_izd as opl_sud_izd, /*Оплачено: Судебные издержки*//*number*/
a.kod_scan as kod_scan, /*number*/
a.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
a.dat_receipt_post as dat_receipt_post, /**//*date*/
a.dat_send_petition_il as dat_send_petition_il, /**//*date*/
a.period_zadol_s_vvod as period_zadol_s_vvod, /*Период задолженности с (ручной ввод)*//*number*/
a.period_zadol_po_vvod as period_zadol_po_vvod, /*Период задолженности по (ручной ввод)*//*number*/
 nvl( a.osnreal ,0)  -nvl( a.opl_osnreal ,0)  as ostatok_osnreal, /*Остаток задолженности по осн. реал*//*number*/
 nvl( a.peni ,0)  -nvl( a.opl_peni ,0)  as ostatok_peni, /*Остаток задолженности по пени*//*number*/
 nvl( a.gp_otv ,0)  -nvl( a.opl_gpotv ,0)  as ostatok_gp_otv, /*Остаток задолженности по гос.пошлине*//*number*/
 nvl( a.ogr ,0)  -nvl( a.opl_ogr ,0)  as ostatok_ogr, /*Остаток задолженности по расходам на ограничения*//*number*/
 nvl( a.sud_izd ,0)  -nvl( a.opl_sud_izd ,0)  as ostatok_sud_izd, /*Остаток задолженности по судебным издержкам*//*number*/
 nvl( a.astrent ,0)  -nvl( a.opl_astrent ,0)  as ostatok_astrent, /*Остаток задолженности по астренту*//*number*/
kod_result.kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
 case  when ((kod_result.kod_result != 99)  and (kod_result.decision is not null ) )  then 1 end  as decision_not_otmena, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_rassm as dat_rassm,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.gp_otv as gp_otv,a.sud_izd as sud_izd,a.astrent as astrent,a.opl_peni as opl_peni,a.opl_astrent as opl_astrent,a.opl_osnreal as opl_osnreal,a.opl_gpotv as opl_gpotv,a.ogr as ogr,a.osnreal as osnreal,a.peni as peni,a.opl_ogr as opl_ogr,a.dat_entry as dat_entry,a.dat_srok as dat_srok,a.opl_sud_izd as opl_sud_izd,a.kod_scan as kod_scan,a.dat_send_il as dat_send_il,a.dat_receipt_post as dat_receipt_post,a.dat_send_petition_il as dat_send_petition_il,a.period_zadol_s_vvod as period_zadol_s_vvod,a.period_zadol_po_vvod as period_zadol_po_vvod,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result,t.d1 as dat_rassm,t.d4 as dat_post,t.s1 as prim,t.n3 as kod_zased,t.n10 as gp_otv,t.n12 as sud_izd,t.n11 as astrent,t.n14 as opl_peni,t.n17 as opl_astrent,t.n13 as opl_osnreal,t.n16 as opl_gpotv,t.n9 as ogr,t.n7 as osnreal,t.n8 as peni,t.n15 as opl_ogr,t.d2 as dat_entry,t.d7 as dat_srok,t.n18 as opl_sud_izd,t.n19 as kod_scan,t.d3 as dat_send_il,t.d5 as dat_receipt_post,t.d6 as dat_send_petition_il,t.n5 as period_zadol_s_vvod,t.n6 as period_zadol_po_vvod,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_rassm as dat_rassm,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.gp_otv as gp_otv,a.sud_izd as sud_izd,a.astrent as astrent,a.opl_peni as opl_peni,a.opl_astrent as opl_astrent,a.opl_osnreal as opl_osnreal,a.opl_gpotv as opl_gpotv,a.ogr as ogr,a.osnreal as osnreal,a.peni as peni,a.opl_ogr as opl_ogr,a.dat_entry as dat_entry,a.dat_srok as dat_srok,a.opl_sud_izd as opl_sud_izd,a.kod_scan as kod_scan,a.dat_send_il as dat_send_il,a.dat_receipt_post as dat_receipt_post,a.dat_send_petition_il as dat_send_petition_il,a.period_zadol_s_vvod as period_zadol_s_vvod,a.period_zadol_po_vvod as period_zadol_po_vvod,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result,t.d1 as dat_rassm,t.d4 as dat_post,t.s1 as prim,t.n3 as kod_zased,t.n10 as gp_otv,t.n12 as sud_izd,t.n11 as astrent,t.n14 as opl_peni,t.n17 as opl_astrent,t.n13 as opl_osnreal,t.n16 as opl_gpotv,t.n9 as ogr,t.n7 as osnreal,t.n8 as peni,t.n15 as opl_ogr,t.d2 as dat_entry,t.d7 as dat_srok,t.n18 as opl_sud_izd,t.n19 as kod_scan,t.d3 as dat_send_il,t.d5 as dat_receipt_post,t.d6 as dat_send_petition_il,t.n5 as period_zadol_s_vvod,t.n6 as period_zadol_po_vvod,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on ur_hist_mat.kod_result = kod_result.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
kod_post_x_n on kod_result.kod_post = kod_post_x_n.kod_post--\us_post
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>