<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="hs_terr" show-toolbar="1" title="Зоны обхода" timestamp="28.12.2023 14:42:35" with-behavior="0" file="sql.builder.templates\sql.builder\projects\asuse2\reports\byt\forms.xml" elid="163" ord="163" leaf="0" lvl="2" pelid="">
    <splitcontainer id="62225572">
      <fieldgroup title=" " id="59502678">
        <grid table="hs_terr" show-checkbox="1" id="7453716">
          <columns id="65983295">
            <field table="hs_terr" name="name" title="Наименование" controlType="UIText" rows-limit="100" id="6679408" />
          </columns>
        </grid>
      </fieldgroup>
      <fieldgroup title="  " id="6238887">
        <grid table="hr_terr_addr" id="53298324">
          <columns id="27595933">
            <field table="hr_terr_addr" name="guid" title="Адреса" controlType="UICombo" rows-limit="100" id="66634218" />
          </columns>
        </grid>
      </fieldgroup>
    </splitcontainer>
    <toolbar id="44754654">
      <uicommand button-type="form-save" column-visible="0" name="form-save" control-name="ButtonSave" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="371" ord="371" leaf="1" lvl="2" pelid="" title="" id="9621001" />
      <uicommand button-type="form-refresh" column-visible="0" name="form-refresh" control-name="ButtonRefresh" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="373" ord="373" leaf="1" lvl="2" pelid="" title="" id="40151034" />
      <uicommand button-type="form-save-and-close" column-visible="0" name="form-save-and-close" control-name="ButtonSaveAndClose" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="372" ord="372" leaf="1" lvl="2" pelid="" title="" id="47630018" />
      <uicommand button-type="form-choice" column-visible="1" name="form-choice" control-name="ButtonChoice" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="374" ord="374" leaf="1" lvl="2" pelid="" title="" id="41362986" />
    </toolbar>
  </form>
  <dataset>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="hs_terr_has_changes" parname="hs_terr_has_changes" />
      <field type="string" name="hr_terr_addr_has_changes" parname="hr_terr_addr_has_changes" />
    </fields>
    <table name="hs_terr" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="hs_terr" column-editable="0" key="kod_terr" is-ms-upd="1" is-top="1">
      <select-text>
--
select hs_terr.name as name, /*Наименование*//*string*/
hs_terr.is_new as is_new, /*number*/
hs_terr.is_not_new as is_not_new, /*number*/
hs_terr.kod_terr as kod_terr/*number*//*key*/

from (
--hs_terr
select a.kod_terr as kod_terr, /*number*//*key*/
a.name as name, /*Наименование*//*string*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from hs_terr
a
--\hs_terr
)
hs_terr
--\hs_terr
--\
</select-text>
      <columns>
        <column name="name" table="hs_terr" type="string" title="Наименование" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="name" temp-col-name="s1" />
        <column name="is_new" table="hs_terr" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="hs_terr" type="number" title="" is-user-editable="1" />
        <column name="kod_terr" table="hs_terr" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_terr" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:name as name 
,:kod_terr as kod_terr 
 
from dual ) 
 
loop 
insert into hs_terr 
(name 
,kod_terr 
) 
 values  
(r.name 
,r.kod_terr 
) 
 returning  
kod_terr into :kod_terr; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from hs_terr where kod_terr=:kod_terr</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='hs_terr' 
and 
names=:form_id 
and 
f2=:kod_terr; 
if :row_state_id=1  then 
for r in  
 ( select  
:name as name 
,:kod_terr as kod_terr 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n1 
) 
 values  
('hs_terr' 
,:form_id 
,:kod_terr 
,:row_state_id 
,r.name 
,r.kod_terr 
); 
end loop; 
else 
for r in  
 ( select  
:name as name 
,:kod_terr as kod_terr 
,a.rdate 
,a.xmlmap 
,a.pr_active 
 
from hs_terr a  where kod_terr=:kod_terr) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n1 
,d1 
, 1 
,n2 
) 
 values  
('hs_terr' 
,:form_id 
,:kod_terr 
,:row_state_id 
,r.name 
,r.kod_terr 
,r.rdate 
,r.xmlmap 
,r.pr_active 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='hs_terr' and names=:form_id</clear-temp-text>
      <update-text>begin
update hs_terr set  
(name 
,kod_terr 
) 
= 
 ( select  
:name as name 
,:kod_terr as kod_terr 
 
from dual ) 
 
where 
kod_terr=:kod_terr 
;
end;
</update-text>
      <scheme>
        <table name="hs_terr" as="hs_terr">
          <columns>
            <column name="name" type="string" title="Наименование" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_terr" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="name" type="string" title="Наименование" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_terr" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_terr_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_terr_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select hs_terr.name as name, /*Наименование*//*string*/
hs_terr.is_new as is_new, /*number*/
hs_terr.is_not_new as is_not_new, /*number*/
hs_terr.kod_terr as kod_terr/*number*//*key*/

from (
--hs_terr
select a.kod_terr as kod_terr, /*number*//*key*/
a.name as name, /*Наименование*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_terr as kod_terr,a.name as name,0 as is_new,1 as is_not_new  from hs_terr a where not exists (select * from rr_temp t where t.skod ='hs_terr' and t.names=:form_id  and a.kod_terr=t.f2 ) and   a.kod_terr in :kod_terr_prm   union all  select t.n1 as kod_terr,t.s1 as name,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='hs_terr' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_terr_prm )
a
--\(select a.kod_terr as kod_terr,a.name as name,0 as is_new,1 as is_not_new  from hs_terr a where not exists (select * from rr_temp t where t.skod ='hs_terr' and t.names=:form_id  and a.kod_terr=t.f2 ) and   a.kod_terr in :kod_terr_prm   union all  select t.n1 as kod_terr,t.s1 as name,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='hs_terr' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_terr_prm )
)
hs_terr
--\hs_terr
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="hr_terr_addr" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="hr_terr_addr" column-editable="0" key="hr_terr_addr_id" parent-table="hs_terr" parent-key="kod_terr" is-ms-upd="1">
      <select-text>
--
select hr_terr_addr.guid as guid, /*Адреса*//*number*/
guid_x_n.kf_adress_o as guid_x_n, /*Адреса*//*string*/
hr_terr_addr.is_new as is_new, /*number*/
hr_terr_addr.is_not_new as is_not_new, /*number*/
hr_terr_addr.hr_terr_addr_id as hr_terr_addr_id, /*number*//*key*/
hr_terr_addr.kod_terr as kod_terr/*number*/

from (
--hr_terr_addr
select a.kod_terr as kod_terr, /*number*/
a.guid as guid, /**//*number*/
 rownum  as hr_terr_addr_id, /*number*//*key*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from hr_terr_addr
a
--\hr_terr_addr
)
hr_terr_addr
--\hr_terr_addr
left outer join
(
--k_house
select a.kodd as kodd, /**//*number*//*key*/
a.kf_adress_o as kf_adress_o/*Адрес*//*string*/

from k_house
a
--\k_house
)
guid_x_n on hr_terr_addr.guid = guid_x_n.kodd--\k_house
where
hr_terr_addr.kod_terr = :fk_kod_terr --\
</select-text>
      <columns>
        <column name="guid" table="hr_terr_addr" type="number" title="Адреса" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="guid" temp-col-name="n1">
          <sel-list-compiled>
            <root>
              <query class="1" timestamp="23.10.2017 18:57:35" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\k_house.xml" elid="2849" ord="2849" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kodd" as="kodd" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kodd" into="n1">a.kodd as kodd, /**//*number*//*key*/
</column><column table="a" column="nd" as="nd" title="Номер дома" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="nd" into="n2">a.nd as nd, /*Номер дома*//*number*/
</column><column table="a" column="kf_adress_o" as="kf_adress_o" title="Адрес" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="kf_adress_o" into="s1">a.kf_adress_o as kf_adress_o, /*Адрес*//*string*/
</column><column table="a" column="house_name" as="house_name" title="Дом" key="0" used="1" type="string" into="s2">a.house_name as house_name, /*Дом*//*string*/
</column><column table="a" column="house_ext_name" as="house_ext_name" title="Адрес" key="0" used="1" type="string" sourcetable="./a/a/kod_s" sourcecolumn="name" into="s3">a.house_ext_name as house_ext_name, /*Адрес*//*string*/
</column><column table="a" column="flat_name" as="flat_name" title="Квартира" key="0" used="1" type="string" into="s4">a.flat_name as flat_name, /*Квартира*//*string*/
</column><column table="a" column="has_odn" as="has_odn" title="Наличие схемы ОДН" key="0" used="1" into=" 1">a.has_odn as has_odn/*Наличие схемы ОДН*/
</column></select>
                <from>
from <query name="k_house" as="a" path="./a/a" haskeys="1" used="1">(
<select>--k_house
select <column table="a" column="kodd" type="number" title="" as="kodd" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kodd" used="1">a.kodd as kodd, /**//*number*//*key*/
</column><column table="a" column="nd" type="number" comment="номер дома" title="Номер дома" as="nd" key="0" sourcetable="./a/a" sourcecolumn="nd" used="1">a.nd as nd, /*Номер дома*//*number*/
</column><column table="a" column="kf_adress_o" type="string" title="Адрес" comment="вспомогательное поле. хранит резальтат работы функции nk_adress.kf_address(n_r =&gt; 0,n_kod =&gt; код дома). актуальность значений поддерживается тригерами на таблицах adr_m, k_strits, k_house" is-name="1" as="kf_adress_o" key="0" sourcetable="./a/a" sourcecolumn="kf_adress_o" used="1">a.kf_adress_o as kf_adress_o, /*Адрес*//*string*/
</column><call function="||" as="house_name" title="Дом" key="0" pth="" type="string" used="1"><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd">a.nd</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><const><text>' д.'</text></const><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><call function="lpad" pth="" type="string">(<text txtype="func"> lpad( </text><call function="||" pth="" type="string">(<call function="int to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="nd">a.nd</column><text txtype="func"> ) </text>) </call><text txtype="func"> || </text><column table="a" column="nd_str">a.nd_str</column>) </call><text txtype="func"> , </text><const><text>8</text></const><text txtype="func"> ) </text>) </call><text txtype="func"> ) </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd2">a.nd2</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>'-'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd2">a.nd2</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd1">a.nd1</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>'/'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd1">a.nd1</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd1_str">a.nd1_str</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' '</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd1_str">a.nd1_str</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="vlad">a.vlad</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' вл.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="vlad">a.vlad</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nk">a.nk</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' к.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nk">a.nk</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nstr">a.nstr</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' стр.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nstr">a.nstr</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call> as house_name, /*Дом*//*string*/
</call><call function="||" as="house_ext_name" title="Адрес" key="0" pth="" type="string" used="1" sourcetable="./a/a/kod_s" sourcecolumn="name"><column table="kod_s" column="name">kod_s.name</column><text txtype="func"> || </text><const><text>' '</text></const><text txtype="func"> || </text><call function="||" as="house_name" title="Дом" key="0" pth="" type="string" thissrc="house_name">(<call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd">a.nd</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><const><text>' д.'</text></const><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><call function="lpad" pth="" type="string">(<text txtype="func"> lpad( </text><call function="||" pth="" type="string">(<call function="int to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="nd">a.nd</column><text txtype="func"> ) </text>) </call><text txtype="func"> || </text><column table="a" column="nd_str">a.nd_str</column>) </call><text txtype="func"> , </text><const><text>8</text></const><text txtype="func"> ) </text>) </call><text txtype="func"> ) </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd2">a.nd2</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>'-'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd2">a.nd2</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd1">a.nd1</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>'/'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd1">a.nd1</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nd1_str">a.nd1_str</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' '</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nd1_str">a.nd1_str</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="vlad">a.vlad</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' вл.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="vlad">a.vlad</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nk">a.nk</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' к.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nk">a.nk</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call><text txtype="func"> || </text><call function="if" pth="">(<text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="nstr">a.nstr</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>' стр.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="nstr">a.nstr</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text>) </call>) </call> as house_ext_name, /*Адрес*//*string*/
</call><call function="if" as="flat_name" title="Квартира" key="0" pth="" used="1" type="string"><text txtype="func"> case </text><text txtype="func"> when </text><call function="is null" pth="" type="bool">(<column table="a" column="flat">a.flat</column><text txtype="func"> is null </text>) </call><text txtype="func"> then </text><const><text>''</text></const><text txtype="func"> else </text><call function="||" pth="" type="string">(<const><text>'кв.'</text></const><text txtype="func"> || </text><call function="trim" pth="" type="string">(<text txtype="func"> TRIM( </text><column table="a" column="flat">a.flat</column><text txtype="func"> ) </text>) </call>) </call><text txtype="func"> end </text> as flat_name, /*Квартира*//*string*/
</call><call function="if" as="has_odn" title="Наличие схемы ОДН" key="0" pth="" used="1"><text txtype="func"> case </text><text txtype="func"> when </text><call function="is not null" pth="" type="bool">(<column table="kr_object_odn" column="kod_obj" dgroup="max">kr_object_odn.kod_obj</column><text txtype="func"> is not null </text>) </call><text txtype="func"> then </text><const><text>1</text></const><text txtype="func"> else </text><const><text>0</text></const><text txtype="func"> end </text> as has_odn/*Наличие схемы ОДН*/
</call></select><from>
from <table name="k_house" as="a" used="1">k_house
a
--\k_house
</table><query as="kr_object_odn" join="left outer" path="./a/a/kr_object_odn" used="1">left outer join
(
<select>--
select <column table="kr_object_odn" column="kodd" group="1" as="kodd" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kodd" reference="k_house" refcol="kodd">kr_object_odn.kodd as kodd, /*number*//*key*/
</column><column table="kr_object_odn" group="max" column="kod_obj" as="kod_obj" key="0" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kod_obj">max(kr_object_odn.kod_obj)  as kod_obj/*number*/
</column></select><from>
from <query name="kr_object_odn" as="kr_object_odn" path="./a/a/kr_object_odn/kr_object_odn" haskeys="1" used="1">(
<select>--kr_object_odn
select <column table="a" column="kod_obj" as="kod_obj" key="1" fixed="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kod_obj">a.kod_obj as kod_obj, /*number*//*key*/
</column><column table="a" column="kodd" as="kodd" reference="k_house" refcol="kodd" key="0" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kodd">a.kodd as kodd/*number*/
</column></select><from>
from <query name="kr_object" as="a" path="./a/a/kr_object_odn/kr_object_odn/a" haskeys="1" used="1">(
<select>--kr_object
select <column table="a" column="kod_obj" type="number" comment="код потребителя" key-dimension="kod_obj" as="kod_obj" key="1" fixed="1" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kod_obj" used="1">a.kod_obj as kod_obj, /*number*//*key*/
</column><column table="a" column="kodd" type="number" title="" as="kodd" reference="k_house" refcol="kodd" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kodd" used="1">a.kodd as kodd, /**//*number*/
</column><column table="a" column="tep_el" type="number" title="" comment="признак&#xA;0 -единый&#xA;1- электричество&#xA;2-тепло" as="tep_el" reference="kk_tep_el" refcol="tep_el" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="tep_el" used="1">a.tep_el as tep_el, /**//*number*/
</column><column table="a" column="tep_el_byt" type="number" title="" comment="признак для быта&#xA;0 -единый&#xA;1- электричество&#xA;2-тепло" as="tep_el_byt" reference="kk_tep_el" refcol="tep_el" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="tep_el_byt" used="1">a.tep_el_byt as tep_el_byt/**//*number*/
</column></select><from>
from <table name="kr_object" as="a" used="1">kr_object
a
--\kr_object
</table></from>)
a
--\kr_object
</query><query as="kr_numobj" join="left outer" path="./a/a/kr_object_odn/kr_object_odn/kr_numobj" used="1">left outer join
(
<select>--
select <column table="kr_numobj" column="kod_obj" group="1" as="kod_obj" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" sourcecolumn="kod_obj" reference="kr_object" refcol="kod_obj">kr_numobj.kod_obj as kod_obj, /*number*//*key*/
</column><column table="kr_numobj" group="max" column="kod_numobj" as="kod_numobj" key="0" used="1" type="number" agg="max" sourcetable="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" sourcecolumn="kod_numobj">max(kr_numobj.kod_numobj)  as kod_numobj/*number*/
</column></select><from>
from <query name="kr_numobj" as="kr_numobj" path="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" haskeys="1" used="1">(
<select>--kr_numobj
select <column table="a" column="kod_numobj" type="number" comment="код объекта в договоре" key-dimension="kod_numobj" fact="kr_numobj_kod_numobj" agg="max" as="kod_numobj" key="1" fixed="1" sourcetable="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" sourcecolumn="kod_numobj" used="1">a.kod_numobj as kod_numobj, /*number*//*key*/
</column><column table="a" column="kod_obj" type="number" as="kod_obj" reference="kr_object" refcol="kod_obj" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" sourcecolumn="kod_obj" used="1">a.kod_obj as kod_obj/*number*/
</column></select><from>
from <table name="kr_numobj" as="a" used="1">kr_numobj
a
--\kr_numobj
</table></from>)
kr_numobj
--\kr_numobj
</query></from><group> group by
<column table="kr_numobj" column="kod_obj" group="1" as="kod_obj" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/kr_numobj/kr_numobj" sourcecolumn="kod_obj" reference="kr_object" refcol="kod_obj">kr_numobj.kod_obj/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
kr_numobj on <column table="kr_numobj" column="kod_obj">kr_numobj.kod_obj</column><text txtype="func"> = </text><column table="a" column="kod_obj">a.kod_obj</column></call>--\
</query><query as="hr_point" join="left outer" path="./a/a/kr_object_odn/kr_object_odn/hr_point" used="1">left outer join
(
<select>--
select <column table="hr_point" column="kod_obj" group="1" as="kod_obj" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_obj">hr_point.kod_obj as kod_obj, /*number*//*key*/
</column><column table="hr_point" group="max" column="kod_point" as="kod_point" key="0" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_point">max(hr_point.kod_point)  as kod_point/*number*/
</column></select><from>
from <query name="hr_point" as="hr_point" path="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" haskeys="1" used="1">(
<select>--hr_point
select <column table="a" column="kod_point" type="number" comment="код ту" as="kod_point" key="1" fixed="1" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_point" used="1">a.kod_point as kod_point, /*number*//*key*/
</column><column table="a" column="kod_obj" type="number" comment="код потребителя" as="kod_obj" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_obj" used="1">a.kod_obj as kod_obj, /*number*/
</column><column table="a" column="kod_pointmain" type="number" comment="код ту" as="kod_pointmain" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_pointmain" used="1">a.kod_pointmain as kod_pointmain, /*number*/
</column><column table="a" column="nagruz_type" type="number" title="" comment="тип назначения нагузки (для расчёта вдр):&#xA;0 - не указана&#xA;1 - общая&#xA;2 - вдр (моп)&#xA;3 - бытовая&#xA;4 - юл" as="nagruz_type" key="0" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="nagruz_type" used="1">a.nagruz_type as nagruz_type/**//*number*/
</column></select><from>
from <table name="hr_point" as="a" used="1">hr_point
a
--\hr_point
</table></from>)
hr_point
--\hr_point
</query></from><where>where
<call function="and" pth="" type="bool"><call function="is null" pth="" type="bool">(<column table="hr_point" column="kod_pointmain">hr_point.kod_pointmain</column><text txtype="func"> is null </text>) </call><text txtype="func"> and </text><call function="=" pth="" type="bool">(<column table="hr_point" column="nagruz_type">hr_point.nagruz_type</column><text txtype="func"> = </text><const><text>1</text></const>) </call></call></where><group> group by
<column table="hr_point" column="kod_obj" group="1" as="kod_obj" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/hr_point/hr_point" sourcecolumn="kod_obj">hr_point.kod_obj/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
hr_point on <column table="hr_point" column="kod_obj">hr_point.kod_obj</column><text txtype="func"> = </text><column table="a" column="kod_obj">a.kod_obj</column></call>--\
</query></from><where>where
<call function="and" pth="" type="bool"><call function="=" pth="" type="bool">(<column table="a" column="tep_el">a.tep_el</column><text txtype="func"> = </text><const><text>4</text></const>) </call><text txtype="func"> and </text><call function="in" pth="" type="bool">(<column table="a" column="tep_el_byt">a.tep_el_byt</column><text txtype="func"> in </text><const><text>(0,1)</text></const>) </call><text txtype="func"> and </text><call function="is not null" pth="" type="bool">(<column table="hr_point" column="kod_point" dgroup="max">hr_point.kod_point</column><text txtype="func"> is not null </text>) </call><text txtype="func"> and </text><call function="is null" pth="" type="bool">(<column table="kr_numobj" column="kod_numobj" dgroup="max">kr_numobj.kod_numobj</column><text txtype="func"> is null </text>) </call></call></where>)
kr_object_odn
--\kr_object_odn
</query></from><group> group by
<column table="kr_object_odn" column="kodd" group="1" as="kodd" key="1" used="1" type="number" sourcetable="./a/a/kr_object_odn/kr_object_odn/a" sourcecolumn="kodd" reference="k_house" refcol="kodd">kr_object_odn.kodd/*number*//*key*/
</column></group><call function="=" pth="" type="bool">)
kr_object_odn on <column table="kr_object_odn" column="kodd">kr_object_odn.kodd</column><text txtype="func"> = </text><column table="a" column="kodd">a.kodd</column></call>--\
</query><query name="k_strits" as="kod_s" join="left outer" path="./a/a/kod_s" haskeys="1" used="1">left outer join
(
<select>--k_strits
select <column table="a" column="kod" type="number" title="" as="kod" key="1" fixed="1" sourcetable="./a/a/kod_s" sourcecolumn="kod" used="1">a.kod as kod, /**//*number*//*key*/
</column><column table="a" column="name" type="string" comment="наименование" vid="1" title="Улица" as="name" key="0" sourcetable="./a/a/kod_s" sourcecolumn="name" used="1">a.name as name/*Улица*//*string*/
</column></select><from>
from <table name="k_strits" as="a" used="1">k_strits
a
--\k_strits
</table></from><call function="=" type="bool">)
kod_s on <column table="a" column="kod_s">a.kod_s</column><text txtype="func"> = </text><column table="kod_s" column="kod">kod_s.kod</column></call>--\k_strits
</query></from>)
a
--\k_house
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kodd" as="kodd" title="" key="1" thissrc="kodd">a.kodd</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kodd" as="kodd" title="" key="1" thissrc="kodd">a.kodd</column><text txtype="func"> ) like lower( </text><const><text>:kodd_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="nd" as="nd" title="Номер дома" thissrc="nd">a.nd</column><text txtype="func"> ) like lower( </text><const><text>:nd_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kf_adress_o" as="kf_adress_o" title="Адрес" thissrc="kf_adress_o">a.kf_adress_o</column><text txtype="func"> ) like lower( </text><const><text>:kf_adress_o_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="house_name" as="house_name" title="Дом" thissrc="house_name">a.house_name</column><text txtype="func"> ) like lower( </text><const><text>:house_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="house_ext_name" as="house_ext_name" title="Адрес" thissrc="house_ext_name">a.house_ext_name</column><text txtype="func"> ) like lower( </text><const><text>:house_ext_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="flat_name" as="flat_name" title="Квартира" thissrc="flat_name">a.flat_name</column><text txtype="func"> ) like lower( </text><const><text>:flat_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="has_odn" as="has_odn" title="Наличие схемы ОДН" thissrc="has_odn">a.has_odn</column><text txtype="func"> ) like lower( </text><const><text>:has_odn_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" timestamp="23.10.2017 18:57:35" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\k_house.xml" elid="2849" ord="2849" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" timestamp="23.10.2017 18:57:35" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\k_house.xml" elid="2849" ord="2849" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kodd_filter" type="string" />
                    <param name="nd_filter" type="string" />
                    <param name="kf_adress_o_filter" type="string" />
                    <param name="house_name_filter" type="string" />
                    <param name="house_ext_name_filter" type="string" />
                    <param name="flat_name_filter" type="string" />
                    <param name="has_odn_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kodd" as="kodd" title="" key="1" />
                    <column table="a" column="nd" as="nd" title="Номер дома" />
                    <column table="a" column="kf_adress_o" as="kf_adress_o" title="Адрес" />
                    <column table="a" column="house_name" as="house_name" title="Дом" />
                    <column table="a" column="house_ext_name" as="house_ext_name" title="Адрес" />
                    <column table="a" column="flat_name" as="flat_name" title="Квартира" />
                    <column table="a" column="has_odn" as="has_odn" title="Наличие схемы ОДН" />
                  </select>
                  <from>
                    <query name="k_house" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kodd" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kodd" />
                        <useparam name="kodd_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="nd" />
                        <useparam name="nd_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kf_adress_o" />
                        <useparam name="kf_adress_o_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="house_name" />
                        <useparam name="house_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="house_ext_name" />
                        <useparam name="house_ext_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="flat_name" />
                        <useparam name="flat_name_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="has_odn" />
                        <useparam name="has_odn_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kodd_filter" />
                    <useparam name="nd_filter" />
                    <useparam name="kf_adress_o_filter" />
                    <useparam name="house_name_filter" />
                    <useparam name="house_ext_name_filter" />
                    <useparam name="flat_name_filter" />
                    <useparam name="has_odn_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kodd_filter" type="string">
                  <const>:kodd_filter </const>
                </param>
                <param name="nd_filter" type="string">
                  <const>:nd_filter </const>
                </param>
                <param name="kf_adress_o_filter" type="string">
                  <const>:kf_adress_o_filter </const>
                </param>
                <param name="house_name_filter" type="string">
                  <const>:house_name_filter </const>
                </param>
                <param name="house_ext_name_filter" type="string">
                  <const>:house_ext_name_filter </const>
                </param>
                <param name="flat_name_filter" type="string">
                  <const>:flat_name_filter </const>
                </param>
                <param name="has_odn_filter" type="string">
                  <const>:has_odn_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="hr_terr_addr">
              <params>
                <param name="hr_terr_addr_id_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="hr_terr_addr_id_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select guid_x_n.kf_adress_o as guid_x_n, /*Адреса*//*string*/
hr_terr_addr.hr_terr_addr_id as hr_terr_addr_id/*number*//*key*/

from (
--hr_terr_addr
select a.guid as guid, /**//*number*/
 rownum  as hr_terr_addr_id/*number*//*key*/

from (select a.guid as guid  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n1 as guid  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
a
--\(select a.guid as guid  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n1 as guid  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
)
hr_terr_addr
--\hr_terr_addr
left outer join
(
--k_house
select a.kodd as kodd, /**//*number*//*key*/
a.kf_adress_o as kf_adress_o/*Адрес*//*string*/

from k_house
a
--\k_house
)
guid_x_n on hr_terr_addr.guid = guid_x_n.kodd--\k_house
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="guid_x_n" table="hr_terr_addr" />
          </dependants>
        </column>
        <column name="guid_x_n" table="hr_terr_addr.guid" type="string" title="Адреса" text-source-for="guid" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="hr_terr_addr_id_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="hr_terr_addr_id_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select guid_x_n.kf_adress_o as guid_x_n, /*Адреса*//*string*/
hr_terr_addr.hr_terr_addr_id as hr_terr_addr_id/*number*//*key*/

from (
--hr_terr_addr
select a.guid as guid, /**//*number*/
 rownum  as hr_terr_addr_id/*number*//*key*/

from (select a.guid as guid  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n1 as guid  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
a
--\(select a.guid as guid  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n1 as guid  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
)
hr_terr_addr
--\hr_terr_addr
left outer join
(
--k_house
select a.kodd as kodd, /**//*number*//*key*/
a.kf_adress_o as kf_adress_o/*Адрес*//*string*/

from k_house
a
--\k_house
)
guid_x_n on hr_terr_addr.guid = guid_x_n.kodd--\k_house
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="hr_terr_addr" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="hr_terr_addr" type="number" title="" is-user-editable="1" />
        <column name="hr_terr_addr_id" table="hr_terr_addr" type="number" title="" is-user-editable="1" />
        <column name="kod_terr" table="hr_terr_addr" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_terr" temp-col-name="n2">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\hs_terr.xml" elid="2734" ord="2734" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_terr" as="kod_terr" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_terr" into="n1">a.kod_terr as kod_terr, /**//*number*//*key*/
</column><column table="a" column="name" as="name" title="Наименование" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Наименование*//*string*/
</column></select>
                <from>
from <query name="hs_terr" as="a" path="./a/a" haskeys="1" used="1">(
<select>--hs_terr
select <column table="a" column="kod_terr" type="number" comment="наименование территории (зоны на карте)" as="kod_terr" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_terr" used="1">a.kod_terr as kod_terr, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Наименование" comment="наименование территории (зоны)" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Наименование*//*string*/
</column></select><from>
from <table name="hs_terr" as="a" used="1">hs_terr
a
--\hs_terr
</table></from>)
a
--\hs_terr
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_terr" as="kod_terr" title="" key="1" thissrc="kod_terr">a.kod_terr</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_terr" as="kod_terr" title="" key="1" thissrc="kod_terr">a.kod_terr</column><text txtype="func"> ) like lower( </text><const><text>:kod_terr_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Наименование" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\hs_terr.xml" elid="2734" ord="2734" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\hs_terr.xml" elid="2734" ord="2734" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_terr_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_terr" as="kod_terr" title="" key="1" />
                    <column table="a" column="name" as="name" title="Наименование" />
                  </select>
                  <from>
                    <query name="hs_terr" as="a" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_terr" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_terr" />
                        <useparam name="kod_terr_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_terr_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_terr_filter" type="string">
                  <const>:kod_terr_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:guid as guid 
,:kod_terr as kod_terr 
 
from dual ) 
 
loop 
insert into hr_terr_addr 
(guid 
,kod_terr 
) 
 values  
(r.guid 
,r.kod_terr 
) 
 returning  
hr_terr_addr_id into :hr_terr_addr_id; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from hr_terr_addr where hr_terr_addr_id=:hr_terr_addr_id</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='hr_terr_addr' 
and 
names=:form_id 
and 
f2=:hr_terr_addr_id; 
if :row_state_id=1  then 
for r in  
 ( select  
:guid as guid 
,:kod_terr as kod_terr 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
) 
 values  
('hr_terr_addr' 
,:form_id 
,:hr_terr_addr_id 
,:row_state_id 
,r.guid 
,r.kod_terr 
); 
end loop; 
else 
for r in  
 ( select  
:guid as guid 
,:kod_terr as kod_terr 
 
from hr_terr_addr a  where hr_terr_addr_id=:hr_terr_addr_id) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
) 
 values  
('hr_terr_addr' 
,:form_id 
,:hr_terr_addr_id 
,:row_state_id 
,r.guid 
,r.kod_terr 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='hr_terr_addr' and names=:form_id</clear-temp-text>
      <update-text>begin
update hr_terr_addr set  
(guid 
,kod_terr 
) 
= 
 ( select  
:guid as guid 
,:kod_terr as kod_terr 
 
from dual ) 
 
where 
hr_terr_addr_id=:hr_terr_addr_id 
;
end;
</update-text>
      <scheme>
        <table name="hr_terr_addr" as="hr_terr_addr">
          <columns>
            <column name="guid" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="guid_x_n" type="string" title="Адреса" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="hr_terr_addr_id" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_terr" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="guid_x_n" type="string" title="Адреса" />
            <column name="guid" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="hr_terr_addr_id" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_terr" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="hr_terr_addr_id_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="hr_terr_addr_id_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select hr_terr_addr.guid as guid, /*Адреса*//*number*/
guid_x_n.kf_adress_o as guid_x_n, /*Адреса*//*string*/
hr_terr_addr.is_new as is_new, /*number*/
hr_terr_addr.is_not_new as is_not_new, /*number*/
hr_terr_addr.hr_terr_addr_id as hr_terr_addr_id, /*number*//*key*/
hr_terr_addr.kod_terr as kod_terr/*number*/

from (
--hr_terr_addr
select a.kod_terr as kod_terr, /*number*/
a.guid as guid, /**//*number*/
 rownum  as hr_terr_addr_id, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_terr as kod_terr,a.guid as guid,0 as is_new,1 as is_not_new  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n2 as kod_terr,t.n1 as guid,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
a
--\(select a.kod_terr as kod_terr,a.guid as guid,0 as is_new,1 as is_not_new  from hr_terr_addr a where not exists (select * from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and a.=t.f2 ) and   a. in :hr_terr_addr_id_prm   union all  select t.n2 as kod_terr,t.n1 as guid,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='hr_terr_addr' and t.names=:form_id  and t.f3!=3  and t.f2 in :hr_terr_addr_id_prm )
)
hr_terr_addr
--\hr_terr_addr
left outer join
(
--k_house
select a.kodd as kodd, /**//*number*//*key*/
a.kf_adress_o as kf_adress_o/*Адрес*//*string*/

from k_house
a
--\k_house
)
guid_x_n on hr_terr_addr.guid = guid_x_n.kodd--\k_house
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
  </dataset>
</root>