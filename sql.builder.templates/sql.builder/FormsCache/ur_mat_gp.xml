<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_mat_gp" title="Госпошлина истца" form-size="932;732" with-behavior="0" timestamp="28.12.2023 14:56:50" file="sql.builder.templates\sql.builder\projects\asuse2\reports\arbitrage\forms.xml" elid="279" ord="279" leaf="0" lvl="2" pelid="">
    <field table="ur_mat" name="num_delo" title="Номер дела" controlType="UIText" rows-limit="100" id="28424242" />
    <field table="ur_mat_gp_missing_opl" name="missing_opl" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="51258589" />
    <grid table="ur_mat_gp" show-toolbar="1" show-footer="1" id="61887868">
      <toolbar id="26368823">
        <uicommand button-type="grid-save" column-visible="0" name="grid-save" control-name="ButtonCommit" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="365" ord="365" leaf="1" lvl="2" pelid="" title="" id="33677042" />
        <uicommand action-type="custom" button-type="custom-commit" name="custom-commit" icon="Commit_24" title="Сохранить" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="378" ord="378" leaf="1" lvl="2" pelid="" id="44584314">
          <useaction action-type="save" id="40052769" />
          <useaction action-type="execute-update" call="ur_mat_update_sum_gp" id="33773374">
            <useparam name="kod_mat" id="42421997" />
          </useaction>
          <useaction action-type="refresh-table" object="ur_mat_gp_missing_opl" id="45158387" />
        </uicommand>
        <uicommand action-type="custom" button-type="custom-save-and-close" name="custom-save-and-close" icon="CommitAndClose_24" title="Сохранить и закрыть" file="sql.builder.templates\sql.builder\projects\common\main.xml" elid="380" ord="380" leaf="1" lvl="2" pelid="" id="49879519">
          <useaction action-type="save" id="14158450" />
          <useaction action-type="execute-update" call="ur_mat_update_sum_gp" id="42638694">
            <useparam name="kod_mat" id="12200348" />
          </useaction>
          <useaction action-type="close" id="45258297" />
        </uicommand>
      </toolbar>
      <columns id="67010354">
        <field table="ur_mat_gp" name="num" title="Номер" width="200" controlType="UIText" rows-limit="100" id="55370362" />
        <field table="ur_mat_gp" name="dat" title="Дата" width="100" controlType="UIDate" rows-limit="100" id="56104319" />
        <field table="ur_mat_gp" name="opl" title="Сумма" controlType="UIText" edit-mask="N2" rows-limit="100" id="5106740" />
      </columns>
    </grid>
  </form>
  <params>
    <param name="kod_mat" type="number">
      <const>235</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="kod_mat" type="number">
        <const>235</const>
      </param>
    </params>
    <fields>
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_mat_has_changes" parname="ur_mat_has_changes" />
      <field type="string" name="ur_mat_gp_has_changes" parname="ur_mat_gp_has_changes" />
      <field type="string" name="ur_mat_gp_missing_opl_has_changes" parname="ur_mat_gp_missing_opl_has_changes" />
    </fields>
    <table name="ur_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" is-ms-upd="1" is-top="1" key-dimension="kod_mat">
      <select-text>
--
select ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
(ur_mat.kod_mat = :kod_mat )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
(ur_mat.kod_mat = :kod_mat )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat
--\ur_mat
where
(ur_mat.kod_mat = :kod_mat )  and (ur_mat.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</select-text>
      <columns>
        <column name="num_delo" table="ur_mat" type="string" title="Номер дела" ColumnEditable="0" Mandatory="qube.ur_hist_mat_count" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s1" />
        <column name="ur_hist_mat_count" table="ur_mat" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="ur_mat" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat" table="ur_mat" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:num_delo as num_delo 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat 
(num_delo 
,kod_mat 
) 
 values  
(r.num_delo 
,r.kod_mat 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_mat' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:num_delo as num_delo 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n3 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:num_delo as num_delo 
,:kod_mat as kod_mat 
,a.kod_folders 
,a.kod_doc 
,a.kod_ssp 
,a.num_reg 
,a.dat_otv 
,a.kod_ret_isk 
,a.dat_prin 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.dat_otz 
,a.dat_doc 
,a.fio_otz 
,a.kod_subject 
,a.prichina_otz 
,a.sum_gp 
,a.prim 
,a.dat_gp 
,a.kod_sud 
,a.num_pp_gp 
,a.kod_parent 
,a.kodp 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.kod_scan 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.dat_post_mat_pio 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,n3 
,n4 
,n5 
,n6 
,s2 
,d1 
,n7 
,d2 
,s3 
,d3 
,s4 
,d4 
,d5 
,s5 
,n8 
,s6 
,n9 
,s7 
,d6 
,n10 
,s8 
,n11 
,n1 
,n12 
,n13 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,d7 
,s9 
,n22 
,n23 
,n24 
,n25 
,n26 
,n27 
,s10 
,s11 
,n28 
,s12 
,d8 
,n29 
,s13 
,d9 
,n30 
,n31 
,d10 
,d11 
,n32 
,d12 
,s14 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.kod_mat 
,r.kod_folders 
,r.kod_doc 
,r.kod_ssp 
,r.num_reg 
,r.dat_otv 
,r.kod_ret_isk 
,r.dat_prin 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.dat_otz 
,r.dat_doc 
,r.fio_otz 
,r.kod_subject 
,r.prichina_otz 
,r.sum_gp 
,r.prim 
,r.dat_gp 
,r.kod_sud 
,r.num_pp_gp 
,r.kod_parent 
,r.kodp 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.kod_scan 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.dat_post_mat_pio 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(num_delo 
,kod_mat 
) 
= 
 ( select  
:num_delo as num_delo 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction action-type="execute-update" call="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="ur_mat">
          <columns>
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,a.num_delo as num_delo,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.num_delo as num_delo,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n3 as kod_mat,t.s1 as num_delo,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_mat_gp" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat_gp" key="kod_mat_gp" parent-table="ur_mat" parent-key="kod_mat" is-ms-upd="1">
      <select-text>
--
select ur_mat_gp.num as num, /*Номер*//*string*/
ur_mat_gp.dat as dat, /*Дата*//*date*/
ur_mat_gp.opl as opl, /*Сумма*//*number*/
ur_mat_gp.is_new as is_new, /*number*/
ur_mat_gp.is_not_new as is_not_new, /*number*/
ur_mat_gp.kod_mat_gp as kod_mat_gp, /*number*//*key*/
ur_mat_gp.kod_mat as kod_mat/*number*/

from (
--ur_mat_gp
select a.kod_mat_gp as kod_mat_gp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.num as num, /**//*string*/
a.dat as dat, /**//*date*/
a.opl as opl, /**//*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat_gp
a
--\ur_mat_gp
)
ur_mat_gp
--\ur_mat_gp
where
ur_mat_gp.kod_mat = :fk_kod_mat --\
</select-text>
      <columns>
        <column name="num" table="ur_mat_gp" type="string" title="Номер" ColumnEditable="1" is-user-editable="1" ColumnMandatory="0" is-updateable="1" is-updateable-ext="1" update-target="num" temp-col-name="s1" />
        <column name="dat" table="ur_mat_gp" type="date" title="Дата" ColumnEditable="1" is-user-editable="1" ColumnDefault="cur-date" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat" temp-col-name="d1" />
        <column name="opl" table="ur_mat_gp" type="number" title="Сумма" ColumnEditable="1" is-user-editable="1" ClientDefault="missing_opl" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="opl" temp-col-name="n1" />
        <column name="is_new" table="ur_mat_gp" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_mat_gp" type="number" title="" is-user-editable="1" />
        <column name="kod_mat_gp" table="ur_mat_gp" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat_gp" temp-col-name="n2" />
        <column name="kod_mat" table="ur_mat_gp" type="number" title="Материалы переданные в суд" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_mat" as="kod_mat" title="" key="1" used="1" type="number" agg="max" sourcetable="./a/a" sourcecolumn="kod_mat" into="n1">a.kod_mat as kod_mat, /**//*number*//*key*/
</column><column table="a" column="num_reg" as="num_reg" title="Номер иска" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="num_reg" into="s1">a.num_reg as num_reg, /*Номер иска*//*string*/
</column><column table="a" column="name" as="name" title="Иск" key="0" used="1" type="string" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" into="s2">a.name as name/*Иск*//*string*/
</column></select>
                <from>
from <query name="ur_mat" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_mat
select <column table="a" column="kod_mat" type="number" key-dimension="kod_mat" fact="ur_mat_kod_mat" agg="max" as="kod_mat" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_mat" used="1">a.kod_mat as kod_mat, /*number*//*key*/
</column><column table="a" column="num_reg" type="string" title="Номер иска" vid="1" as="num_reg" key="0" sourcetable="./a/a" sourcecolumn="num_reg" used="1">a.num_reg as num_reg, /*Номер иска*//*string*/
</column><call function="||" as="name" title="Иск" key="0" pth="" type="string" used="1" sourcetable="./a/a/kod_doc" sourcecolumn="abbr"><column table="kod_doc" column="abbr">kod_doc.abbr</column><text txtype="func"> || </text><const><text>'  '</text></const><text txtype="func"> || </text><column table="a" column="num_delo">a.num_delo</column><text txtype="func"> || </text><const><text>' от '</text></const><text txtype="func"> || </text><call function="date to char" pth="" type="string">(<text txtype="func"> to_char( </text><column table="a" column="dat_doc">a.dat_doc</column><text txtype="func"> ,'DD.MM.YYYY') </text>) </call> as name/*Иск*//*string*/
</call></select><from>
from <table name="ur_mat" as="a" title="Материалы переданные в суд" used="1">ur_mat
a
--\ur_mat
</table><query name="us_doc" as="kod_doc" join="left outer" path="./a/a/kod_doc" haskeys="1" used="1">left outer join
(
<select>--us_doc
select <column table="a" column="kod_doc" type="number" as="kod_doc" key="1" fixed="1" sourcetable="./a/a/kod_doc" sourcecolumn="kod_doc" used="1">a.kod_doc as kod_doc, /*number*//*key*/
</column><column table="a" column="abbr" type="string" title="Аббревиатура" vid="1" as="abbr" key="0" sourcetable="./a/a/kod_doc" sourcecolumn="abbr" used="1">a.abbr as abbr/*Аббревиатура*//*string*/
</column></select><from>
from <table name="us_doc" as="a" title="Документ" used="1">us_doc
a
--\us_doc
</table></from><call function="=" type="bool">)
kod_doc on <column table="a" column="kod_doc">a.kod_doc</column><text txtype="func"> = </text><column table="kod_doc" column="kod_doc">kod_doc.kod_doc</column></call>--\us_doc
</query></from>)
a
--\ur_mat
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_mat" as="kod_mat" title="" key="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_mat" as="kod_mat" title="" key="1" thissrc="kod_mat">a.kod_mat</column><text txtype="func"> ) like lower( </text><const><text>:kod_mat_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="num_reg" as="num_reg" title="Номер иска" thissrc="num_reg">a.num_reg</column><text txtype="func"> ) like lower( </text><const><text>:num_reg_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" title="Иск" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" as="a">
              <queries>
                <query title="Материалы переданные в суд" class="1" delete-validation="qube.ur_dp_exists_vld" timestamp="17.09.2023 23:47:33" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_mat.xml" elid="2997" ord="2997" leaf="0" lvl="2" pelid="" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_mat_filter" type="string" />
                    <param name="num_reg_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_mat" as="kod_mat" title="" key="1" />
                    <column table="a" column="num_reg" as="num_reg" title="Номер иска" />
                    <column table="a" column="name" as="name" title="Иск" />
                  </select>
                  <from>
                    <query name="ur_mat" as="a" title="Материалы переданные в суд" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_mat" />
                        <useparam name="kod_mat_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="num_reg" />
                        <useparam name="num_reg_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_mat_filter" />
                    <useparam name="num_reg_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_mat_filter" type="string">
                  <const>:kod_mat_filter </const>
                </param>
                <param name="num_reg_filter" type="string">
                  <const>:num_reg_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
        </column>
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:num as num 
,:dat as dat 
,:opl as opl 
,:kod_mat_gp as kod_mat_gp 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat_gp 
(num 
,dat 
,opl 
,kod_mat_gp 
,kod_mat 
) 
 values  
(r.num 
,r.dat 
,r.opl 
,r.kod_mat_gp 
,r.kod_mat 
) 
 returning  
kod_mat_gp into :kod_mat_gp; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat_gp where kod_mat_gp=:kod_mat_gp</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_mat_gp' 
and 
names=:form_id 
and 
f2=:kod_mat_gp; 
if :row_state_id=1  then 
for r in  
 ( select  
:num as num 
,:dat as dat 
,:opl as opl 
,:kod_mat_gp as kod_mat_gp 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,d1 
,n1 
,n2 
,n3 
) 
 values  
('ur_mat_gp' 
,:form_id 
,:kod_mat_gp 
,:row_state_id 
,r.num 
,r.dat 
,r.opl 
,r.kod_mat_gp 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:num as num 
,:dat as dat 
,:opl as opl 
,:kod_mat_gp as kod_mat_gp 
,:kod_mat as kod_mat 
,a.u_m 
,a.d_m 
 
from ur_mat_gp a  where kod_mat_gp=:kod_mat_gp) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s1 
,d1 
,n1 
,n2 
,n3 
,s2 
,d2 
) 
 values  
('ur_mat_gp' 
,:form_id 
,:kod_mat_gp 
,:row_state_id 
,r.num 
,r.dat 
,r.opl 
,r.kod_mat_gp 
,r.kod_mat 
,r.u_m 
,r.d_m 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_mat_gp' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat_gp set  
(num 
,dat 
,opl 
,kod_mat_gp 
,kod_mat 
) 
= 
 ( select  
:num as num 
,:dat as dat 
,:opl as opl 
,:kod_mat_gp as kod_mat_gp 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat_gp=:kod_mat_gp 
;
end;
</update-text>
      <scheme>
        <table name="ur_mat_gp" as="ur_mat_gp">
          <columns>
            <column name="num" type="string" title="Номер" />
            <column name="dat" type="date" title="Дата" />
            <column name="opl" type="number" title="Сумма" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat_gp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns>
            <column name="num" type="string" title="Номер" />
            <column name="dat" type="date" title="Дата" />
            <column name="opl" type="number" title="Сумма" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat_gp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </viewcolumns>
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_gp_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_gp_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_mat_gp.num as num, /*Номер*//*string*/
ur_mat_gp.dat as dat, /*Дата*//*date*/
ur_mat_gp.opl as opl, /*Сумма*//*number*/
ur_mat_gp.is_new as is_new, /*number*/
ur_mat_gp.is_not_new as is_not_new, /*number*/
ur_mat_gp.kod_mat_gp as kod_mat_gp, /*number*//*key*/
ur_mat_gp.kod_mat as kod_mat/*number*/

from (
--ur_mat_gp
select a.kod_mat_gp as kod_mat_gp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.num as num, /**//*string*/
a.dat as dat, /**//*date*/
a.opl as opl, /**//*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat_gp as kod_mat_gp,a.kod_mat as kod_mat,a.num as num,a.dat as dat,a.opl as opl,0 as is_new,1 as is_not_new  from ur_mat_gp a where not exists (select * from rr_temp t where t.skod ='ur_mat_gp' and t.names=:form_id  and a.kod_mat_gp=t.f2 ) and   a.kod_mat_gp in :kod_mat_gp_prm   union all  select t.n2 as kod_mat_gp,t.n3 as kod_mat,t.s1 as num,t.d1 as dat,t.n1 as opl,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat_gp' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_gp_prm )
a
--\(select a.kod_mat_gp as kod_mat_gp,a.kod_mat as kod_mat,a.num as num,a.dat as dat,a.opl as opl,0 as is_new,1 as is_not_new  from ur_mat_gp a where not exists (select * from rr_temp t where t.skod ='ur_mat_gp' and t.names=:form_id  and a.kod_mat_gp=t.f2 ) and   a.kod_mat_gp in :kod_mat_gp_prm   union all  select t.n2 as kod_mat_gp,t.n3 as kod_mat,t.s1 as num,t.d1 as dat,t.n1 as opl,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat_gp' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_gp_prm )
)
ur_mat_gp
--\ur_mat_gp
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_mat_gp_missing_opl" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_mat_gp_missing_opl" key="missing_opl" is-ms-upd="0" is-top="1">
      <select-text>
--
select ur_mat_gp_missing_opl.missing_opl as missing_opl/*Выст. по юр. док. всего*//*number*/

from (
--ur_mat_gp_missing_opl
select (
--
select ur_mat_calc_gp.sum_gp as sum_gp/*Выст. по юр. док. всего*//*number*/

from (
--ur_mat_calc_gp
select  ur_read_bd.f_gp_doc ( 1 , qube.ur_dp_sum_all1 )  as sum_gp/*Выст. по юр. док. всего*//*number*/

from (
--
select sum( case  when (kod_dogplat.vid_real != 9)  then qube.ur_dp_summa1 end )  as ur_dp_sum_all1/*Выст. по юр. док. всего*//*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.kod_dogplat as kod_dogplat, /*number*/
qube.ur_dp_summa1 as ur_dp_summa1/*Выставленно по юр. документу*//*number*/

from (
(
(
--
select null as kod_dogplat, 
qube.kod_mat as kod_mat, /*number*//*key*/
null as ur_dp_summa1/*number*/

from (
--
select un.kod_mat as kod_mat/*number*//*key*/

from (
(
(
--
select a.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a
--\ur_mat
where
(a.kod_mat =  :kod_mat )  and (a.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
union all
(
--
select qube.kod_dogplat as kod_dogplat, /*number*//*key*/
qube.kod_mat as kod_mat, /*number*/
qube.ur_dp_summa1 as ur_dp_summa1/*Выставленно по юр. документу*//*number*/

from (
--
select un.kod_dogplat as kod_dogplat, /*number*//*key*/
un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dp_summa1)  as ur_dp_summa1/*Выставленно по юр. документу*//*number*/

from (
(
(
--
select kod_dogplat.kod_dogplat as kod_dogplat, /*number*//*key*/
kod_dogplat.kod_mat as kod_mat, /*number*/
kod_dogplat.summa as ur_dp_summa1/*Выставленно по юр. документу*//*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.summa as summa, /*Выставленно по юр. документу*//*number*/
a.kod_mat as kod_mat/*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
a on kod_dogplat.kod_mat = a.kod_mat--\ur_mat
where
(a.kod_mat =  :kod_mat )  and (a.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_dogplat, /*number*//*key*/
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.vid_real as vid_real/**//*number*/

from ur_dogplat
a
--\ur_dogplat
)
kod_dogplat on kod_dogplat.kod_dogplat = qube.kod_dogplat--\ur_dogplat
)
qube
--\
)
ur_mat_calc_gp
--\ur_mat_calc_gp
)
--\
 - ( nvl( (
--
select  sum( inner_ur_mat_gp.opl ) /*aggregate*/

from (
--ur_mat_gp
select a.kod_mat_gp as kod_mat_gp, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.opl as opl/**//*number*/

from ur_mat_gp
a
--\ur_mat_gp
)
inner_ur_mat_gp
--\ur_mat_gp
where
inner_ur_mat_gp.kod_mat = :kod_mat )
--\
 ,0) )  as missing_opl/*Выст. по юр. док. всего*//*number*/

from (
--dual
select dual.dummy as dummy/*string*//*key*/

from dual
dual
--\dual
)
dual
--\dual
)
ur_mat_gp_missing_opl
--\ur_mat_gp_missing_opl
--\
</select-text>
      <columns>
        <column name="missing_opl" table="ur_mat_gp_missing_opl" type="number" title="" parname="missing_opl" ClientVisible="0" is-user-editable="1" is-refreshed="1" />
      </columns>
      <scheme>
        <table name="ur_mat_gp_missing_opl" as="ur_mat_gp_missing_opl">
          <columns>
            <column name="missing_opl" type="number" title="" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
    </table>
  </dataset>
</root>