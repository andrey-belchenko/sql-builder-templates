<?xml version="1.0" encoding="utf-8"?>
<root>
  <form name="ur_hist_mat_f10_vvod" title="[:ur_hist_mat.nump] дело [:ur_mat.num_delo]" show-toolbar="1" form-size="932;732" security-id="asuse_ur_hist_mat" with-behavior="0" timestamp="23.09.2023 22:07:55" file="sql.builder.templates\sql.builder\projects\asuse2\forms\Арбитраж\ur_hist_mat_f10_vvod.xml" elid="275" ord="275" leaf="0" lvl="2" pelid="">
    <field table="f10" name="val" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="46772584" />
    <field table="ur_hist_mat" name="route_visible" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="60164411">
      <call function="if" as="route_visible" parname="route_visible" type="number" column-visible="0" table="kod_mat" id="41454972">
        <call function="=" id="30677242">
          <call function="user_rights_kod_menu" id="66288751">
            <const id="26168822">189006</const>
          </call>
          <const id="33484256">2</const>
        </call>
        <const id="49807381">1</const>
        <const id="28836723">0</const>
      </call>
    </field>
    <field id="21932291" controlType="UIText" type="string" name="ret_errmsg" title="ret_errmsg" checked="1" show-checkbox="0" width-perc="50" visible="0" />
    <field id="26808702" controlType="UINumber" edit-mask="d" type="number" name="ret_status" title="ret_status" checked="1" show-checkbox="0" width-perc="50" visible="0" />
    <field table="ur_hist_mat" name="kod_mat" title="Материалы переданные в суд" controlType="UICombo" rows-limit="100" id="25414993" />
    <field table="ur_hist_mat" name="decision" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="41366149" />
    <field table="ur_hist_mat" name="not_vvod" title="" controlType="UIText" edit-mask="N2" rows-limit="100" id="11714889" />
    <field table="ur_hist_mat" name="kodp" title="Абонент" controlType="UICombo" rows-limit="100" id="29831362" />
    <field table="ur_hist_mat" name="nump" title="Код абонента" controlType="UIText" rows-limit="100" id="16199322" />
    <fieldgroup title="Иск" id="16056426">
      <field table="ur_mat" name="num_delo" title="Номер дела" controlType="UIText" rows-limit="100" width-perc="50" id="51971833" />
      <field table="ur_mat" name="dat_prin" title="Дата принятия документов в суде" controlType="UIDate" rows-limit="100" width-perc="50" id="56020102" />
    </fieldgroup>
    <fieldgroup title="Суд/судебный участок" visible="f10" id="19478759">
      <field table="ur_mat" name="kod_sud" title="Суд" controlType="UICombo" rows-limit="100" id="54333704" />
      <field table="ur_hist_mat" name="kod_zased" title="Судья" controlType="UICombo" rows-limit="100" width-perc="50" id="66901568">
        <listquery id="58067558">
          <query name="us_zased_org" id="50520328">
            <withparams id="50336249">
              <useparam name="p_kod_sdp" id="7175980" />
              <useparam name="kod_sud" id="25779736" />
            </withparams>
          </query>
        </listquery>
      </field>
      <field table="ur_hist_mat" name="phone" title="Телефон" controlType="UIText" rows-limit="100" width-perc="50" id="31959643" />
      <field table="ur_hist_mat" name="kod_sud" title="Участок" controlType="UICombo" rows-limit="100" id="35828807" />
    </fieldgroup>
    <fieldgroup title="Этап рассмотрения" id="20739168">
      <field table="ur_hist_mat" name="kod_sdp" title="" controlType="UICombo" rows-limit="100" id="60431645" />
      <field table="ur_hist_mat" name="dat_rassm" title="Дата суд. разб." controlType="UIDate" rows-limit="100" width-perc="50" id="49885300" />
      <field table="ur_hist_mat" name="dat_post" title="Дата прин. суд. акта" controlType="UIDate" rows-limit="100" width-perc="50" id="38219294" />
      <field table="ur_hist_mat" name="result_kod_post" title="Судебный акт" controlType="UICombo" rows-limit="100" width-perc="50" id="23450497">
        <listquery id="26249101">
          <query name="us_post_list" id="62838681">
            <withparams id="48999896">
              <useparam name="folder_kod_sdp" id="27383944" />
            </withparams>
          </query>
        </listquery>
      </field>
      <field table="ur_hist_mat" name="kod_result" title="Результат рассмотрения" controlType="UICombo" rows-limit="0" width-perc="50" id="2471324" />
      <field table="ur_hist_mat" name="dat_srok" title="Срок обжалования решения" controlType="UIDate" rows-limit="100" width-perc="50" id="3873059" />
      <field table="ur_hist_mat" name="dat_entry" title="Дата вст. реш. в зак. силу" controlType="UIDate" rows-limit="100" width-perc="50" id="1052371" />
      <field table="ur_hist_mat" name="dat_receipt_post" title="Дата получения судебного акта" controlType="UIDate" rows-limit="100" id="24206290" />
      <field table="ur_hist_mat" name="dat_send_petition_il" title="Дата напр. ход-ва о выдаче ИЛ" controlType="UIDate" rows-limit="100" width-perc="50" id="22803272" />
      <field table="ur_hist_mat" name="dat_send_il" title="Дата направления ИЛ в филиал" controlType="UIDate" rows-limit="100" width-perc="50" id="13139676" />
      <field table="ur_hist_mat" name="prim" title="Примечание" controlType="UITextEx" rows-limit="100" id="8980151" />
      <field table="ur_hist_mat" name="kod_scan" title="Файл" controlType="UIFile" rows-limit="100" id="63248768" />
    </fieldgroup>
    <toolbar id="24034295">
      <uicommand button-type="form-save-and-close" name="form-save-and-close" control-name="ButtonSaveAndClose" file="sql.builder.templates\sql.builder\projects\common\main.xml" title="" id="44999523" />
      <uicommand button-type="form-save" name="form-save" control-name="ButtonSave" file="sql.builder.templates\sql.builder\projects\common\main.xml" title="" id="33041150" />
      <uicommand button-type="custom-commit" editable="ur_hist_mat_has_changes" action-type="save" visible="route_visible" visible-invert="1" name="custom-commit" icon="Commit_24" title="Сохранить" file="sql.builder.templates\sql.builder\projects\common\main.xml" id="12509880" />
      <uicommand button-type="custom-save-and-close" action-type="save-and-close" visible="route_visible" visible-invert="1" name="custom-save-and-close" icon="CommitAndClose_24" title="Сохранить и закрыть" file="sql.builder.templates\sql.builder\projects\common\main.xml" id="43143042" />
    </toolbar>
  </form>
  <params>
    <param name="kod_hist_mat" type="number">
      <const>816</const>
    </param>
    <param name="p_kod" type="number">
      <const>21</const>
    </param>
    <param name="p_kod_sdp" type="number">
      <const>6</const>
    </param>
  </params>
  <dataset>
    <params>
      <param name="kod_hist_mat" type="number">
        <const>816</const>
      </param>
      <param name="p_kod" type="number">
        <const>21</const>
      </param>
      <param name="p_kod_sdp" type="number">
        <const>6</const>
      </param>
    </params>
    <fields>
      <field type="string" name="ret_errmsg" parname="ret_errmsg" title="ret_errmsg" ClientVisible="0" />
      <field type="number" name="ret_status" parname="ret_status" title="ret_status" ClientVisible="0" />
      <field type="string" name="is_form_valid" parname="is_form_valid" />
      <field type="string" name="is_form_valid_not" parname="is_form_valid_not" />
      <field type="string" name="ur_hist_mat_has_changes" parname="ur_hist_mat_has_changes" />
      <field type="string" name="ur_mat_has_changes" parname="ur_mat_has_changes" />
      <field type="string" name="dp_gp_has_changes" parname="dp_gp_has_changes" />
      <field type="string" name="dp_peni_has_changes" parname="dp_peni_has_changes" />
      <field type="string" name="dp_shtraf_has_changes" parname="dp_shtraf_has_changes" />
      <field type="string" name="f10_has_changes" parname="f10_has_changes" />
    </fields>
    <table name="ur_hist_mat" auto-refresh="1" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" new-rows-vis-for-other-tbls="1" update-target="ur_hist_mat" key="kod_hist_mat" is-ms-upd="1" is-top="1" key-dimension="kod_hist_mat">
      <select-text>
--
select  case  when (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  = 2)  then 1 else 0 end  as route_visible, /*number*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.decision as decision, /*number*/
kod_folders.not_vvod as not_vvod, /*number*/
kod_folders.kodp as kodp, /*number*/
kodp.nump as nump, /*Код абонента*//*string*/
ur_hist_mat.kod_zased as kod_zased, /*number*/
kod_zased.phone as phone, /*Телефон*//*string*/
kod_zased.kod_sud as kod_sud, /*Участок*//*number*/
kod_folders.kod_sdp as kod_sdp, /*number*/
ur_hist_mat.dat_rassm as dat_rassm, /*Дата суд. разб.*//*date*/
ur_hist_mat.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.kod_result as kod_result, /*number*/
ur_hist_mat.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
ur_hist_mat.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat.dat_receipt_post as dat_receipt_post, /*Дата получения судебного акта*//*date*/
ur_hist_mat.dat_send_petition_il as dat_send_petition_il, /*Дата напр. ход-ва о выдаче ИЛ*//*date*/
ur_hist_mat.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
kod_sud_x_n.name as kod_sud_x_n, /*Участок*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat
--\ur_hist_mat
where
(ur_hist_mat.kod_hist_mat = :kod_hist_mat )  and (ur_hist_mat.kod_hist_mat is not null ) )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
(ur_hist_mat.kod_hist_mat = :kod_hist_mat )  and (ur_hist_mat.kod_hist_mat is not null )  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_rassm as dat_rassm, /*Дата/время суд. разб.*//*date*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
a.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
a.kod_scan as kod_scan, /*number*/
a.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
a.dat_receipt_post as dat_receipt_post, /**//*date*/
a.dat_send_petition_il as dat_send_petition_il, /**//*date*/
kod_result.kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_hist_mat
a
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone, /*Телефон*//*string*/
a.kod_sud as kod_sud/*number*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on kod_zased.kod_sud = kod_sud_x_n.kod_sud--\us_sud
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on kod_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump as nump/*Код абонента*//*string*/

from kr_payer
a
--\kr_payer
)
kodp on kod_folders.kodp = kodp.kodp--\kr_payer
--\
</select-text>
      <columns>
        <column name="route_visible" table="kod_mat" type="number" title="" parname="route_visible" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select  case  when (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  = 2)  then 1 else 0 end  as route_visible, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat" table="ur_hist_mat" type="number" title="Материалы переданные в суд" parname="kod_mat" ColumnVisible="0" ClientDefault="p_kod" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n2">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_folders.not_vvod as not_vvod, /*number*/
kod_folders.kodp as kodp, /*number*/
kodp.nump as nump, /*Код абонента*//*string*/
kod_folders.kod_sdp as kod_sdp, /*number*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on kod_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump as nump/*Код абонента*//*string*/

from kr_payer
a
--\kr_payer
)
kodp on kod_folders.kodp = kodp.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="not_vvod" table="ur_hist_mat" />
            <dependant name="kodp" table="ur_hist_mat" />
            <dependant name="nump" table="ur_hist_mat" />
            <dependant name="kod_sdp" table="ur_hist_mat" />
            <dependant name="kod_mat_x_n" table="ur_hist_mat" />
            <dependant name="kodp_x_n" table="ur_hist_mat" />
            <dependant name="kod_sdp_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
            <dependant name="ur_hist_mat_count" table="ur_mat" />
          </dependants>
        </column>
        <column name="decision" table="ur_hist_mat" type="number" title="" parname="decision" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
kod_result.decision as decision/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="not_vvod" table="kod_folders" type="number" title="" parname="is_not_vvod" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_folders.not_vvod as not_vvod, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp" table="kod_folders" type="number" title="Абонент" parname="kodp" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_folders.kodp as kodp, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="nump" table="kodp" type="string" title="Код абонента" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp.nump as nump, /*Код абонента*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump as nump/*Код абонента*//*string*/

from kr_payer
a
--\kr_payer
)
kodp on kod_folders.kodp = kodp.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_zased" table="ur_hist_mat" type="number" title="Судья" parname="kod_zased" is-user-editable="1" ClientMandatory="f10" is-updateable="1" is-updateable-ext="1" update-target="kod_zased" temp-col-name="n3">
          <sel-list-compiled>
            <root>
              <query order="pr_active DESC, fio, kod_zased" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="pr_activeDESC">pr_activeDESC</column>
                  <column column="fio">fio</column>
                  <column column="kod_zased">kod_zased</column>
                </order>
                <select>--a
select <column table="a" column="kod_zased" key="1" as="kod_zased" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_zased" into="n1">a.kod_zased as kod_zased, /*number*//*key*/
</column><column table="a" column="kod_ssp" as="kod_ssp" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_ssp" reference="us_ssp" refcol="kod_ssp" into="n2">a.kod_ssp as kod_ssp, /*number*/
</column><column table="a" column="pr_active" as="pr_active" key="0" used="1" type="number" sourcetable="./a/a" sourcecolumn="pr_active" into="n3">a.pr_active as pr_active, /*number*/
</column><column table="a" column="fio" title="Судья" as="fio" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="fio" into="s1">a.fio as fio, /*Судья*//*string*/
</column><column table="us_sud" column="name" as="sud_name" title="Судебный участок" key="0" used="1" type="string" sourcetable="./a/us_sud" sourcecolumn="name" into="s2">us_sud.name as sud_name, /*Судебный участок*//*string*/
</column><call function="decode" type="string" as="status" title="Статус" pth="" key="0" used="1" into="s3"><text txtype="func"> decode( </text><column table="a" column="pr_active">a.pr_active</column><text txtype="func"> , </text><const><text>1</text></const><text txtype="func"> , </text><const><text>'Дейст.'</text></const><text txtype="func"> , </text><const><text>0</text></const><text txtype="func"> , </text><const><text>'Увол.'</text></const><text txtype="func"> ) </text> as status/*Статус*//*string*/
</call></select>
                <from>
from <query name="us_zased" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_zased
select <column table="a" column="kod_zased" type="number" key="1" as="kod_zased" sourcetable="./a/a" sourcecolumn="kod_zased" used="1">a.kod_zased as kod_zased, /*number*//*key*/
</column><column table="a" column="kod_ssp" type="number" as="kod_ssp" reference="us_ssp" refcol="kod_ssp" key="0" sourcetable="./a/a" sourcecolumn="kod_ssp" used="1">a.kod_ssp as kod_ssp, /*number*/
</column><column table="a" column="fio" type="string" title="Судья" as="fio" key="0" sourcetable="./a/a" sourcecolumn="fio" used="1">a.fio as fio, /*Судья*//*string*/
</column><column table="a" column="kod_sud" type="number" as="kod_sud" reference="us_sud" refcol="kod_sud" key="0" sourcetable="./a/a" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*/
</column><column table="a" column="pr_active" type="number" as="pr_active" key="0" sourcetable="./a/a" sourcecolumn="pr_active" used="1">a.pr_active as pr_active/*number*/
</column></select><from>
from <table name="us_zased" as="a" used="1">us_zased
a
--\us_zased
</table></from>)
a
--\us_zased
</query><query name="us_sud" as="us_sud" join="left outer" path="./a/us_sud" haskeys="1" used="1">left outer join
(
<select>--us_sud
select <column table="a" column="kod_sud" type="number" key="1" as="kod_sud" sourcetable="./a/us_sud" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Судебный участок" as="name" key="0" sourcetable="./a/us_sud" sourcecolumn="name" used="1">a.name as name/*Судебный участок*//*string*/
</column></select><from>
from <table name="us_sud" as="a" title="Суд / судебный участок" used="1">us_sud
a
--\us_sud
</table></from><call function="=" type="bool">)
us_sud on <column table="a" column="kod_sud">a.kod_sud</column><text txtype="func"> = </text><column table="us_sud" column="kod_sud">us_sud.kod_sud</column></call>--\us_sud
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="or" pth="1" type="bool">(<call function="and" pth="" type="bool">(<call function="=" pth="" type="bool">(<const><text>:kod_sdp </text></const><text txtype="func"> = </text><const><text>6</text></const>) </call><text txtype="func"> and </text><call function="is not null" pth="" type="bool">(<column table="a" column="kod_sud">a.kod_sud</column><text txtype="func"> is not null </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="or" pth="1" optional="1" type="bool">(<call function="in" pth="" type="bool">(<column table="a" column="kod_sud">a.kod_sud</column><text txtype="func"> in </text><query as="a" path="./a/a" used="1">(
<select>--
select <column table="s" column="kod_sud" as="kod_sud" fixed="1" key="1" keypath=".kod_sud" used="1" type="number" sourcetable="./a/a/s" sourcecolumn="kod_sud">s.kod_sud as kod_sud/*number*//*key*/
</column></select><from>
from <query name="us_sud" as="s" path="./a/a/s" haskeys="1" used="1">(
<select>--us_sud
select <column table="a" column="kod_sud" type="number" key="1" as="kod_sud" sourcetable="./a/a/s" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*//*key*/
</column><column table="a" column="kod_parent" type="number" as="kod_parent" reference="us_sud" refcol="kod_sud" key="0" sourcetable="./a/a/s" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent/*number*/
</column></select><from>
from <table name="us_sud" as="a" title="Суд / судебный участок" used="1">us_sud
a
--\us_sud
</table></from>)
s
--\us_sud
</query></from><connect>connect by nocycle
<call function="=" pth="" type="bool"><column table="s" column="kod_sud" prior="1">prior s.kod_sud</column><text txtype="func"> = </text><column table="s" column="kod_parent">s.kod_parent</column></call></connect><start>
start with <call function="=" pth="" type="bool"><column table="s" column="kod_sud">s.kod_sud</column><text txtype="func"> = </text><const><text>:kod_sud </text></const></call></start>)
--\
</query>) </call><text txtype="func"> or </text><call function="is null" pth="" type="bool">(<const><text>:kod_sud </text></const><text txtype="func"> is null </text>) </call>) </call><text txtype="func"> } </text>) </call>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_zased" key="1" as="kod_zased" thissrc="kod_zased">a.kod_zased</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_zased" key="1" as="kod_zased" thissrc="kod_zased">a.kod_zased</column><text txtype="func"> ) like lower( </text><const><text>:kod_zased_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_ssp" as="kod_ssp" thissrc="kod_ssp">a.kod_ssp</column><text txtype="func"> ) like lower( </text><const><text>:kod_ssp_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="pr_active" as="pr_active" thissrc="pr_active">a.pr_active</column><text txtype="func"> ) like lower( </text><const><text>:pr_active_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="fio" title="Судья" as="fio" thissrc="fio">a.fio</column><text txtype="func"> ) like lower( </text><const><text>:fio_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="name" as="sud_name" title="Судебный участок" thissrc="sud_name">us_sud.name</column><text txtype="func"> ) like lower( </text><const><text>:sud_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by pr_active DESC, fio, kod_zased</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" order="pr_active DESC, fio, kod_zased" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" as="a">
              <queries>
                <query order="pr_active DESC, fio, kod_zased" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_zased.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kod_sdp" type="number" />
                    <param type="number" name="kod_sud" />
                    <param type="number" name="kod_ssp" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_zased_filter" type="string" />
                    <param name="kod_ssp_filter" type="string" />
                    <param name="pr_active_filter" type="string" />
                    <param name="fio_filter" type="string" />
                    <param name="sud_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_zased" key="1" as="kod_zased" />
                    <column table="a" column="kod_ssp" as="kod_ssp" />
                    <column table="a" column="pr_active" as="pr_active" />
                    <column table="a" column="fio" title="Судья" as="fio" />
                    <column table="us_sud" column="name" as="sud_name" title="Судебный участок" />
                    <call function="decode" type="string" as="status" title="Статус">
                      <column table="a" column="pr_active" />
                      <const>1</const>
                      <const>'Дейст.'</const>
                      <const>0</const>
                      <const>'Увол.'</const>
                    </call>
                  </select>
                  <from>
                    <query name="us_zased" as="a">
                      <link name="kod_sud" as="us_sud" table="us_sud" child="us_zased" field="kod_sud" parent="us_sud" back="us_zased" title="Суд / судебный участок" />
                    </query>
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="or">
                        <call function="and">
                          <call function="=">
                            <useparam name="kod_sdp" />
                            <const>6</const>
                          </call>
                          <call function="is not null">
                            <column table="a" column="kod_sud" />
                          </call>
                          <call function="or" optional="1">
                            <call function="in">
                              <column table="a" column="kod_sud" />
                              <query>
                                <select>
                                  <column table="s" column="kod_sud" as="kod_sud" />
                                </select>
                                <from>
                                  <query name="us_sud" as="s" title="Суд / судебный участок" />
                                </from>
                                <start>
                                  <call function="=">
                                    <column table="s" column="kod_sud" />
                                    <useparam name="kod_sud" />
                                  </call>
                                </start>
                                <connect>
                                  <call function="=">
                                    <column table="s" column="kod_sud" prior="1" />
                                    <column table="s" column="kod_parent" />
                                  </call>
                                </connect>
                              </query>
                            </call>
                            <call function="is null">
                              <useparam name="kod_sud" />
                            </call>
                          </call>
                        </call>
                        <!--добавить условие для ssp-->
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_zased" />
                        <useparam name="kod_zased_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_ssp" />
                        <useparam name="kod_ssp_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="pr_active" />
                        <useparam name="pr_active_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="fio" />
                        <useparam name="fio_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="sud_name" />
                        <useparam name="sud_name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="pr_activeDESC" />
                    <column column="fio" />
                    <column column="kod_zased" />
                  </order>
                  <withparams>
                    <useparam name="kod_sdp" />
                    <useparam name="kod_sud" />
                    <useparam name="kod_ssp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_zased_filter" />
                    <useparam name="kod_ssp_filter" />
                    <useparam name="pr_active_filter" />
                    <useparam name="fio_filter" />
                    <useparam name="sud_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_sdp" type="number">
                  <const>:kod_sdp </const>
                </param>
                <param type="number" name="kod_sud">
                  <const>:kod_sud </const>
                </param>
                <param type="number" name="kod_ssp">
                  <const>:kod_ssp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_zased_filter" type="string">
                  <const>:kod_zased_filter </const>
                </param>
                <param name="kod_ssp_filter" type="string">
                  <const>:kod_ssp_filter </const>
                </param>
                <param name="pr_active_filter" type="string">
                  <const>:pr_active_filter </const>
                </param>
                <param name="fio_filter" type="string">
                  <const>:fio_filter </const>
                </param>
                <param name="sud_name_filter" type="string">
                  <const>:sud_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="p_kod_sdp" parname="kod_sdp" />
              <useparam name="kod_sud" parname="kod_sud" />
            </withparams>
          </sel-list-cl-fact-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased.phone as phone, /*Телефон*//*string*/
kod_zased.kod_sud as kod_sud, /*Участок*//*number*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
kod_sud_x_n.name as kod_sud_x_n, /*Участок*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone, /*Телефон*//*string*/
a.kod_sud as kod_sud/*number*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on kod_zased.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="phone" table="ur_hist_mat" />
            <dependant name="kod_sud" table="ur_hist_mat" />
            <dependant name="kod_zased_x_n" table="ur_hist_mat" />
            <dependant name="kod_sud_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="phone" table="kod_zased" type="string" title="Телефон" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased.phone as phone, /*Телефон*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone/*Телефон*//*string*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sud" table="kod_zased" type="number" title="Участок" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased.kod_sud as kod_sud, /*Участок*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp" table="kod_folders" type="number" title="" parname="folder_kod_sdp" ColumnVisible="0" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_folders.kod_sdp as kod_sdp, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_rassm" table="ur_hist_mat" type="date" title="Дата суд. разб." is-user-editable="1" ClientMandatory="f10" is-updateable="1" is-updateable-ext="1" update-target="dat_rassm" temp-col-name="d1" />
        <column name="dat_post" table="ur_hist_mat" type="date" title="Дата прин. суд. акта" parname="dat_post" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_post" temp-col-name="d4" />
        <column name="result_kod_post" table="ur_hist_mat" type="number" title="Судебный акт" ColumnEditable="1" is-user-editable="1" ColumnMandatory="1" is-updateable-ext="1" is-refreshed="1" update-target="result_kod_post" temp-col-name="n37">
          <sel-list-compiled>
            <root>
              <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" used="1" sourcetable="./a/a" sourcecolumn="kod_post" into="n1">a.kod_post as kod_post, /*number*//*key*/
</column><column table="a" column="name" as="name" key="0" used="1" type="string" title="Судебный акт" sourcetable="./a/a" sourcecolumn="name" into="s1">a.name as name/*Судебный акт*//*string*/
</column></select>
                <from>
from <query name="us_post" as="a" path="./a/a" haskeys="1" used="1">(
<select>--us_post
select <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*//*key*/
</column><column table="a" column="kod_sdp" type="number" as="kod_sdp" reference="uk_sdp" refcol="kod_sdp" key="0" sourcetable="./a/a" sourcecolumn="kod_sdp" used="1">a.kod_sdp as kod_sdp, /*number*/
</column><column table="a" column="name" type="string" title="Судебный акт" vid="1" as="name" key="0" sourcetable="./a/a" sourcecolumn="name" used="1">a.name as name/*Судебный акт*//*string*/
</column></select><from>
from <table name="us_post" as="a" title="Судебный акт" used="1">us_post
a
--\us_post
</table></from>)
a
--\us_post
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> and </text><call function="and" pth="" type="bool">(<call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kod_sdp">a.kod_sdp</column><text txtype="func"> = </text><const><text>:kod_sdp </text></const>) </call><text txtype="func"> } </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" thissrc="kod_post">a.kod_post</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" thissrc="kod_post">a.kod_post</column><text txtype="func"> ) like lower( </text><const><text>:kod_post_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="name" as="name" key="0" thissrc="name">a.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" haskeys="1" as="a">
              <queries>
                <query class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_post.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="kod_sdp" type="number" />
                    <param name="pk_prm" type="array" />
                    <param name="kod_post_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_post" type="number" as="kod_post" key="1" fixed="1" />
                    <column table="a" column="name" as="name" key="0" />
                  </select>
                  <from>
                    <query name="us_post" as="a" title="Судебный акт" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="and">
                        <call function="true" />
                        <call function="=" optional="1">
                          <column table="a" column="kod_sdp" />
                          <useparam name="kod_sdp" />
                        </call>
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_post" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_post" />
                        <useparam name="kod_post_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="kod_sdp" />
                    <useparam name="pk_prm" />
                    <useparam name="kod_post_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_sdp" type="number">
                  <const>:kod_sdp </const>
                </param>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_post_filter" type="string">
                  <const>:kod_post_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-cl-fact-pars>
            <withparams>
              <useparam name="folder_kod_sdp" parname="kod_sdp" />
            </withparams>
          </sel-list-cl-fact-pars>
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.result_kod_post as result_kod_post, /*number*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Судебный акт*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="result_kod_post" table="ur_hist_mat" />
            <dependant name="result_kod_post_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_result" table="ur_hist_mat" type="number" title="Результат рассмотрения" is-user-editable="1" ColumnMandatory="1" Valid="qube.kod_result_vld" is-updateable="1" is-updateable-ext="1" update-target="kod_result" temp-col-name="n4">
          <sel-list-compiled>
            <root>
              <query name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" haskeys="1" noname="1" path="." used="1">
                <select>--us_result_list
select <column table="a" column="kod_result" as="kod_result" key="1" fixed="1" used="1" type="number" sourcetable="./a" sourcecolumn="kod_result" into="n1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="name" title="Результат рассмотрения" as="name" key="0" used="1" type="string" sourcetable="./a" sourcecolumn="name" into="s1">a.name as name/*Результат рассмотрения*//*string*/
</column></select>
                <from>
from <query name="us_result" as="a" path="./a" haskeys="1" used="1">(
<select>--us_result
select <column table="a" column="kod_result" type="number" as="kod_result" key="1" fixed="1" sourcetable="./a" sourcecolumn="kod_result" used="1">a.kod_result as kod_result, /*number*//*key*/
</column><column table="a" column="kod_post" type="number" as="kod_post" reference="us_post" refcol="kod_post" key="0" sourcetable="./a" sourcecolumn="kod_post" used="1">a.kod_post as kod_post, /*number*/
</column><column table="a" column="name" type="string" title="Результат рассмотрения" vid="1" as="name" key="0" sourcetable="./a" sourcecolumn="name" used="1">a.name as name/*Результат рассмотрения*//*string*/
</column></select><from>
from <table name="us_result" as="a" used="1">us_result
a
--\us_result
</table></from>)
a
--\us_result
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="true" pth="" type="bool">(<text txtype="func"> 1=1 </text>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="=" pth="" optional="1" type="bool">(<column table="a" column="kod_post">a.kod_post</column><text txtype="func"> = </text><const><text>:kod_post </text></const>) </call><text txtype="func"> } </text></call></where>--\us_result_list
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="us_result_list" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_result.xml" haskeys="1">
              <queries>
                <query name="us_result_list" as="a">
                  <withparams>
                    <useparam name="kod_post" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="kod_post" type="number" column="result_kod_post">
                  <const>:kod_post </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params>
              <param name="kod_post" type="number" column="result_kod_post" />
            </params>
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision as decision, /*number*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result, /*number*/
a.result_kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2/*С судебным актом решение и признаком окончательного решения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,null as result_kod_post,a.dat_srok as dat_srok,a.dat_entry as dat_entry  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result,t.n37 as result_kod_post,t.d7 as dat_srok,t.d2 as dat_entry  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result,null as result_kod_post,a.dat_srok as dat_srok,a.dat_entry as dat_entry  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result,t.n37 as result_kod_post,t.d7 as dat_srok,t.d2 as dat_entry  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="decision" table="ur_hist_mat" />
            <dependant name="result_kod_post" table="ur_hist_mat" />
            <dependant name="result_kod_post_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_x_n" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
            <dependant name="kod_result_vld" table="ur_hist_mat" />
            <dependant name="decision2" table="ur_hist_mat" />
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="dat_srok" table="ur_hist_mat" type="date" title="Срок обжалования решения" Exists="decision" is-user-editable="1" Mandatory="decision2" is-updateable="1" is-updateable-ext="1" update-target="dat_srok" temp-col-name="d7">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="dat_entry" table="ur_hist_mat" type="date" title="Дата вст. реш. в зак. силу" is-user-editable="1" Valid="dat_entry_vld" is-updateable="1" is-updateable-ext="1" update-target="dat_entry" temp-col-name="d2">
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="dat_entry_vld" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="dat_receipt_post" table="ur_hist_mat" type="date" title="Дата получения судебного акта" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_receipt_post" temp-col-name="d5" />
        <column name="dat_send_petition_il" table="ur_hist_mat" type="date" title="Дата напр. ход-ва о выдаче ИЛ" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_send_petition_il" temp-col-name="d6" />
        <column name="dat_send_il" table="ur_hist_mat" type="date" title="Дата направления ИЛ в филиал" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="dat_send_il" temp-col-name="d3" />
        <column name="prim" table="ur_hist_mat" type="string" title="Примечание" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="prim" temp-col-name="s1" />
        <column name="kod_scan" table="ur_hist_mat" type="number" title="Файл" ColumnEditable="1" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_scan" temp-col-name="n19">
          <sel-list-compiled>
            <root>
              <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <select>--a
select <column table="a" column="kod_scan" as="kod_scan" title="" key="1" used="1" type="number" sourcetable="./a/a" sourcecolumn="kod_scan" into="n1">a.kod_scan as kod_scan, /**//*number*//*key*/
</column><column table="a" column="file_name" as="file_name" title="" key="0" used="1" type="string" sourcetable="./a/a" sourcecolumn="file_name" into="s1">a.file_name as file_name/**//*string*/
</column></select>
                <from>
from <query name="ur_scan_docs" as="a" path="./a/a" haskeys="1" used="1">(
<select>--ur_scan_docs
select <column table="a" column="kod_scan" type="number" comment="уникальный ключ" as="kod_scan" key="1" fixed="1" sourcetable="./a/a" sourcecolumn="kod_scan" used="1">a.kod_scan as kod_scan, /*number*//*key*/
</column><column table="a" column="file_name" type="string" title="" comment="имя файла" vid="1" spec-column="file-name" as="file_name" key="0" sourcetable="./a/a" sourcecolumn="file_name" used="1">a.file_name as file_name/**//*string*/
</column></select><from>
from <table name="ur_scan_docs" as="a" title="Файл" used="1">ur_scan_docs
a
--\ur_scan_docs
</table></from>)
a
--\ur_scan_docs
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="kod_scan" as="kod_scan" title="" key="1" thissrc="kod_scan">a.kod_scan</column><text txtype="func"> ) like lower( </text><const><text>:kod_scan_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="a" column="file_name" as="file_name" title="" thissrc="file_name">a.file_name</column><text txtype="func"> ) like lower( </text><const><text>:file_name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" as="a">
              <queries>
                <query title="Файл" spec-table="file" class="1" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\original\ur_scan_docs.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_scan_filter" type="string" />
                    <param name="file_name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="a" column="kod_scan" as="kod_scan" title="" key="1" />
                    <column table="a" column="file_name" as="file_name" title="" />
                  </select>
                  <from>
                    <query name="ur_scan_docs" as="a" title="Файл" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_scan" />
                        <useparam name="kod_scan_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="file_name" />
                        <useparam name="file_name_filter" />
                      </call>
                    </call>
                  </where>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_scan_filter" />
                    <useparam name="file_name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_scan_filter" type="string">
                  <const>:kod_scan_filter </const>
                </param>
                <param name="file_name_filter" type="string">
                  <const>:file_name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_hist_mat">
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_scan_x_n" table="ur_hist_mat" />
          </dependants>
        </column>
        <column name="kod_mat_x_n" table="ur_hist_mat.kod_mat" type="string" title="Материалы переданные в суд" text-source-for="kod_mat" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kodp_x_n" table="kod_folders.kodp" type="string" title="Абонент" text-source-for="kodp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp/**//*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_folders.kodp = kodp_x_n.kodp--\kr_payer
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_zased_x_n" table="ur_hist_mat.kod_zased" type="string" title="Судья" text-source-for="kod_zased" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sud_x_n" table="kod_zased.kod_sud" type="string" title="Участок" text-source-for="kod_sud" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sud_x_n.name as kod_sud_x_n, /*Участок*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_zased as kod_zased/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_zased as kod_zased  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n3 as kod_zased  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on kod_zased.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_sdp_x_n" table="kod_folders.kod_sdp" type="string" title="Договор" text-source-for="kod_sdp" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kod_sdp as kod_sdp/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on kod_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="result_kod_post_x_n" table="ur_hist_mat.result_kod_post" type="string" title="Судебный акт" text-source-for="result_kod_post" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select result_kod_post_x_n.name as result_kod_post_x_n, /*Судебный акт*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result_x_n" table="ur_hist_mat.kod_result" type="string" title="Результат рассмотрения" text-source-for="kod_result" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_result as kod_result/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_scan_x_n" table="ur_hist_mat.kod_scan" type="string" title="Файл" text-source-for="kod_scan" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_scan as kod_scan/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_scan as kod_scan  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n19 as kod_scan  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_result_vld" table="ur_hist_mat" type="string" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="decision2" table="ur_hist_mat" type="number" title="С судебным актом решение и признаком окончательного решения" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2/*С судебным актом решение и признаком окончательного решения*//*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="dat_entry_vld" table="ur_hist_mat" type="string" title="Дата вступления, валидация" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_hist_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_hist_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld/*Дата вступления, валидация*//*string*/

from (select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.dat_srok as dat_srok,a.dat_entry as dat_entry,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.d7 as dat_srok,t.d2 as dat_entry,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat
--\ur_hist_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_hist_mat" type="number" title="" is-user-editable="1" />
        <column name="kod_hist_mat" table="ur_hist_mat" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_hist_mat" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_post as dat_post 
,:kod_result as kod_result 
,:dat_srok as dat_srok 
,:dat_entry as dat_entry 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_send_il as dat_send_il 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
loop 
insert into ur_hist_mat 
(kod_mat 
,kod_zased 
,dat_rassm 
,dat_post 
,kod_result 
,dat_srok 
,dat_entry 
,dat_receipt_post 
,dat_send_petition_il 
,dat_send_il 
,prim 
,kod_scan 
,kod_hist_mat 
) 
 values  
(r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_post 
,r.kod_result 
,r.dat_srok 
,r.dat_entry 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_send_il 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
) 
 returning  
kod_hist_mat into :kod_hist_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_hist_mat where kod_hist_mat=:kod_hist_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_hist_mat' 
and 
names=:form_id 
and 
f2=:kod_hist_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_post as dat_post 
,:result_kod_post as result_kod_post 
,:kod_result as kod_result 
,:dat_srok as dat_srok 
,:dat_entry as dat_entry 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_send_il as dat_send_il 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n3 
,d1 
,d4 
,n37 
,n4 
,d7 
,d2 
,d5 
,d6 
,d3 
,s1 
,n19 
,n1 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_post 
,r.result_kod_post 
,r.kod_result 
,r.dat_srok 
,r.dat_entry 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_send_il 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
); 
end loop; 
else 
for r in  
 ( select  
:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_post as dat_post 
,:result_kod_post as result_kod_post 
,:kod_result as kod_result 
,:dat_srok as dat_srok 
,:dat_entry as dat_entry 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_send_il as dat_send_il 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
,a.gp_es 
,a.u_m 
,a.d_m 
,a.gp_otv 
,a.ukaz 
,a.kod_stage 
,a.kod_busin 
,a.dat_mor 
,a.kod_hist_mat_new 
,a.sud_izd 
,a.astrent 
,a.dat_vz 
,a.proc 
,a.kodp 
,a.opl_peni 
,a.opl_proc 
,a.opl_astrent 
,a.opl_osnreal 
,a.opl_gpotv 
,a.ogr 
,a.data_prinyat 
,a.snum_z 
,a.fio_court 
,a.osnreal 
,a.shtraf 
,a.peni 
,a.manual_sums 
,a.gp_ret 
,a.opl_ogr 
,a.proc_calc 
,a.kod_vid_proc 
,a.proc_const 
,a.opl_sud_izd 
,a.dat_mor_out 
,a.opl_ogr_dat 
,a.opl_sud_izd_dat 
,a.dat_send_zv 
,a.gosposhlina 
,a.dat_um_mor_dolg 
,a.sum_um_mor_dolg 
,a.kod_osn_um_mor_dolg 
,a.comment_um_mor_dolg 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
 
from ur_hist_mat a  where kod_hist_mat=:kod_hist_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n2 
,n3 
,d1 
,d4 
,n37 
,n4 
,d7 
,d2 
,d5 
,d6 
,d3 
,s1 
,n19 
,n1 
,n20 
,s2 
,d8 
,n10 
,s3 
,n21 
,n22 
,d9 
,n23 
,n12 
,n11 
,d10 
,n24 
,n25 
,n14 
,n26 
,n17 
,n13 
,n16 
,n9 
,d11 
,s4 
,s5 
,n7 
,n28 
,n8 
,n29 
,n30 
,n15 
,n31 
,n32 
,n33 
,n18 
,d12 
,d13 
,d14 
,d15 
,n34 
,d16 
,n35 
,n36 
,s6 
,n5 
,n6 
) 
 values  
('ur_hist_mat' 
,:form_id 
,:kod_hist_mat 
,:row_state_id 
,r.kod_mat 
,r.kod_zased 
,r.dat_rassm 
,r.dat_post 
,r.result_kod_post 
,r.kod_result 
,r.dat_srok 
,r.dat_entry 
,r.dat_receipt_post 
,r.dat_send_petition_il 
,r.dat_send_il 
,r.prim 
,r.kod_scan 
,r.kod_hist_mat 
,r.gp_es 
,r.u_m 
,r.d_m 
,r.gp_otv 
,r.ukaz 
,r.kod_stage 
,r.kod_busin 
,r.dat_mor 
,r.kod_hist_mat_new 
,r.sud_izd 
,r.astrent 
,r.dat_vz 
,r.proc 
,r.kodp 
,r.opl_peni 
,r.opl_proc 
,r.opl_astrent 
,r.opl_osnreal 
,r.opl_gpotv 
,r.ogr 
,r.data_prinyat 
,r.snum_z 
,r.fio_court 
,r.osnreal 
,r.shtraf 
,r.peni 
,r.manual_sums 
,r.gp_ret 
,r.opl_ogr 
,r.proc_calc 
,r.kod_vid_proc 
,r.proc_const 
,r.opl_sud_izd 
,r.dat_mor_out 
,r.opl_ogr_dat 
,r.opl_sud_izd_dat 
,r.dat_send_zv 
,r.gosposhlina 
,r.dat_um_mor_dolg 
,r.sum_um_mor_dolg 
,r.kod_osn_um_mor_dolg 
,r.comment_um_mor_dolg 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_hist_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_hist_mat set  
(kod_mat 
,kod_zased 
,dat_rassm 
,dat_post 
,kod_result 
,dat_srok 
,dat_entry 
,dat_receipt_post 
,dat_send_petition_il 
,dat_send_il 
,prim 
,kod_scan 
,kod_hist_mat 
) 
= 
 ( select  
:kod_mat as kod_mat 
,:kod_zased as kod_zased 
,:dat_rassm as dat_rassm 
,:dat_post as dat_post 
,:kod_result as kod_result 
,:dat_srok as dat_srok 
,:dat_entry as dat_entry 
,:dat_receipt_post as dat_receipt_post 
,:dat_send_petition_il as dat_send_petition_il 
,:dat_send_il as dat_send_il 
,:prim as prim 
,:kod_scan as kod_scan 
,:kod_hist_mat as kod_hist_mat 
 
from dual ) 
 
where 
kod_hist_mat=:kod_hist_mat 
;
end;
</update-text>
      <scheme>
        <table name="ur_hist_mat" as="ur_hist_mat">
          <columns>
            <column name="route_visible" type="number" title="" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="decision" type="number" title="" visible="0" />
            <column name="not_vvod" type="number" title="" visible="0" />
            <column name="kodp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="nump" type="string" title="Код абонента" visible="0" />
            <column name="kod_zased" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="phone" type="string" title="Телефон" />
            <column name="kod_sud" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_sdp" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_rassm" type="date" title="Дата суд. разб." />
            <column name="dat_post" type="date" title="Дата прин. суд. акта" />
            <column name="result_kod_post" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_result" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_srok" type="date" title="Срок обжалования решения" />
            <column name="dat_entry" type="date" title="Дата вст. реш. в зак. силу" />
            <column name="dat_receipt_post" type="date" title="Дата получения судебного акта" />
            <column name="dat_send_petition_il" type="date" title="Дата напр. ход-ва о выдаче ИЛ" />
            <column name="dat_send_il" type="date" title="Дата направления ИЛ в филиал" />
            <column name="prim" type="string" title="Примечание" />
            <column name="kod_scan" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat_x_n" type="string" title="Материалы переданные в суд" visible="0" />
            <column name="kodp_x_n" type="string" title="Абонент" visible="0" />
            <column name="kod_zased_x_n" type="string" title="Судья" />
            <column name="kod_sud_x_n" type="string" title="Участок" />
            <column name="kod_sdp_x_n" type="string" title="Договор" visible="0" />
            <column name="result_kod_post_x_n" type="string" title="Судебный акт" />
            <column name="kod_result_x_n" type="string" title="Результат рассмотрения" />
            <column name="kod_scan_x_n" type="string" title="Файл" />
            <column name="kod_result_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="decision2" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="dat_entry_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_hist_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_hist_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_hist_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select  case  when (( (select nvl(max(kod_rights),0) from rr_usermenu where PUSER = USER and kod_menu = 189006 ) )  = 2)  then 1 else 0 end  as route_visible, /*number*/
ur_hist_mat.kod_mat as kod_mat, /*number*/
ur_hist_mat.decision as decision, /*number*/
kod_folders.not_vvod as not_vvod, /*number*/
kod_folders.kodp as kodp, /*number*/
kodp.nump as nump, /*Код абонента*//*string*/
ur_hist_mat.kod_zased as kod_zased, /*number*/
kod_zased.phone as phone, /*Телефон*//*string*/
kod_zased.kod_sud as kod_sud, /*Участок*//*number*/
kod_folders.kod_sdp as kod_sdp, /*number*/
ur_hist_mat.dat_rassm as dat_rassm, /*Дата суд. разб.*//*date*/
ur_hist_mat.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
ur_hist_mat.result_kod_post as result_kod_post, /*number*/
ur_hist_mat.kod_result as kod_result, /*number*/
ur_hist_mat.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
ur_hist_mat.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
ur_hist_mat.dat_receipt_post as dat_receipt_post, /*Дата получения судебного акта*//*date*/
ur_hist_mat.dat_send_petition_il as dat_send_petition_il, /*Дата напр. ход-ва о выдаче ИЛ*//*date*/
ur_hist_mat.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
ur_hist_mat.prim as prim, /*Примечание*//*string*/
ur_hist_mat.kod_scan as kod_scan, /*number*/
kod_mat_x_n.name as kod_mat_x_n, /*Материалы переданные в суд*//*string*/
kodp_x_n.sp_col_name as kodp_x_n, /*Абонент*//*string*/
kod_zased_x_n.fio as kod_zased_x_n, /*Судья*//*string*/
kod_sud_x_n.name as kod_sud_x_n, /*Участок*//*string*/
kod_sdp_x_n.name as kod_sdp_x_n, /*Юридический документ*//*string*/
result_kod_post_x_n.name as result_kod_post_x_n, /*Судебный акт*//*string*/
kod_result_x_n.name as kod_result_x_n, /*Результат рассмотрения*//*string*/
kod_scan_x_n.file_name as kod_scan_x_n, /*Файл*//*string*/
qube.kod_result_vld1 as kod_result_vld, /*string*/
ur_hist_mat.decision2 as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
ur_hist_mat.dat_entry_vld as dat_entry_vld, /*Дата вступления, валидация*//*string*/
ur_hist_mat.is_new as is_new, /*number*/
ur_hist_mat.is_not_new as is_not_new, /*number*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
max( case  when (kod_hist_mat.result_kod_post != kod_hist_mat.result_kod_post_read)  then 'Укажите результат рассмотрения соответствующий судебному акту' when (qube.ur_hist_mat_dec_othr_cnt1 &gt; 1)  then 'Уже есть другое окончательное решение по делу' end )  as kod_result_vld1/*string*/

from (
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select qube.kod_hist_mat as kod_hist_mat, /*number*//*key*/
qube.ur_hist_mat_dec_othr_cnt1 as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select un.kod_hist_mat as kod_hist_mat, /*number*//*key*/
sum(un.ur_hist_mat_dec_othr_cnt1)  as ur_hist_mat_dec_othr_cnt1/*number*/

from (
(
(
--
select ur_hist_mat.kod_hist_mat as kod_hist_mat, /*number*//*key*/
null as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat
--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null )
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3 )
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
union all
(
--
select dims.kod_hist_mat as kod_hist_mat, /*number*//*key*/
ur_hist_mat_dec_othr.cnt as ur_hist_mat_dec_othr_cnt1/*number*/

from (
--
select ur_hist_mat_dec_othr_a_d.kod_hist_mat as kod_hist_mat_prm, /*number*//*key*/
ur_hist_mat.kod_hist_mat as kod_hist_mat/*number*//*key*/

from (
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr_a_d
--\ur_hist_mat_dec_othr
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ))
)
kod_mat_a_d1 on ur_hist_mat_dec_othr_a_d.kod_mat = kod_mat_a_d1.kod_mat--\ur_mat
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
)
ur_hist_mat on ur_hist_mat.kod_mat = kod_mat_a_d1.kod_mat--\ur_hist_mat
where
ur_hist_mat.kod_hist_mat is not null  group by
ur_hist_mat_dec_othr_a_d.kod_hist_mat, /*number*//*key*/
ur_hist_mat.kod_hist_mat/*number*//*key*/
)
dims
--\
left outer join
(
--ur_hist_mat_dec_othr
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
where
kod_result.decision = 1)
ur_hist_mat_dec_othr on ur_hist_mat_dec_othr.kod_hist_mat = dims.kod_hist_mat_prm--\ur_hist_mat_dec_othr
)
--\
)
--\
)
un
--\
 group by
un.kod_hist_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.result_kod_post as result_kod_post, /*number*/
kod_result.kod_post as result_kod_post_read/*number*/

from (select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,null as result_kod_post,a.kod_result as kod_result  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n37 as result_kod_post,t.n4 as kod_result  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post/*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
kod_hist_mat on kod_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
 group by
qube.kod_hist_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
a.kod_result as kod_result, /*number*/
a.dat_rassm as dat_rassm, /*Дата/время суд. разб.*//*date*/
a.dat_post as dat_post, /*Дата прин. суд. акта*//*date*/
a.prim as prim, /*Примечание*//*string*/
a.kod_zased as kod_zased, /*number*/
a.dat_entry as dat_entry, /*Дата вст. реш. в зак. силу*//*date*/
a.dat_srok as dat_srok, /*Срок обжалования решения*//*date*/
a.kod_scan as kod_scan, /*number*/
a.dat_send_il as dat_send_il, /*Дата направления ИЛ в филиал*//*date*/
a.dat_receipt_post as dat_receipt_post, /**//*date*/
a.dat_send_petition_il as dat_send_petition_il, /**//*date*/
a.result_kod_post as result_kod_post, /*number*/
 case  when ((a.dat_srok &lt; ( trunc( ( sysdate )  ) ) )  and (a.dat_entry is null )  and (( case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end )  = 1) )  then 'Срок обжалования решения прошел, укажите дату вступления в законную силу' when ((a.dat_entry &lt; a.dat_srok) )  then '[err]Указанная дата вступления решения в силу наступает ранее срока на обжалование' end  as dat_entry_vld, /*Дата вступления, валидация*//*string*/
kod_result.decision as decision, /*number*/
 case  when ((( case  when (kod_result.kod_post = 2)  then 1 else 0 end )  = 1)  and (kod_result.decision = 1) )  then 1 else 0 end  as decision2, /*С судебным актом решение и признаком окончательного решения*//*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_rassm as dat_rassm,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.dat_entry as dat_entry,a.dat_srok as dat_srok,a.kod_scan as kod_scan,a.dat_send_il as dat_send_il,a.dat_receipt_post as dat_receipt_post,a.dat_send_petition_il as dat_send_petition_il,null as result_kod_post,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result,t.d1 as dat_rassm,t.d4 as dat_post,t.s1 as prim,t.n3 as kod_zased,t.d2 as dat_entry,t.d7 as dat_srok,t.n19 as kod_scan,t.d3 as dat_send_il,t.d5 as dat_receipt_post,t.d6 as dat_send_petition_il,t.n37 as result_kod_post,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat,a.kod_result as kod_result,a.dat_rassm as dat_rassm,a.dat_post as dat_post,a.prim as prim,a.kod_zased as kod_zased,a.dat_entry as dat_entry,a.dat_srok as dat_srok,a.kod_scan as kod_scan,a.dat_send_il as dat_send_il,a.dat_receipt_post as dat_receipt_post,a.dat_send_petition_il as dat_send_petition_il,null as result_kod_post,0 as is_new,1 as is_not_new  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ) and   a.kod_hist_mat in :kod_hist_mat_prm   union all  select t.n1 as kod_hist_mat,t.n2 as kod_mat,t.n4 as kod_result,t.d1 as dat_rassm,t.d4 as dat_post,t.s1 as prim,t.n3 as kod_zased,t.d2 as dat_entry,t.d7 as dat_srok,t.n19 as kod_scan,t.d3 as dat_send_il,t.d5 as dat_receipt_post,t.d6 as dat_send_petition_il,t.n37 as result_kod_post,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_hist_mat_prm )
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.kod_post as kod_post, /*number*/
a.decision as decision/**//*number*/

from us_result
a
--\us_result
)
kod_result on a.kod_result = kod_result.kod_result--\us_result
)
ur_hist_mat on ur_hist_mat.kod_hist_mat = qube.kod_hist_mat--\ur_hist_mat
left outer join
(
--ur_scan_docs
select a.kod_scan as kod_scan, /*number*//*key*/
a.file_name as file_name/**//*string*/

from ur_scan_docs
a
--\ur_scan_docs
)
kod_scan_x_n on ur_hist_mat.kod_scan = kod_scan_x_n.kod_scan--\ur_scan_docs
left outer join
(
--us_result
select a.kod_result as kod_result, /*number*//*key*/
a.name as name/*Результат рассмотрения*//*string*/

from us_result
a
--\us_result
)
kod_result_x_n on ur_hist_mat.kod_result = kod_result_x_n.kod_result--\us_result
left outer join
(
--us_post
select a.kod_post as kod_post, /*number*//*key*/
a.name as name/*Судебный акт*//*string*/

from us_post
a
--\us_post
)
result_kod_post_x_n on ur_hist_mat.result_kod_post = result_kod_post_x_n.kod_post--\us_post
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.fio as fio/*Судья*//*string*/

from us_zased
a
--\us_zased
)
kod_zased_x_n on ur_hist_mat.kod_zased = kod_zased_x_n.kod_zased--\us_zased
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
kod_doc.abbr || '  ' || a.num_delo || ' от ' || ( to_char( a.dat_doc ,'DD.MM.YYYY') )  as name/*Иск*//*string*/

from ur_mat
a
--\ur_mat
left outer join
(
--us_doc
select a.kod_doc as kod_doc, /*number*//*key*/
a.abbr as abbr/*Аббревиатура*//*string*/

from us_doc
a
--\us_doc
)
kod_doc on a.kod_doc = kod_doc.kod_doc--\us_doc
)
kod_mat_x_n on ur_hist_mat.kod_mat = kod_mat_x_n.kod_mat--\ur_mat
left outer join
(
--us_zased
select a.kod_zased as kod_zased, /*number*//*key*/
a.phone as phone, /*Телефон*//*string*/
a.kod_sud as kod_sud/*number*/

from us_zased
a
--\us_zased
)
kod_zased on ur_hist_mat.kod_zased = kod_zased.kod_zased--\us_zased
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on kod_zased.kod_sud = kod_sud_x_n.kod_sud--\us_sud
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_folders as kod_folders/*number*/

from ur_mat
a
--\ur_mat
)
kod_mat on ur_hist_mat.kod_mat = kod_mat.kod_mat--\ur_mat
left outer join
(
--ur_folders
select a.kod_folders as kod_folders, /*number*//*key*/
a.kodp as kodp, /**//*number*/
a.kod_sdp as kod_sdp, /*number*/
 decode ( a.vvod ,0,1,0)  as not_vvod/*number*/

from ur_folders
a
--\ur_folders
)
kod_folders on kod_mat.kod_folders = kod_folders.kod_folders--\ur_folders
left outer join
(
--uk_sdp
select a.kod_sdp as kod_sdp, /*number*//*key*/
a.name as name/*Юридический документ*//*string*/

from uk_sdp
a
--\uk_sdp
)
kod_sdp_x_n on kod_folders.kod_sdp = kod_sdp_x_n.kod_sdp--\uk_sdp
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump || ' ' || a.name as sp_col_name/**//*string*/

from kr_payer
a
--\kr_payer
)
kodp_x_n on kod_folders.kodp = kodp_x_n.kodp--\kr_payer
left outer join
(
--kr_payer
select a.kodp as kodp, /**//*number*//*key*/
a.nump as nump/*Код абонента*//*string*/

from kr_payer
a
--\kr_payer
)
kodp on kod_folders.kodp = kodp.kodp--\kr_payer
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="ur_mat" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" new-rows-vis-for-other-tbls="1" update-target="ur_mat" delete-validation="ur_dp_exists_vld" key="kod_mat" is-ms-upd="1" is-top="1" key-dimension="kod_mat">
      <select-text>
--
select ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
ur_mat.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
ur_mat.kod_sud as kod_sud, /*Суд*//*number*/
kod_sud_x_n.name as kod_sud_x_n, /*Суд*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
(ur_mat.kod_mat = :p_kod )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_hist_mat
a
--\ur_hist_mat
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
(ur_mat.kod_mat = :p_kod )  and (ur_mat.kod_mat is not null ) )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from ur_mat
a
--\ur_mat
)
ur_mat
--\ur_mat
where
(ur_mat.kod_mat = :p_kod )  and (ur_mat.kod_mat is not null ) )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
a.kod_sud as kod_sud, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_mat
a
--\ur_mat
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</select-text>
      <columns>
        <column name="num_delo" table="ur_mat" type="string" title="Номер дела" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="num_delo" temp-col-name="s2" />
        <column name="dat_prin" table="ur_mat" type="date" title="Дата принятия документов в суде" is-user-editable="1" ColumnMandatory="1" is-updateable="1" is-updateable-ext="1" update-target="dat_prin" temp-col-name="d4" />
        <column name="kod_sud" table="ur_mat" type="number" title="Суд" parname="kod_sud" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_sud" temp-col-name="n12">
          <sel-list-compiled>
            <root>
              <query class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" name="a" as="a" noname="1" path="./a" used="1">
                <order notext="1">
                  <column column="name">name</column>
                  <column column="kod_sud">kod_sud</column>
                </order>
                <select>--a
select <column table="us_sud" column="kod_sud" key="1" as="kod_sud" used="1" type="number" sourcetable="./a/us_sud" sourcecolumn="kod_sud" into="n1">us_sud.kod_sud as kod_sud, /*number*//*key*/
</column><column table="us_sud" column="kod_parent" as="kod_parent" key="0" used="1" type="number" sourcetable="./a/us_sud" sourcecolumn="kod_parent" reference="us_sud" refcol="kod_sud" into="n2">us_sud.kod_parent as kod_parent, /*number*/
</column><column table="us_sud" column="name" title="Судебный участок" as="name" key="0" used="1" type="string" sourcetable="./a/us_sud" sourcecolumn="name" into="s1">us_sud.name as name/*Судебный участок*//*string*/
</column></select>
                <from>
from <query name="us_sud" as="us_sud" path="./a/us_sud" haskeys="1" used="1">(
<select>--us_sud
select <column table="a" column="kod_sud" type="number" key="1" as="kod_sud" sourcetable="./a/us_sud" sourcecolumn="kod_sud" used="1">a.kod_sud as kod_sud, /*number*//*key*/
</column><column table="a" column="name" type="string" title="Судебный участок" as="name" key="0" sourcetable="./a/us_sud" sourcecolumn="name" used="1">a.name as name, /*Судебный участок*//*string*/
</column><column table="a" column="kod_parent" type="number" as="kod_parent" reference="us_sud" refcol="kod_sud" key="0" sourcetable="./a/us_sud" sourcecolumn="kod_parent" used="1">a.kod_parent as kod_parent/*number*/
</column></select><from>
from <table name="us_sud" as="a" title="Суд / судебный участок" used="1">us_sud
a
--\us_sud
</table></from>)
us_sud
--\us_sud
</query></from>
                <where>where
<call function="and" pth="" type="bool"><call function="le" pth="" type="bool">(<call function="rownum" pth="0" type="number"><text txtype="func"> rownum </text></call><text txtype="func"> &lt;= </text><const><text>:p_rows_limit </text></const>) </call><text txtype="func"> { </text><text txtype="func"> and </text><call function="in" pth="" optional="1" type="bool">(<column table="us_sud" column="kod_sud" key="1" as="kod_sud" thissrc="kod_sud">us_sud.kod_sud</column><text txtype="func"> in </text><const><text>:pk_prm </text></const>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="kod_sud" key="1" as="kod_sud" thissrc="kod_sud">us_sud.kod_sud</column><text txtype="func"> ) like lower( </text><const><text>:kod_sud_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="kod_parent" as="kod_parent" thissrc="kod_parent">us_sud.kod_parent</column><text txtype="func"> ) like lower( </text><const><text>:kod_parent_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text><text txtype="func"> { </text><text txtype="func"> and </text><call function="like" pth="" optional="1" type="bool">(<text txtype="func"> lower( </text><column table="us_sud" column="name" title="Судебный участок" as="name" thissrc="name">us_sud.name</column><text txtype="func"> ) like lower( </text><const><text>:name_filter </text></const><text txtype="func"> ) </text>) </call><text txtype="func"> } </text></call></where>
                <order>
order by name, kod_sud</order>--\a
</query>
            </root>
          </sel-list-compiled>
          <sel-list-report>
            <report name="a" class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" as="a">
              <queries>
                <query class="1" title="Суд / судебный участок" order="name, kod_sud" timestamp="13.09.2023 15:45:32" file="sql.builder.templates\sql.builder\projects\asuse2_scheme\scheme\extension\us_sud.xml" haskeys="1" name="a" as="a">
                  <params>
                    <param name="pk_prm" type="array" />
                    <param name="kod_sud_filter" type="string" />
                    <param name="kod_parent_filter" type="string" />
                    <param name="name_filter" type="string" />
                    <param name="p_rows_limit" type="number" />
                  </params>
                  <select>
                    <column table="us_sud" column="kod_sud" key="1" as="kod_sud" />
                    <column table="us_sud" column="kod_parent" as="kod_parent" />
                    <column table="us_sud" column="name" title="Судебный участок" as="name" />
                  </select>
                  <from>
                    <query name="us_sud" as="us_sud" title="Суд / судебный участок" />
                  </from>
                  <where>
                    <call function="and">
                      <call function="le">
                        <call function="rownum" />
                        <useparam name="p_rows_limit" />
                      </call>
                      <call function="in" optional="1">
                        <column table="this" column="kod_sud" />
                        <useparam name="pk_prm" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_sud" />
                        <useparam name="kod_sud_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="kod_parent" />
                        <useparam name="kod_parent_filter" />
                      </call>
                      <call function="like" optional="1">
                        <column table="this" column="name" />
                        <useparam name="name_filter" />
                      </call>
                    </call>
                  </where>
                  <order>
                    <column column="name" />
                    <column column="kod_sud" />
                  </order>
                  <order>
                    <column column="name" />
                    <column column="kod_sud" />
                  </order>
                  <withparams>
                    <useparam name="pk_prm" />
                    <useparam name="kod_sud_filter" />
                    <useparam name="kod_parent_filter" />
                    <useparam name="name_filter" />
                    <useparam name="p_rows_limit" />
                  </withparams>
                </query>
              </queries>
              <params>
                <param name="pk_prm" type="array">
                  <const>:pk_prm </const>
                </param>
                <param name="kod_sud_filter" type="string">
                  <const>:kod_sud_filter </const>
                </param>
                <param name="kod_parent_filter" type="string">
                  <const>:kod_parent_filter </const>
                </param>
                <param name="name_filter" type="string">
                  <const>:name_filter </const>
                </param>
                <param name="p_rows_limit" type="number">
                  <const>:p_rows_limit </const>
                </param>
              </params>
            </report>
          </sel-list-report>
          <sel-list-pars>
            <params />
          </sel-list-pars>
          <dep-refresh-cmd>
            <root table="ur_mat">
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sud_x_n.name as kod_sud_x_n, /*Суд*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from (select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </dep-refresh-cmd>
          <dependants>
            <dependant name="kod_sud_x_n" table="ur_mat" />
          </dependants>
        </column>
        <column name="kod_sud_x_n" table="ur_mat.kod_sud" type="string" title="Суд" text-source-for="kod_sud" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select kod_sud_x_n.name as kod_sud_x_n, /*Суд*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.kod_sud as kod_sud/*number*/

from (select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.kod_sud as kod_sud  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.n12 as kod_sud  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="ur_hist_mat_count" table="ur_mat" type="number" title="" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="is_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="ur_mat" type="number" title="" is-user-editable="1" />
        <column name="ur_dp_exists_vld" table="ur_mat" type="string" title="Валидация (наличие привязанных документов)" is-user-editable="1" is-refreshed="1">
          <value-refresh-cmd>
            <root>
              <params>
                <param name="kod_mat_prm" type="number" column="" />
                <param name="form_id" type="number" column="" />
              </params>
              <select>
                <params>
                  <param name="kod_mat_prm" type="number" column="" />
                  <param name="form_id" type="number" column="" />
                </params>
                <query>
--
select qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
--\
</query>
              </select>
              <procedure>
                <params />
              </procedure>
            </root>
          </value-refresh-cmd>
        </column>
        <column name="kod_mat" table="ur_mat" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_mat" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:num_delo as num_delo 
,:dat_prin as dat_prin 
,:kod_sud as kod_sud 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into ur_mat 
(num_delo 
,dat_prin 
,kod_sud 
,kod_mat 
) 
 values  
(r.num_delo 
,r.dat_prin 
,r.kod_sud 
,r.kod_mat 
) 
 returning  
kod_mat into :kod_mat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_mat where kod_mat=:kod_mat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='ur_mat' 
and 
names=:form_id 
and 
f2=:kod_mat; 
if :row_state_id=1  then 
for r in  
 ( select  
:num_delo as num_delo 
,:dat_prin as dat_prin 
,:kod_sud as kod_sud 
,:kod_mat as kod_mat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s2 
,d4 
,n12 
,n1 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.dat_prin 
,r.kod_sud 
,r.kod_mat 
); 
end loop; 
else 
for r in  
 ( select  
:num_delo as num_delo 
,:dat_prin as dat_prin 
,:kod_sud as kod_sud 
,:kod_mat as kod_mat 
,a.kod_folders 
,a.kod_doc 
,a.kod_ssp 
,a.num_reg 
,a.dat_otv 
,a.kod_ret_isk 
,a.u_m 
,a.d_m 
,a.num_otz 
,a.dat_otz 
,a.dat_doc 
,a.fio_otz 
,a.kod_subject 
,a.prichina_otz 
,a.sum_gp 
,a.prim 
,a.dat_gp 
,a.num_pp_gp 
,a.kod_parent 
,a.kodp 
,a.ogr 
,a.kod_dispute 
,a.type_claim_template 
,a.kod_delo 
,a.tep_el 
,a.type_potr 
,a.vvod 
,a.kod_emp 
,a.kod_vi 
,a.dep 
,a.dat_finish 
,a.prim_mor_dz 
,a.osnreal 
,a.period_zadol_s_vvod 
,a.period_zadol_po_vvod 
,a.ur_opl_do_resh_vvod 
,a.shtraf 
,a.peni 
,a.otvetch_info 
,a.link_delo 
,a.sum_zach_gp 
,a.num_zach_doc 
,a.dat_zach 
,a.sum_ifns_gp 
,a.num_ifns_doc 
,a.dat_ifns 
,a.kod_scan 
,a.astrent_exists 
,a.dat_post 
,a.dat_arh 
,a.type_rassm 
,a.pio_date 
,a.num_zap_post_mat 
 
from ur_mat a  where kod_mat=:kod_mat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,s2 
,d4 
,n12 
,n1 
,n15 
,n3 
,n16 
,s1 
,d2 
,n17 
,s5 
,d7 
,s6 
,d6 
,d3 
,s7 
,n4 
,s8 
,n18 
,s4 
,d8 
,s9 
,n5 
,n19 
,n10 
,n20 
,n21 
,n22 
,n23 
,n24 
,n25 
,n2 
,n26 
,n27 
,d9 
,s10 
,n8 
,n6 
,n7 
,n11 
,n28 
,n9 
,s11 
,s3 
,n29 
,s12 
,d10 
,n30 
,s13 
,d11 
,n14 
,n31 
,d12 
,d5 
,n13 
,d1 
,s14 
) 
 values  
('ur_mat' 
,:form_id 
,:kod_mat 
,:row_state_id 
,r.num_delo 
,r.dat_prin 
,r.kod_sud 
,r.kod_mat 
,r.kod_folders 
,r.kod_doc 
,r.kod_ssp 
,r.num_reg 
,r.dat_otv 
,r.kod_ret_isk 
,r.u_m 
,r.d_m 
,r.num_otz 
,r.dat_otz 
,r.dat_doc 
,r.fio_otz 
,r.kod_subject 
,r.prichina_otz 
,r.sum_gp 
,r.prim 
,r.dat_gp 
,r.num_pp_gp 
,r.kod_parent 
,r.kodp 
,r.ogr 
,r.kod_dispute 
,r.type_claim_template 
,r.kod_delo 
,r.tep_el 
,r.type_potr 
,r.vvod 
,r.kod_emp 
,r.kod_vi 
,r.dep 
,r.dat_finish 
,r.prim_mor_dz 
,r.osnreal 
,r.period_zadol_s_vvod 
,r.period_zadol_po_vvod 
,r.ur_opl_do_resh_vvod 
,r.shtraf 
,r.peni 
,r.otvetch_info 
,r.link_delo 
,r.sum_zach_gp 
,r.num_zach_doc 
,r.dat_zach 
,r.sum_ifns_gp 
,r.num_ifns_doc 
,r.dat_ifns 
,r.kod_scan 
,r.astrent_exists 
,r.dat_post 
,r.dat_arh 
,r.type_rassm 
,r.pio_date 
,r.num_zap_post_mat 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='ur_mat' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_mat set  
(num_delo 
,dat_prin 
,kod_sud 
,kod_mat 
) 
= 
 ( select  
:num_delo as num_delo 
,:dat_prin as dat_prin 
,:kod_sud as kod_sud 
,:kod_mat as kod_mat 
 
from dual ) 
 
where 
kod_mat=:kod_mat 
;
end;
</update-text>
      <events>
        <useaction action-type="custom" event-name="object-save">
          <useaction action-type="execute-update" call="ur_mat_upd_num_reg">
            <column table="this" column="kod_mat" />
          </useaction>
          <useaction name="ur_mat_upd_pretenz">
            <column table="this" column="kod_mat" />
            <column table="this" column="kod_folders" />
          </useaction>
        </useaction>
      </events>
      <scheme>
        <table name="ur_mat" as="ur_mat">
          <columns>
            <column name="num_delo" type="string" title="Номер дела" />
            <column name="dat_prin" type="date" title="Дата принятия документов в суде" />
            <column name="kod_sud" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_sud_x_n" type="string" title="Суд" />
            <column name="ur_hist_mat_count" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="ur_dp_exists_vld" type="string" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_mat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_mat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_mat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select ur_mat.num_delo as num_delo, /*Номер дела*//*string*/
ur_mat.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
ur_mat.kod_sud as kod_sud, /*Суд*//*number*/
kod_sud_x_n.name as kod_sud_x_n, /*Суд*//*string*/
qube.ur_hist_mat_count1 as ur_hist_mat_count, /*number*/
ur_mat.is_new as is_new, /*number*/
ur_mat.is_not_new as is_not_new, /*number*/
qube.ur_dp_exists_vld1 as ur_dp_exists_vld, /*Валидация (наличие привязанных документов)*//*string*/
ur_mat.kod_mat as kod_mat/*number*//*key*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
sum(qube.ur_hist_mat_count1)  as ur_hist_mat_count1, /*number*/
max( case  when ( nvl( qube.ur_dogplat_count1 ,0)!=0 )  then 'Есть суммы по документу' end )  as ur_dp_exists_vld1/*Валидация (наличие привязанных документов)*//*string*/

from (
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
(
(
--
select qube.kod_mat as kod_mat, /*number*//*key*/
qube.ur_dogplat_count1 as ur_dogplat_count1, /*number*/
qube.ur_hist_mat_count1 as ur_hist_mat_count1/*number*/

from (
--
select un.kod_mat as kod_mat, /*number*//*key*/
sum(un.ur_dogplat_count1)  as ur_dogplat_count1, /*number*/
sum(un.ur_hist_mat_count1)  as ur_hist_mat_count1/*number*/

from (
(
(
--
select ur_dogplat_a_d.kod_mat as kod_mat, /*number*//*key*/
ur_dogplat_a_d.cnt as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ur_dogplat
a
--\ur_dogplat
)
ur_dogplat_a_d
--\ur_dogplat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_dogplat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from ( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
a
--\( select t.n1 as kod_hist_mat,t.n2 as kod_mat  from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and t.f3!=3 )
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_hist_mat_a_d.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
ur_hist_mat_a_d.cnt as ur_hist_mat_count1/*number*/

from (
--ur_hist_mat
select a.kod_hist_mat as kod_hist_mat, /*number*//*key*/
a.kod_mat as kod_mat, /*number*/
1 as cnt/*number*/

from (select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
a
--\(select a.kod_hist_mat as kod_hist_mat,a.kod_mat as kod_mat  from ur_hist_mat a where not exists (select * from rr_temp t where t.skod ='ur_hist_mat' and t.names=:form_id  and a.kod_hist_mat=t.f2 ))
)
ur_hist_mat_a_d
--\ur_hist_mat
left outer join
(
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_hist_mat_a_d.kod_mat = ur_mat.kod_mat--\ur_mat
where
ur_mat.kod_mat is not null )
--\
union all
(
--
select ur_mat.kod_mat as kod_mat, /*number*//*key*/
null as ur_dogplat_count1, /*number*/
null as ur_hist_mat_count1/*number*/

from (
--ur_mat
select a.kod_mat as kod_mat/*number*//*key*/

from (select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat
--\ur_mat
where
ur_mat.kod_mat is not null )
--\
)
--\
)
un
--\
 group by
un.kod_mat/*number*//*key*/
)
qube
--\
)
--\
)
--\
)
qube
--\
)
qube
--\
 group by
qube.kod_mat/*number*//*key*/
)
qube
--\
left outer join
(
--ur_mat
select a.kod_mat as kod_mat, /*number*//*key*/
a.num_delo as num_delo, /*Номер дела*//*string*/
a.dat_prin as dat_prin, /*Дата принятия документов в суде*//*date*/
a.kod_sud as kod_sud, /*number*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_mat as kod_mat,a.num_delo as num_delo,a.dat_prin as dat_prin,a.kod_sud as kod_sud,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.s2 as num_delo,t.d4 as dat_prin,t.n12 as kod_sud,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
a
--\(select a.kod_mat as kod_mat,a.num_delo as num_delo,a.dat_prin as dat_prin,a.kod_sud as kod_sud,0 as is_new,1 as is_not_new  from ur_mat a where not exists (select * from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and a.kod_mat=t.f2 ) and   a.kod_mat in :kod_mat_prm   union all  select t.n1 as kod_mat,t.s2 as num_delo,t.d4 as dat_prin,t.n12 as kod_sud,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='ur_mat' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_mat_prm )
)
ur_mat on ur_mat.kod_mat = qube.kod_mat--\ur_mat
left outer join
(
--us_sud
select a.kod_sud as kod_sud, /*number*//*key*/
a.name as name/*Судебный участок*//*string*/

from us_sud
a
--\us_sud
)
kod_sud_x_n on ur_mat.kod_sud = kod_sud_x_n.kod_sud--\us_sud
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="dp_gp" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_dogplat" key="kod_dogplat" is-ms-upd="1" is-top="1" key-dimension="kod_dogplat">
      <select-text>
--
select dp_gp.is_new as is_new, /*number*/
dp_gp.is_not_new as is_not_new, /*number*/
dp_gp.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.vid_real as vid_real, /**//*number*/
a.prizn_konv as prizn_konv, /**//*number*/
a.kod_mat as kod_mat, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_dogplat
a
--\ur_dogplat
)
dp_gp
--\ur_dogplat
where
(dp_gp.kod_mat = :p_kod )  and (dp_gp.vid_real = 9)  and ( nvl( dp_gp.prizn_konv ,0)=1 ) --\
</select-text>
      <columns>
        <column name="is_new" table="dp_gp" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="dp_gp" type="number" title="" is-user-editable="1" />
        <column name="kod_dogplat" table="dp_gp" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_dogplat" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into ur_dogplat 
(kod_dogplat 
) 
 values  
(r.kod_dogplat 
) 
 returning  
kod_dogplat into :kod_dogplat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_dogplat where kod_dogplat=:kod_dogplat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='dp_gp' 
and 
names=:form_id 
and 
f2=:kod_dogplat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('dp_gp' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
); 
end loop; 
else 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
,a.kod 
,a.kod_deb 
,a.kod_sdp 
,a.dat_form 
,a.u_m 
,a.d_m 
,a.kod_sf 
,a.summa 
,a.vid_real 
,a.sum_v 
,a.kod_izv 
,a.dat_form_v 
,a.kod_dog 
,a.tep_el 
,a.ym 
,a.num_doc 
,a.dat_doc 
,a.dat_bzad 
,a.dat_mor 
,a.dat_priem 
,a.prizn_konv 
,a.kodp 
,a.kod_sogl 
,a.kod_pretenz 
,a.kod_mat 
,a.kod_inkasso 
,a.kod_kazn 
,a.kod_stage_bk 
,a.kod_likvid 
,a.kod_dead 
,a.kod_folders 
,a.kod_sf_dp 
,a.kod_deb_sf 
 
from ur_dogplat a  where kod_dogplat=:kod_dogplat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,d1 
,s1 
,d2 
,n5 
,n6 
,n7 
,n8 
,n9 
,d3 
,n10 
,n11 
,n12 
,n13 
,d4 
,d5 
,d6 
,d7 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,n22 
,n23 
,n24 
,n25 
,n26 
) 
 values  
('dp_gp' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
,r.kod 
,r.kod_deb 
,r.kod_sdp 
,r.dat_form 
,r.u_m 
,r.d_m 
,r.kod_sf 
,r.summa 
,r.vid_real 
,r.sum_v 
,r.kod_izv 
,r.dat_form_v 
,r.kod_dog 
,r.tep_el 
,r.ym 
,r.num_doc 
,r.dat_doc 
,r.dat_bzad 
,r.dat_mor 
,r.dat_priem 
,r.prizn_konv 
,r.kodp 
,r.kod_sogl 
,r.kod_pretenz 
,r.kod_mat 
,r.kod_inkasso 
,r.kod_kazn 
,r.kod_stage_bk 
,r.kod_likvid 
,r.kod_dead 
,r.kod_folders 
,r.kod_sf_dp 
,r.kod_deb_sf 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='dp_gp' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_dogplat set  
(kod_dogplat 
) 
= 
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
where 
kod_dogplat=:kod_dogplat 
;
end;
</update-text>
      <scheme>
        <table name="ur_dogplat" as="dp_gp">
          <columns>
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_dogplat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_dogplat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_dogplat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select dp_gp.is_new as is_new, /*number*/
dp_gp.is_not_new as is_not_new, /*number*/
dp_gp.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_gp' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_gp' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
a
--\(select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_gp' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_gp' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
)
dp_gp
--\ur_dogplat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="dp_peni" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_dogplat" key="kod_dogplat" is-ms-upd="1" is-top="1" key-dimension="kod_dogplat">
      <select-text>
--
select dp_peni.is_new as is_new, /*number*/
dp_peni.is_not_new as is_not_new, /*number*/
dp_peni.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.vid_real as vid_real, /**//*number*/
a.prizn_konv as prizn_konv, /**//*number*/
a.kod_mat as kod_mat, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_dogplat
a
--\ur_dogplat
)
dp_peni
--\ur_dogplat
where
(dp_peni.kod_mat = :p_kod )  and (dp_peni.vid_real = 7)  and ( nvl( dp_peni.prizn_konv ,0)=1 ) --\
</select-text>
      <columns>
        <column name="is_new" table="dp_peni" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="dp_peni" type="number" title="" is-user-editable="1" />
        <column name="kod_dogplat" table="dp_peni" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_dogplat" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into ur_dogplat 
(kod_dogplat 
) 
 values  
(r.kod_dogplat 
) 
 returning  
kod_dogplat into :kod_dogplat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_dogplat where kod_dogplat=:kod_dogplat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='dp_peni' 
and 
names=:form_id 
and 
f2=:kod_dogplat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('dp_peni' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
); 
end loop; 
else 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
,a.kod 
,a.kod_deb 
,a.kod_sdp 
,a.dat_form 
,a.u_m 
,a.d_m 
,a.kod_sf 
,a.summa 
,a.vid_real 
,a.sum_v 
,a.kod_izv 
,a.dat_form_v 
,a.kod_dog 
,a.tep_el 
,a.ym 
,a.num_doc 
,a.dat_doc 
,a.dat_bzad 
,a.dat_mor 
,a.dat_priem 
,a.prizn_konv 
,a.kodp 
,a.kod_sogl 
,a.kod_pretenz 
,a.kod_mat 
,a.kod_inkasso 
,a.kod_kazn 
,a.kod_stage_bk 
,a.kod_likvid 
,a.kod_dead 
,a.kod_folders 
,a.kod_sf_dp 
,a.kod_deb_sf 
 
from ur_dogplat a  where kod_dogplat=:kod_dogplat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,d1 
,s1 
,d2 
,n5 
,n6 
,n7 
,n8 
,n9 
,d3 
,n10 
,n11 
,n12 
,n13 
,d4 
,d5 
,d6 
,d7 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,n22 
,n23 
,n24 
,n25 
,n26 
) 
 values  
('dp_peni' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
,r.kod 
,r.kod_deb 
,r.kod_sdp 
,r.dat_form 
,r.u_m 
,r.d_m 
,r.kod_sf 
,r.summa 
,r.vid_real 
,r.sum_v 
,r.kod_izv 
,r.dat_form_v 
,r.kod_dog 
,r.tep_el 
,r.ym 
,r.num_doc 
,r.dat_doc 
,r.dat_bzad 
,r.dat_mor 
,r.dat_priem 
,r.prizn_konv 
,r.kodp 
,r.kod_sogl 
,r.kod_pretenz 
,r.kod_mat 
,r.kod_inkasso 
,r.kod_kazn 
,r.kod_stage_bk 
,r.kod_likvid 
,r.kod_dead 
,r.kod_folders 
,r.kod_sf_dp 
,r.kod_deb_sf 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='dp_peni' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_dogplat set  
(kod_dogplat 
) 
= 
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
where 
kod_dogplat=:kod_dogplat 
;
end;
</update-text>
      <scheme>
        <table name="ur_dogplat" as="dp_peni">
          <columns>
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_dogplat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_dogplat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_dogplat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select dp_peni.is_new as is_new, /*number*/
dp_peni.is_not_new as is_not_new, /*number*/
dp_peni.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_peni' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_peni' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
a
--\(select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_peni' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_peni' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
)
dp_peni
--\ur_dogplat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="dp_shtraf" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="ur_dogplat" key="kod_dogplat" is-ms-upd="1" is-top="1" key-dimension="kod_dogplat">
      <select-text>
--
select dp_shtraf.is_new as is_new, /*number*/
dp_shtraf.is_not_new as is_not_new, /*number*/
dp_shtraf.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.vid_real as vid_real, /**//*number*/
a.prizn_konv as prizn_konv, /**//*number*/
a.kod_mat as kod_mat, /*number*/
0 as is_new, /*number*/
1 as is_not_new/*number*/

from ur_dogplat
a
--\ur_dogplat
)
dp_shtraf
--\ur_dogplat
where
(dp_shtraf.kod_mat = :p_kod )  and (dp_shtraf.vid_real = 4)  and ( nvl( dp_shtraf.prizn_konv ,0)=1 ) --\
</select-text>
      <columns>
        <column name="is_new" table="dp_shtraf" type="number" title="" is-user-editable="1" />
        <column name="is_not_new" table="dp_shtraf" type="number" title="" is-user-editable="1" />
        <column name="kod_dogplat" table="dp_shtraf" type="number" title="" is-user-editable="1" is-updateable="1" is-updateable-ext="1" update-target="kod_dogplat" temp-col-name="n1" />
      </columns>
      <insert-text>begin 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into ur_dogplat 
(kod_dogplat 
) 
 values  
(r.kod_dogplat 
) 
 returning  
kod_dogplat into :kod_dogplat; 
end loop; 
end; 
</insert-text>
      <delete-text>delete from ur_dogplat where kod_dogplat=:kod_dogplat</delete-text>
      <update-temp-text>begin 
delete from rr_temp 
where 
skod='dp_shtraf' 
and 
names=:form_id 
and 
f2=:kod_dogplat; 
if :row_state_id=1  then 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
) 
 values  
('dp_shtraf' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
); 
end loop; 
else 
for r in  
 ( select  
:kod_dogplat as kod_dogplat 
,a.kod 
,a.kod_deb 
,a.kod_sdp 
,a.dat_form 
,a.u_m 
,a.d_m 
,a.kod_sf 
,a.summa 
,a.vid_real 
,a.sum_v 
,a.kod_izv 
,a.dat_form_v 
,a.kod_dog 
,a.tep_el 
,a.ym 
,a.num_doc 
,a.dat_doc 
,a.dat_bzad 
,a.dat_mor 
,a.dat_priem 
,a.prizn_konv 
,a.kodp 
,a.kod_sogl 
,a.kod_pretenz 
,a.kod_mat 
,a.kod_inkasso 
,a.kod_kazn 
,a.kod_stage_bk 
,a.kod_likvid 
,a.kod_dead 
,a.kod_folders 
,a.kod_sf_dp 
,a.kod_deb_sf 
 
from ur_dogplat a  where kod_dogplat=:kod_dogplat) 
 
loop 
insert into rr_temp 
(skod 
,names 
,f2 
,f3 
,n1 
,n2 
,n3 
,n4 
,d1 
,s1 
,d2 
,n5 
,n6 
,n7 
,n8 
,n9 
,d3 
,n10 
,n11 
,n12 
,n13 
,d4 
,d5 
,d6 
,d7 
,n14 
,n15 
,n16 
,n17 
,n18 
,n19 
,n20 
,n21 
,n22 
,n23 
,n24 
,n25 
,n26 
) 
 values  
('dp_shtraf' 
,:form_id 
,:kod_dogplat 
,:row_state_id 
,r.kod_dogplat 
,r.kod 
,r.kod_deb 
,r.kod_sdp 
,r.dat_form 
,r.u_m 
,r.d_m 
,r.kod_sf 
,r.summa 
,r.vid_real 
,r.sum_v 
,r.kod_izv 
,r.dat_form_v 
,r.kod_dog 
,r.tep_el 
,r.ym 
,r.num_doc 
,r.dat_doc 
,r.dat_bzad 
,r.dat_mor 
,r.dat_priem 
,r.prizn_konv 
,r.kodp 
,r.kod_sogl 
,r.kod_pretenz 
,r.kod_mat 
,r.kod_inkasso 
,r.kod_kazn 
,r.kod_stage_bk 
,r.kod_likvid 
,r.kod_dead 
,r.kod_folders 
,r.kod_sf_dp 
,r.kod_deb_sf 
); 
end loop; 
end if; 
end; 
</update-temp-text>
      <clear-temp-text>delete from rr_temp where skod='dp_shtraf' and names=:form_id</clear-temp-text>
      <update-text>begin
update ur_dogplat set  
(kod_dogplat 
) 
= 
 ( select  
:kod_dogplat as kod_dogplat 
 
from dual ) 
 
where 
kod_dogplat=:kod_dogplat 
;
end;
</update-text>
      <scheme>
        <table name="ur_dogplat" as="dp_shtraf">
          <columns>
            <column name="is_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="is_not_new" type="number" invisible-in-column-chooser="1" visible="0" />
            <column name="kod_dogplat" type="number" invisible-in-column-chooser="1" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
      <single-row-refresh-cmd>
        <root>
          <params>
            <param name="kod_dogplat_prm" type="number" column="" />
            <param name="form_id" type="number" column="" />
          </params>
          <select>
            <params>
              <param name="kod_dogplat_prm" type="number" column="" />
              <param name="form_id" type="number" column="" />
            </params>
            <query>
--
select dp_shtraf.is_new as is_new, /*number*/
dp_shtraf.is_not_new as is_not_new, /*number*/
dp_shtraf.kod_dogplat as kod_dogplat/*number*//*key*/

from (
--ur_dogplat
select a.kod_dogplat as kod_dogplat, /*number*//*key*/
a.is_new as is_new, /*number*/
a.is_not_new as is_not_new/*number*/

from (select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_shtraf' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_shtraf' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
a
--\(select a.kod_dogplat as kod_dogplat,0 as is_new,1 as is_not_new  from ur_dogplat a where not exists (select * from rr_temp t where t.skod ='dp_shtraf' and t.names=:form_id  and a.kod_dogplat=t.f2 ) and   a.kod_dogplat in :kod_dogplat_prm   union all  select t.n1 as kod_dogplat,decode (f3,1,1,0) as is_new,decode (f3,1,0,1) as is_not_new  from rr_temp t where t.skod ='dp_shtraf' and t.names=:form_id  and t.f3!=3  and t.f2 in :kod_dogplat_prm )
)
dp_shtraf
--\ur_dogplat
--\
</query>
          </select>
          <procedure>
            <params />
          </procedure>
        </root>
      </single-row-refresh-cmd>
    </table>
    <table name="f10" auto-refresh="" async="" only-visible-refresh="" only-force-refresh="" ref-column="" multi-select-column="" multi-select-target="" update-target="is_customer10_flag" key="val" is-ms-upd="0" is-top="1">
      <select-text>
--
select f10.val as val/*number*/

from (
--is_customer10_flag
select  case  when (a.customer_id = 10)  then 1 else 0 end  as val/*number*/

from (
--rs_rep_sets
select a.customer_id as customer_id/**//*number*/

from rs_rep_sets
a
--\rs_rep_sets
)
a
--\rs_rep_sets
)
f10
--\is_customer10_flag
--\
</select-text>
      <columns>
        <column name="val" table="f10" type="number" title="" parname="f10" ColumnVisible="0" is-refreshed="1" />
      </columns>
      <scheme>
        <table name="is_customer10_flag" as="f10">
          <columns>
            <column name="val" type="number" title="" visible="0" />
          </columns>
          <viewcolumns />
        </table>
      </scheme>
    </table>
  </dataset>
</root>