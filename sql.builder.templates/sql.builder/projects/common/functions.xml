<?xml version="1.0" encoding="utf-8"?>
<root>
  <functions>
    <function name="bitand" type="number">
     bitand(
      <par1><val /></par1>
      ,
      <par2><val /></par2>
      )
    </function>
    <function name="time ym2 id" type="number">
      <par1>
        (TRUNC(<val />/100)*100000)
        +
        (trunc(((MOD(<val />/100,1)*100)-1)/3)+1)*10000+((MOD(<val />/100,1)*100)*100)
      </par1>
    </function>
    <function name="time y m id" type="number">
      <par1>
        (<val />*100000)
      </par1>
      +
      <par2>
        (trunc((<val />-1)/3)+1)*10000+(<val />*100)
      </par2></function>
    <function name="time y k id" type="number" comment="для полугодия и 9 месяцев, 5 и 6 вместо квартала">
      <par1>
        (<val />*100000)
      </par1>
      +
      <par2><val />*10000
      </par2></function>
    <function name="like" type="bool" text="lower[par1] like lower [par2]"> lower(<par1><val /></par1>) like lower(<par2><val /></par2>) </function>
    <function name="like2" type="bool" text="[par1] like [par2]">
      <par1>
        <val />
      </par1> like <par2><val /></par2></function>
    <function name="not like" type="bool" text="[par1] not like [par2]">
      <par1>
        <val />
      </par1> not like <par2><val /></par2></function>
    <function name="contains" comment="Строка содержит подстроку (par1, par2)" type="bool">
      <par1>
        lower(<val />)
      </par1>
      <par2>
        like lower('%'||<val />||'%')
      </par2>
    </function>
    <function name="weekday" comment="Принимает дату, воскресенье=7" type="bool">
      <par1>
        to_number( to_char(<val />,'DAY','NLS_DATE_LANGUAGE=''numeric date language''') )
      </par1>
    </function>
    <function name="excel:!=">
      <par1>
        <val />
      </par1>
      <par2>
        &lt;&gt;<val /></par2>
    </function>
    <function name="lower" comment="Приводит все символы в строке к нижнему регистру (par1)" type="string">
      <par1>
        lower(<val />)
      </par1>
    </function>
    <function name="upper" comment="Приводит все символы в строке к верхнему регистру (par1)" type="string">
      <par1>
        upper(<val />)
      </par1>
    </function>
    <function name="||" type="string" comment="Конкатенация (par1,par2)">
      <par1>
        <val />
      </par1>
      <par>
        || <val /></par>
    </function>
    <function name="||-" type="string" comment="Конкатенация с добавлением '-'">
      <par1>
        <val />
      </par1>
      <par>
      || '-' || <val /></par>
    </function>
    <function name="cut_num" comment="Удаляет из строки все нецифры и конвертирует оставшиеся символы в число (par1)" type="number">
      <par1>
        cut_num(<val />)
      </par1>
    </function>
    <function name="compare_v" comment="Возвращает 'V' если par1 != par2 с проверкой на null" type="string">
      case when 
      <par1>
        nvl(to_char(<val />),'837n23rr0234y 34t')
      </par1><par2>
        !=nvl(to_char(<val />),'837n23rr0234y 34t')
      </par2>
      then 'V' end
    </function>
    <function name="compare_1" comment="Возвращает 1 если par1 != par2 с проверкой на null" type="number">
      case when
      <par1>
        nvl(to_char(<val />),'837n23rr0234y 34t')
      </par1><par2>
        !=nvl(to_char(<val />),'837n23rr0234y 34t')
      </par2>
      then 1 end
    </function>
    <function name="null" comment="Возвращает всегда null">
      null
      <par>
        /*<val />*/
      </par></function>
    <function name="+nvl" type="number" comment="Сложение с проверкой на null (par1,par2)">
      <par1>
        nvl(<val />,0)
      </par1>
      <par2>
        +nvl(<val />,0)
      </par2>
    </function>
    <function name="excel:+nvl">
      <par1>
        <val />
      </par1>
      <par2>
        +<val /></par2>
    </function>
    <function name="/" type="number" comment="Деление (par1,par2)">
      <par1>
        <val />
      </par1>
      <par2>
        /nullif(<val />,0)
      </par2>
    </function>
    <function name="/nvl" type="number" comment="Деление с проверкой на null (par1,par2)">
      <par1>
        nvl(<val />,0)
      </par1>
      <par2>
        /nullif(<val />,0)
      </par2>
    </function>
    <function name="" type="variant">
      <par>
        <val />
      </par>
    </function>
    <function name="dummy" type="variant" comment="ничего не возвращает" pth="0" />
    <function name="()" type="variant" comment="для вывода параметров в select">
      <par>
        <val />
      </par>
    </function>
    <function name="excel:()" type="variant" comment="для вывода параметров в select">
      <par>
        <val />
      </par>
    </function>
    <function name="coalesceu" type="variant" comment="первый не undefined">
      <par>
        <val />
      </par>
    </function>
    <function name="true" comment="Истина" type="bool" text="true">1=1</function>
    <function name="false" comment="Ложь" type="bool" text="false">0=1</function>
    <function name="exists" type="bool">exists <par><val /></par></function>
    <function name="not exists" type="bool">not exists <par><val /></par></function>
    <function name="*" type="number" comment="Умножение (par1,par2)">
      <par1>
        <val />
      </par1>
      <par>
        *<val /></par>
    </function>
    <function name="/0" comment="Деление (par1,par2) [Устарела, рекомендуем использовать '/']" type="number" text="*">
      <par1>
        <val />
      </par1>
      <par2>
        /nullif(<val />,0)
      </par2>
    </function>
    <function name="not in" comment=" (par1,par2)" type="bool">
      <par1>
        <val />
      </par1>
      <par2>
        not in<val /></par2>
    </function>
    <function name="not" type="bool">
      <par1>
        not <val /></par1>
    </function>
    <function name="in" type="bool" text="*">
      <par1>
        <val />
      </par1>
      <par2>
        in <val /></par2>
    </function>
    <function name="is">
      <par1>
        <val />
      </par1>
      <par2>
        is<val /></par2>
    </function>
    <function name="and" comment="И (par1,[par2])" type="bool">
      <par1>
        <val />
      </par1>
      <par>
        and <val /></par>
    </function>
    <function name="excel:and" comment="И (par1,[par2])" type="bool">
      AND(
      <par1><val /></par1><par>
        , <val /></par>
      )
    </function>
    <function name="or" pth="1" comment="Или (par1,par2)" type="bool">
      <par1>
        <val />
      </par1>
      <par>
        or <val /></par>
    </function>
    <function name="excel:=1" pth="1" type="bool">
      AND(
      <par1><val />=1
      </par1><par>
        , <val />=1
      </par>
      )
    </function>
    <function name="is not null" comment="Не пусто (par1,[par2])" type="bool">
      <par1>
        <val /> is not null
      </par1>
      <par>
        or <val /> is not null
      </par>
    </function>
    <function name="is not null all" comment="Не пусто (par1 и [par2])" type="bool">
      <par1>
        <val /> is not null
      </par1>
      <par>
        and <val /> is not null
      </par>
    </function>
    <function name="is null" comment="Пусто (par1,[par2])" type="bool">
      <par1>
        <val />is null
      </par1>
      <par>
        and <val />is null
      </par>
    </function>
    <function name="is null or -1" comment="Пусто (par1,[par2])" type="bool">
      <par1>
        nullif(<val />,-1) is  null
      </par1>
      <par>
        and   nullif(<val />,-1) is  null
      </par>
    </function>
    <function name="array">
      <par1>
        <val />
      </par1>
      <par>
        , <val /></par>
    </function>
    <function name="arraynull">
      null
      <par> 
        , <val /></par></function>
    <function name="count-distinct" Comment="Кол-во уникальных значений">
      COUNT(DISTINCT 
      <par1><val /></par1>
      )
    </function>
    <function name="sum" pth="0" comment="Сумма (par1)" type="aggregate">
      sum(
      <par1><val /></par1>
      )
    </function>
    <function name="count" pth="0" type="aggregate">
      count(
      <par1><val /></par1>
      )
    </function>
    <function name="stragg_dist" pth="0" comment="конкатенация уникальных (par1)" type="aggregate">
      stragg_dist(
      <par1><val /></par1>
      )
    </function>
    <function name="wm_concat" pth="0" comment="очередная вариация на тему конкатенаци работает в 10g, можно использовать с keep" type="aggregate">
      wm_concat(
      <par1><val /></par1>
      )
    </function>
    <function name="reorder_string" pth="0" comment="" type="string">
      vg_period.agg_9i(
      <par><val /></par><par>
        ,<val /></par>
      )
    </function>
    <function name="lead" pth="0" type="aggregate">
      lead(
      <par1><val /></par1>
      )
    </function>
    <function name="max" pth="0" comment="Максимум (par1)" type="aggregate">
      max(
      <par1><val /></par1>
      )
    </function>
    <function name="min" pth="0" comment="Минимум (par1)" type="aggregate">
      min(
      <par1><val /></par1>
      )
    </function>
    <function name="nvl0" comment="Проверка на null (par1)" type="number">
      nvl(
      <par1><val /></par1>
      ,0)
    </function>
    <function name="excel:nvl0" comment="Проверка на null (par1)" type="number">
      <par1>
        <val />
      </par1>
    </function>
    <function name="round" type="number" comment="Округление (par1,par2 - n после запятой)">
      round(
      <par1><val /></par1><par2>
        ,<val /></par2>
      )
    </function>
    <function name="trunc" type="number" comment="Обрезает число до целого (par1)">
      trunc(
      <par1><val /></par1><par2>
        ,<val /></par2>)
    </function>
    <function name="mes-name" type="string" comment="Месяц словом (par1 - месяц числом)">
      <par1>
        decode (<val />,1,'Январь',2,'Февраль',3,'Март',4,'Апрель',5,'Май',6,'Июнь',7,'Июль',8,'Август',9,'Сентябрь',10,'Октябрь',11,'Ноябрь',12,'Декабрь')
      </par1>
    </function>
    <!--месяцы в родительном падеже-->
    <function name="mes-name-rp" type="string" comment="Месяц словом (родительный падеж) (par1 - месяц числом)">
      <par1>
        decode (<val />,1,'Января',2,'Февраля',3,'Марта',4,'Апреля',5,'Мая',6,'Июня',7,'Июля',8,'Августа',9,'Сентября',10,'Октября',11,'Ноября',12,'Декабря')
      </par1>
    </function>
    <function name="mes-name-pp" type="string" comment="Месяц словом (предложный падеж) (par1 - месяц числом)">
      <par1>
        decode (<val />,1,'Январе',2,'Феврале',3,'Марте',4,'Апреле',5,'Мае',6,'Июне',7,'Июле',8,'Августе',9,'Сентябре',10,'Октябре',11,'Ноябре',12,'Декабре')
      </par1>
    </function>
    <function name="mes" comment="Месяц числом (par1 - ym)" type="number">
      mod(
      <par1><val /></par1>,
      1)*100
    </function>
    <function name="ym2 mes" comment="Месяц числом (par1 - ym2)" type="number">
      mod(
      <par1><val />/100
      </par1>,
      1)*100
    </function>
    <function name="ym2 god" comment="Год числом (par1 - ym2)" type="number">
      trunc(
      <par1><val />/100
      </par1>)
    </function>
    <function name="regexp_substr" comment="Поиск подстроки по маске (par1,par2,par3,par4)" type="string">
      regexp_substr(<par1><val /></par1>,<par2><val /></par2>,<par3><val /></par3>,<par4><val /></par4>)
    </function>
    <!--не проверено по этому пока коммент-->
    <!--<function name="date between nvl" comment="Дата в промежутке (par1,par2 null = рождество,par3 null = конец света)">
      <par1>
        <val />
      </par1>
      <par2>
        between nvl(<val />,to_date('01.01.0001', 'dd.mm.yyyy'))
      </par2>
      <par3>
        and nvl(<val />,to_date('31.12.9999', 'dd.mm.yyyy'))
      </par3>
    </function>-->
    <function name="date to char" type="string" comment="Дата в строковом формате (par1 - data)">
      <par1>
        to_char(<val />,'DD.MM.YYYY')
      </par1>
    </function>
    <!--<function name="date to char2" type="string" comment="Дата в строковом формате (без дня) (par1 - data)">
      <par1>
        to_char(<val />,'MM.YYYY')
      </par1>
    </function>-->
    <function name="int to char" type="string" comment="Целое число в строковом формате (par1 - data)">
      <par1>
        to_char(<val />)
      </par1>
    </function>
    <function name="ym to char" type="string" comment="Период в строковом формате (par1 - ym)">
      <par1>
        trim(to_char(<val />,'9999.99'))
      </par1>
    </function>
    <function name="ym2 to char" type="string" comment="Период в строковом формате (par1 - ym2)">
      <par1>
        trim(to_char(<val />/100,'9999.99'))
      </par1>
    </function>
    <function name="date to ym" type="number" comment="Период в числовом формате 2014.10 (par1 - data)">
      <par1>
        to_number(to_char(<val />,'YYYYMM'))/100
      </par1>
    </function>
    <function name="num to ym2" type="number" comment="Период в числовом формате 201410 , параметры (год, месяц)">
      <par>
        <val />*100+
      </par>
      <par>
        <val />
      </par>
    </function>
    <function name="num to ym" type="number" comment="Период в числовом формате 2014.10 , параметры (год, месяц)">
      <par>
        <val />+
      </par>
      <par>
        <val />/100
      </par>
    </function>
    <function name="date to ym2" type="number" comment="Период в числовом формате 201410 (par1 - data)">
      <par1>
        to_number(to_char(<val />,'YYYYMM'))
      </par1>
    </function>
    <function name="date add days" type="date" comment="добавление дней к дате(par1 - data, par2 - n дней)">
      <par1>
        <val />
      </par1>
      <par2>
        + (<val />)
      </par2>
    </function>
    <function name="ym add month" type="number" comment="Период увеличенный на n месяцев (par1 - ym, par2 - n меясцев)">
      <!--to_number(to_char(ADD_MONTHS((to_date(to_char(2014.08*10000+01),'YYYYMMDD')),1),'YYYYMM'))/100-->
      to_number(to_char(ADD_MONTHS(
      <par1>
        (to_date(to_char(<val />*10000+01),'YYYYMMDD')
      </par1>
      )
      <par2>
        ,<val />)
      </par2>
      ,'YYYYMM'))/100
    </function>
    <function name="ym2 add month" type="number" comment="Период увеличенный на n месяцев (par1 - ym2, par2 - n меясцев)">
      to_number(to_char(ADD_MONTHS(
      <par1>
        (to_date(to_char(<val />*100+01),'YYYYMMDD')
      </par1>
      )
      <par2>
        ,<val />)
      </par2>
      ,'YYYYMM'))
    </function>
    <function name="day" type="number" comment="День в числовом формате из даты (par1 - data)">
      <par1>
        to_number(to_char(<val />,'DD'))
      </par1>
    </function>
    <function name="month" type="number" comment="Месяц в числовом формате из даты (par1 - data)">
      <par1>
        to_number(to_char(<val />,'MM'))
      </par1>
    </function>
    <function name="hour" type="number" comment="Часы в числовом формате из даты (par1 - data)">
      <par1>
        to_number(to_char(<val />,'HH24'))
      </par1>
    </function>
    <function name="ym end time" comment="Возвращает дату последнего дня в периоде (par1 - ym)" type="date">
      <par1>
        LAST_DAY(to_date(<val />*100,'YYYYMM'))+(1-1/24/60/60)
      </par1>
    </function>
    <function name="ym2 end time" type="date">
      <par1>
        LAST_DAY(to_date(<val />,'YYYYMM'))+(1-1/24/60/60)
      </par1>
    </function>
    <function name="ym2 end day" type="date">
      <par1>
        LAST_DAY(to_date(<val />,'YYYYMM'))
      </par1>
    </function>
    <function name="ym end day" comment="Возвращает дату последнего дня в периоде (par1 - ym)" type="date">
      <par1>
        LAST_DAY(to_date(<val />*100,'YYYYMM'))
      </par1>
    </function>
    <function name="ym next day" type="date">
      <par1>
        LAST_DAY(to_date(<val />*100,'YYYYMM'))+1
      </par1>
    </function>
    <function name="year" type="number" comment="Год в числовом формате из даты (par1 - data)">
      <par1>
        to_number(to_char(<val />,'YYYY'))
      </par1>
    </function>
    <function name="ym begin time" comment="Возвращает дату первого дня в периоде (par1 - ym)" type="date">
      <par1>
        (to_date(to_char(<val />*10000+01),'YYYYMMDD'))
      </par1>
    </function>
    <function name="ym2 begin time" comment="Возвращает дату первого дня в периоде (par1 - ym)" type="date">
      <par1>
        (to_date(to_char(<val />*100+01),'YYYYMMDD'))
      </par1>
    </function>
    <function name="year begin time" type="date" comment="Возвращает первый день года (par1 - year) возвращает date">
      <par1>
        (to_date(<val />||'0101','YYYYMMDD'))
      </par1>
    </function>
    <function name="year end time" type="date" comment="Возвращает последний день года (par1 - year) возвращает date">
      <par1>
        (to_date((<val />+1)||'0101','YYYYMMDD')-(1/24/60/60))
      </par1>
    </function>
    <function name="months_between" type="number" comment="Количество месяцев между 2-мя датами">
      MONTHS_BETWEEN(
      <par1><val /></par1>
      ,
      <par2><val /></par2>
      )
    </function>
    <function name="month ym between" type="number" comment="Количество месяцев между периодами (par1,par2)">
      MONTHS_BETWEEN(
      <par1>
        (to_date(to_char(<val />*10000+01),'YYYYMMDD'))
      </par1>
      ,
      <par2>
        (to_date(to_char(<val />*10000+01),'YYYYMMDD'))
      </par2>
      )
    </function>
    <function name="month ym2 between" type="number" comment="Количество месяцев между периодами (par1,par2)">
      MONTHS_BETWEEN(
      <par1>
        (to_date(to_char(<val />*100+01),'YYYYMMDD'))
      </par1>
      ,
      <par2>
        (to_date(to_char(<val />*100+01),'YYYYMMDD'))
      </par2>
      )
    </function>
    <function name="days ym between" type="number" comment="Количество дней между периодами (par1 - больший период,par2 - меньший период)">
      ROUND(
      <par1>
        LAST_DAY(to_date(<val />*100,'YYYYMM'))+1
      </par1>
      -
      <par2>
        (to_date(to_char(<val />*10000+01),'YYYYMMDD'))
      </par2>
      )
    </function>
    <function name="nvl" comment=" (par1,par2)" type="variant">
      nvl(
      <par1><val /></par1><par2>
        ,<val /></par2>)
    </function>
    <function name="nullif" comment=" (par1,par2)" type="variant">
      nullif(
      <par1><val /></par1><par2>
        ,<val /></par2>)
    </function>
    <function name="nvlu" comment="тоже что nvl, плюс заменяет undefined на null в первом параметре" type="variant">
      nvl(
      <par1>
        /*nvlu*/<val /></par1><par2>
        ,<val /></par2>)
    </function>
    <function name="is undefined" comment="не тестировал!">
      <par1>
        <val />
      </par1>
    </function>
    <function name="+" type="number">
      <par1>
        nvl(<val />,0)
      </par1>
      <par2>
        +nvl(<val />,0)
      </par2>
    </function>
    <function name="case" type="variant">
      case
      <par1><val /></par1>
      end
    </function>
    <function name="if">
      case
      <par1>
        when <val /></par1><par>
        then <val /></par><par>
        else <val /></par>
      end
    </function>
    <function name="excel:if">
     IF(
      <par1><val />,
      </par1><par><val />,
      </par><par><val /></par>
      )
    </function>
    <function name="when" pth="0" type="when">
      when
      <par1><val /></par1><par2>
        then
        <val /></par2></function>
    <function name="else" pth="0" type="else">
      <par1>
        else<val /></par1>
    </function>
    <function name="distinct" pth="0">
      <par1>
        distinct <val /></par1>
    </function>
    <function name="-" type="number">
      <par1>
        <val />
      </par1>
      <par2>
        -<val /></par2>
    </function>
    <function name="left border" type="number" comment="Если par1 меньше par2 - возвращает par2, иначе par1 (par1,par2)">
      case
      <par1>
        when <val /> &lt;
        <par2><val /></par2>
        then
        <par2><val /></par2>
        else <val /></par1>
      end
    </function>
    <function name="left border 0" type="number" comment="Если par1 меньше 0 - возвращает 0, иначе par1 (par1,par2)">
      case
      <par1>
        when <val /> &lt; 0
        then 0
        else <val /></par1>
      end
    </function>
    <function name="0-" type="number">
      <par1>
        0-<val /></par1>
    </function>
    <function name="excel:0-" type="number">
      <par1>
        -<val /></par1>
    </function>
    <function name="-nvl" type="number">
      <par1>
        nvl(<val />,0)
      </par1>
      <par2>
        -nvl(<val />,0)
      </par2>
    </function>
    <function name="excel:-nvl" type="number">
      <par1>
        <val />
      </par1>
      <par2>
        -<val /></par2>
    </function>
    <function name="decode" type="variant">
      decode(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="ltrim" comment="Удаление слева символы (par1 - строка, par2 - символ(ы)" type="string">
      LTRIM(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="rtrim" comment="Удаление справа символы (par1 - строка, par2 - символ(ы)" type="string">
      RTRIM(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="trim" comment="Удаление лишних пробелов по краям (par1 - строка)" type="string">
      TRIM(
      <par1><val /></par1>
      )
    </function>
    <function name="grouping">
      grouping(
      <par1><val /></par1>
      )
    </function>
    <function name="grouping_id" type="number">
      grouping_id(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="length" comment="Число символов в строке (par1 - строка)" type="number">
      length(
      <par1><val /></par1>
      )
    </function>
    <function name="substr" comment="Подстрока (par1 - строка, par2 - начальная позиция, par3 - число символов" type="string">
      SUBSTR(
      <par1><val /></par1><par2>
        , <val /></par2><par3>
        , <val /></par3>
      )
    </function>
    <function name="instr" type="number">
      instr(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <!--function name="date" type="date">
      to_date(
      <par1><val /></par1>,'DD.MM.YYYY MI:SS'
      )
    </function-->
    <function name="first_value" pth="0" type="aggregate">
      first_value(
      <par1><val /></par1>
      )
    </function>
    <function name="first_value ignore nulls" pth="0" type="aggregate">
      first_value(
      <par1><val /></par1>
      IGNORE NULLS
      )
    </function>
    <function name="last_value" pth="0" type="aggregate">
      last_value(
      <par1><val /></par1>
      )
    </function>
    <function name="last_value ignore nulls" pth="0" type="aggregate">
      last_value(
      <par1><val /></par1>
      IGNORE NULLS
      )
    </function>
    <function name="partition by" pth="0" type="partition">
      partition by <par><val /></par><par>,<val /></par></function>
    <function name="order by" exclude="1" pth="0" type="order" comment="тоже самое что order by rows * *, заменить в запросах удалить">
      order by <par><val /></par><par>,<val /></par>
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    </function>
    <function name="order by simple" pth="0" type="order" comment="order by без всего">
      order by <par><val /></par><par>,<val /></par></function>
    <function name="order by 2" pth="0" type="order" comment="тоже самое что order by rows * 0, заменить в запросах удалить">
      order by <par><val /></par><par>,<val /></par></function>
    <function name="order by rows * 0" pth="0" type="order">
      order by <par><val /></par><par>,<val /></par>
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    </function>
    <function name="order by rows * -1" pth="0" type="order">
      order by <par><val /></par><par>,<val /></par>
      ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
    </function>
    <function name="order by rows * *" pth="0" type="order">
      order by <par><val /></par><par>,<val /></par>
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    </function>
    <function name="order by range * -1" pth="0" type="order">
      order by <par><val /></par><par>,<val /></par>
      range BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
    </function>
    <function name="order by range 1 *" pth="0" type="order">
      order by
      <par><val /></par><par>
        ,<val /></par>
      range BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING
    </function>
    <function name="order by range * 0" pth="0" type="order">
      order by
      <par><val /></par><par>
        ,<val /></par>
      range between unbounded preceding and current row
    </function>
    <function name="order by range 0 *" pth="0" type="order">
		  order by
		  <par><val /></par><par>
			  ,<val /></par>
		  range between current row and unbounded following
	  </function>
    <function name="over" pth="0" type="variant">
      <par>
        <val />
      </par>
      <par>
        over(<val /></par>
      <par>
        <val />
      </par>
      )
    </function>
    <function name="lag" pth="0" type="aggregate">
      lag(
      <par><val /></par><par>
      ,<val /></par><par>
        ,<val /></par>
      )
    </function>
    <function name="no dublers">
      case when rownum=max(rownum) over(partition by <par><val /></par> ) then <par><val /></par>  end
    </function>
    <function name="row_num" type="number" comment="тоже самое что row_number c order by simple">
      <par>row_number() over( order by <val /></par>
      <par>,<val /></par>)
    </function>
    <function name="row_number" type="number">
      <par>row_number() over(<val /></par>
      <par>
        <val />
      </par>)
    </function>
    <function name="dense_rank" type="number">
      <par>
        dense_rank() over(<val /></par>
      <par>
        <val />
      </par>
      )
    </function>
    <function name="asc" pth="0" comment="asc [nulls last]"><par><val /></par> asc</function>
    <function name="asc nulls first" pth="0" comment="asc nulls first"><par><val /></par> asc nulls first</function>
    <function name="desc" pth="0" comment="desc [nulls first]" ><par><val /></par> desc</function>
    <function name="desc nulls last" pth="0" comment="desc nulls last" ><par><val /></par> desc nulls last</function>
    <function name="rownum" type="number" pth="0">rownum</function>
    <function name="rowid" type="string" pth="0">rowid</function>
    <function name="level" type="number">level</function>
    <!--<function name="last range" pth="0" comment="используется вместе с группировкой, выводит агрегат только по последнему range">
      <par>
        <val />
      </par>
      ) keep (danse_rank last order by
      <par>
        <val />
      </par>
    </function>-->
    <function name="keep first" timestamp="05.11.2017 00:28:56">
      <par>
        <val />
      </par>
      <par>
        keep(dense_rank first order by <val /></par>
      <par>
        ,<val /></par>
      )
    </function>
    <function name="keep last">
      <par>
        <val />
      </par>
      <par>
        keep(dense_rank last order by <val /></par>
      <par>
        ,<val /></par>
      )
    </function>
    <function name="listagg" type="string">
      listagg(
      <par><val /></par>
      ,
      <par><val /></par>
      )   within group (order by
      <par><val /></par><par>
        ,<val /></par>
      )
    </function>
    <function name="nativity" pth="0" type="date">DATE'0002-01-01'<par></par></function>
    <function name="nativity_ym2" pth="0" type="number">100001<par></par></function>
    <function name="doomsday" pth="0" type="date">DATE'8999-12-31'<par></par></function>
    <function name="doomsday_ym2" pth="0" type="number">899912<par></par></function>
    <function name="add_month" type="date">
      <par1>
        add_months( <val />,1)
      </par1>
    </function>
    <function name="add_months" type="date">
        add_months( <par1><val /></par1>,<par2><val /></par2>)
    </function>
    <function name="asuse_check_rights" title="параметры kod_area, kodp" type="number">
      kg_common.user_podr_rights(<par1><val /></par1>,<par2><val /></par2>)
    </function>
    <function name="-sec" type="date">
      <par1>
        <val />-1/24/60/60
      </par1>
    </function>
    <function name="to_char" type="string" comment="Преобразование в строку нужного формата (par1 - value, par2 - формат)">
      to_char(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="number_to_currency_string" type="string" comment="Преобразование числа в формат 12 345 678 901 234,56 (максимум 14 знаков до запятой)">
      to_char(
      <par1><val /></par1>, 'FM99G999G999G999G999D00', 'NLS_NUMERIC_CHARACTERS = ''. '''
      )
    </function>
    <function name="to_number" type="number">
      to_number(
      <par1><val /></par1><par2>
        , <val /></par2>
      )
    </function>
    <function name="to_number_dot" type="number">
      to_number(
      <par1><val /></par1>
     
       , '999999999.999999999'
    
      )
    </function>
    <function name="to_number_sep" type="number">
      to_number(
      <par1>
        replace(<val />,',','.')
      </par1>

      , '99999999999.999999999'

      )
    </function>
    <function name="to_char0" type="string" comment="Дата из строки (par1 - value)">
      <par1>
        to_char(<val />)
      </par1>
    </function>
    <function name="to_date" type="date" comment="Дата из строки (par1 - дата, par2 - формат)">
      <par1>
        to_date(<val />,
      </par1>
      <par2>
        <val />)
      </par2>
    </function>
    <function name="latest" type="date">
      nullif(greatest (
      <par1>
        nvl(<val />, to_date('01.01.0001','DD.MM.YYYY'))
      </par1><par>
        , nvl(<val />, to_date('01.01.0001','DD.MM.YYYY'))
      </par>
      ), to_date('01.01.0001','DD.MM.YYYY'))
    </function>
    <function name="earliest" type="date">
      nullif(least (
      <par1>
        nvl(<val />, to_date('01.01.9999','DD.MM.YYYY'))
      </par1><par>
        , nvl(<val />, to_date('01.01.9999','DD.MM.YYYY'))
      </par>
      ),  to_date('01.01.9999','DD.MM.YYYY'))
    </function>
    <function name="earliest nvl" type="date">
      least (
      <par1>
        nvl(<val />, to_date('01.01.0001','DD.MM.YYYY'))
      </par1><par>
        , nvl(<val />, to_date('01.01.0001','DD.MM.YYYY'))
      </par>
      )
    </function>
    <function name="latest nvl" type="date">
      greatest (
      <par1>
        nvl(<val />, to_date('01.01.9999','DD.MM.YYYY'))
      </par1><par>
        , nvl(<val />, to_date('01.01.9999','DD.MM.YYYY'))
      </par>
      )
    </function>
    <function name="smallest" type="number">
      nullif(least (
      <par1>
        nvl(<val />, 99999999999999999999999999999999999999)
      </par1><par>
        , nvl(<val />, 99999999999999999999999999999999999999)
      </par>
      ),  99999999999999999999999999999999999999)
    </function>
    <function name="smallest not 0" type="number">
      nullif(least (
      <par1>
        nvl( nullif(<val />,0), 99999999999999999999999999999999999999)
      </par1><par>
        , nvl(nullif(<val />,0), 99999999999999999999999999999999999999)
      </par>
      ),  99999999999999999999999999999999999999)
    </function>
    <function name="smallest nvl" type="number">
      least (
      <par1>
        nvl(<val />, 0)
      </par1><par>
        , nvl(<val />, 0)
      </par>
      )
    </function>
    <function name="greatest_num" type="number">
      nullif(greatest (
      <par1>
        nvl(<val />, -99999999999999999999999999999999999999)
      </par1><par>
        , nvl(<val />, -99999999999999999999999999999999999999)
      </par>
      ), -99999999999999999999999999999999999999)
    </function>
    <function name="excel:greatest_num" type="number">
      MAX(
      <par1><val /></par1><par>
        , <val /></par>
      )
    </function>
    <function name="coalesce" type="variant">
      coalesce(
      <par1><val /></par1><par2>
        ,<val /></par2>
      )
    </function>
    <function name="coalesce nullif 0" type="variant">
      coalesce(
      <par1>
        nullif (<val />,0)
      </par1><par2>
        , nullif (<val />,0)
      </par2>
      )
    </function>
    <function name="greatest" comment="возвращает наибольшее значение из заданных" type="variant">
      greatest(
      <par1><val /></par1><par2>
        ,<val /></par2>
      )
    </function>
    <function name="least" comment="возвращает наименьшее значение из заданных" type="variant">
      least(
      <par1><val /></par1><par2>
        ,<val /></par2>
      )
    </function>
    <function name="lpad" type="string">
      lpad(<par1><val /></par1><par2>
        ,<val /></par2>)
    </function>
    <function name="space" type="string">
      lpad(' '
      ,<par1><val /></par1>
      ,' ')
    </function>
    <function name="sysdate" type="date">
      sysdate
    </function>
    <function name="connect_by_root">
      <par1>
        connect_by_root <val /></par1>
    </function>
    <function name="connect_by_isleaf" type="number">
        connect_by_isleaf 
    </function>
    <function name="sys_connect_by_path" type="string">
      <par1>
        sys_connect_by_path( <val />,
      </par1>
      <par2>
        <val />)
      </par2>
    </function>
    <function name="replace" type="string">
      <par1>
        replace( <val />,
      </par1>
      <par2>
        <val />,
      </par2>
      <par2>
        <val />)
      </par2>
    </function>
    <function name="mes to kv" type="number">
      <par1>
        trunc((<val />-1)/3)+1
      </par1>
    </function>
    <function name="ym to kv" type="number">
      <par1>

        trunc(( (mod (<val />,1)*100)-1)/3)+1
      </par1>
    </function>
    <function name="ym2 to kv" type="number">
      <par1>
        trunc(( (mod (<val />/100,1)*100)-1)/3)+1
      </par1>
    </function>
    <function name="date to kv" type="number">
      <par1>
        trunc((month(<val />)-1)/3)+1
      </par1>
    </function>
    <function name="kv end mes" type="number">
      <par1>
        <val />*3
      </par1>
    </function>
    <function name="kv beg mes" type="number">
      <par1>
        <val />*3-2
      </par1>
    </function>
    <!--!!! ykv есть ошибки, разобраться потом, когда понадобится-->
    <!--<function name="date to ykv" type="number" comment="Квартал в числовом формате 2014.1 (par1 - data)">
      <par1>
        to_number(to_char(<val/>,'YYYY'))*10 + (trunc(to_number(to_char(<val/>,'MM')-1)/3)+1)/10
      </par1>
    </function>


    <function name="ykv begin time">
      <par1>
        (to_date(to_char(

        (trunc(<val />)*100+    ( ((MOD(<val />, 1)*10)-1)*3+1))

        *100+01),'YYYYMMDD'))
      </par1>
    </function>

    <function name="ykv end time">
      <par1>

        add_months(

        (to_date(to_char(

        (trunc(<val />)*100+    ( ((MOD(<val />, 1)*10)-1)*3+3))

        *100+01),'YYYYMMDD'))

        ,1) -(1/24/60/60)
      </par1>
    </function>-->
    <function name="in nnull" comment="in с учетом number null-константы" type="bool">
      <par1>
        nvl(<val />,<nnull />)
      </par1>
      <par2>
        in <val /></par2>
    </function>
    <function name="in snull" comment="in с учетом string null-константы" type="bool">
      <par1>
        nvl(<val />,trim('<snull />'))
      </par1>
      <par2>
        in <val /></par2>
    </function>
    <function name="like snull" comment="Поиск по строке (par1, par2) с учетом string null-константы" type="bool">
      <par1>
        nvl(lower(<val />),trim('<snull />'))
      </par1>
      <par2>
        like lower(<val />)
      </par2>
    </function>
    <function name="= nnull" comment="Равно (par1,par2) с учетом number null-константы" type="bool">
      <par1>
        nvl(<val />,<nnull />)
      </par1>
      <par2>
        = <val /></par2>
    </function>
    <function name="= snull" comment="Равно (par1,par2) с учетом string null-константы" type="bool">
      <par1>
        nvl(<val />,trim('<snull />'))
      </par1>
      <par2>
        = <val /></par2>
    </function>
    <function name="= dnull" comment="Равно (par1,par2) с учетом date null-константы" type="bool">
      <par1>
        nvl(<val />,to_date('<dnull />','dd.mm.yyyy'))
      </par1>
      <par2>
        = <val /></par2>
    </function>
    <function name="extract_word" comment="Слово из строки по номеру после разделителя пробел или точка (par1,par2)" type="string">
      vc_lkk_utils.extract_word(<par1><val /></par1>,<par2><val /></par2>)
    </function>
    <function name="cut_phone" comment="Приведение номера телефона к виду +7ХХХХХХХХХХ (par1)" type="string">
      vc_lkk_utils.cut_phone(<par1><val /></par1>)
    </function>
    <function name="is_email_valid" comment="Проверка валидности e-mail адреса (par1)" type="bool">
      regexp_like(<par1><val /></par1>, '^[A-Za-z0-9]+[A-Za-z0-9._-]?+@[A-Za-z0-9.-]+\.[A-Za-z]+$')
    </function>
    <function name="ipr_get_character_abbr" comment="Ед. измерения характеристик объекта (par1 - код характеристики)" type="bool">
      ipr_get_character_abbr(<par1><val /></par1>)
    </function>
    <function name="lnnvl" Comment="undefined,false -&gt; true; true -&gt; false">
	  lnnvl
	  <par1><val /></par1></function>
    <function name="+no_nvl" type="number" comment="Сложение без проверки на null (par1,par2)">
      <par1>
        <val />
      </par1>
      <par2>
			  +<val /></par2>
    </function>
    <function name="translate" comment="Замена символов из списка на указанный символ (par1 - строка, par2 - список символов для замены (без зпт), par3 - заменяющий символ" type="string">
      TRANSLATE(
      <par1><val /></par1><par2>
        , <val /></par2><par3>
        , <val /></par3>
      )
    </function>
    <function name="sys_context" comment="Оракловый sys_context (par1 - context, par2 - value_name)" type="string">
	  sys_context(
		<par1><val /></par1><par2>
		, <val /></par2>
	  )
	</function>
    <function name="chr" comment="Оракловый chr (par1 - ascii num of char)" type="string">
		  chr(
		  <par1><val /></par1>
		  )
	  </function>
    <function name="is_dog_edo" comment="Обладает ли договор признаком ЭДО (par = kod_dog), 1/0" type="number">
		  sg_paket_pech.is_kod_el_inter_type_edo(
		  <par1><val /></par1>
		  )
	  </function>
    <function name="egr_payer_sulst" comment="Возвращает СЮЛСТ для абонента из ЕГР (par = kodp)" type="string">
      KG_EGR_ULIP_R.get_payer_sulst(
      <par1><val /></par1>
		  )
	  </function>
    <function name="egr_payer_sulst_dat" comment="Возвращает дату СЮЛСТ для абонента из ЕГР (par = kodp)" type="string">
      KG_EGR_ULIP_R.get_payer_sulst_date(
      <par1><val /></par1>
      )
    </function>
    <function name="egr_payer_docname" comment="Возвращает наименование документа для абонента из ЕГР (par = kodp)" type="string">
      KG_EGR_ULIP_R.get_payer_docname(
      <par1><val /></par1>
      )
    </function>
    <function name="egr_payer_docnum" comment="Возвращает номер документа для абонента из ЕГР (par = kodp)" type="string">
      KG_EGR_ULIP_R.get_payer_docnum(
      <par1><val /></par1>
      )
    </function>
    <function name="egr_payer_docdate" comment="Возвращает дату документа для абонента из ЕГР (par = kodp)" type="string">
      KG_EGR_ULIP_R.get_payer_docdate(
      <par1><val /></par1>
      )
    </function>
    <function name="adress_region" comment="Возвращает по коду дома Регион kod_m (par = kod_d)" type="string">
      nk_adress.xf_adr_region(
      <par1><val /></par1>
      )
    </function>
    <function name="adress_sf" comment="Возвращает по коду дома Субъект Федерации kod_m (par = kodd)" type="string">
      nk_adress.kf_get_sf(
      <par1><val /></par1>
      )
    </function>
    <function name="adress_district" comment="Возвращает по KOD_D_DOG район (par = KOD_D_DOG)" type="string">
      nk_adress_r.get_district(
      <par1><val /></par1>
      )
    </function>
    <function name="adress_region2" comment="Возвращает по коду дома наименование региона kod_m (par = kod_d)" type="string">
      nk_adress.KP_GET_REGION_NAME(
      <par1><val /></par1>
      )
    </function>
    <function name="get_podrazdel_ies" comment="Возвращает подраздел оквэд (par = kod_okved)" type="number">
      sqlb_rep_61880_17.get_podrazdel_ies(
      <par1><val /></par1>
      )
    </function>
    <function name="get_podrazdel_ies2" comment="Возвращает подраздел подраздела оквэд (par = kod_okved)" type="number">
      sqlb_rep_61880_17.get_podrazdel_ies2(
      <par1><val /></par1>
      )
    </function>
    <function name="mes-name-lowercase" type="string" comment="Месяц словом (par1 - месяц числом)" timestamp="08.07.2024 12:28:28">
      <par1>
        decode (<val />,1,'январь',2,'февраль',3,'март',4,'апрель',5,'май',6,'июнь',7,'июль',8,'август',9,'сентябрь',10,'октябрь',11,'ноябрь',12,'декабрь')
      </par1>
    </function>
  </functions>
  <parts>
    <part id="between-nvl">
      <params>
        <param name="val" />
        <param name="left" />
        <param name="right" />
      </params>
      <call function="between">
        <useparam name="val" />
        <call function="nvl">
          <useparam name="left" />
          <useparam name="val" />
        </call>
        <call function="nvl">
          <useparam name="right" />
          <useparam name="val" />
        </call>
      </call>
    </part>
    <part id="columns">
      <params>
        <param name="col" multiple="1" />
        <param name="tbl" />
        <param name="pref" />
      </params>
      <column column=":col" table=":tbl" as=":as" />
      <usepart part="column">
        <useparam name="col" />
        <useparam name="tbl" />
        <group>
          <useparam name="pref" />
          <useparam name="col" />
        </group>
      </usepart>
    </part>
    <part id="column">
      <params>
        <param name="col" />
        <param name="tbl" />
        <param name="as" />
      </params>
      <column column=":col" table=":tbl" as=":as" />
    </part>
    <part id="add-cols-add-group">
      <params>
        <param name="col" multiple="1" />
        <param name="qry-pname" />
      </params>
      <column table=":qry-pname" column=":col.column" group="1" />
    </part>
    <part id="saldo">
      <params>
        <param name="dolg" />
        <param name="nachisl" />
        <param name="opl" />
      </params>
      <call function="+">
        <useparam name="dolg" />
        <call function="-">
          <useparam name="nachisl" />
          <useparam name="opl" />
        </call>
      </call>
    </part>
    <region name="smart-join">
      <!-- пример
      <query name="21445">
      <params>
        <param name="cols-for-group">
          <columns>
            <column column="kod_dog"/>
            <column column="kod_sf"/>
            <column column="ym"/>
          </columns>
        </param>
      </params>
      <select>
        <usepart part="add-cols">
          <useparam name="cols-for-group"/>
          <const>a</const>
        </usepart>
        <column table="a" column="opl"></column>
        <column table="b" column="nachisl"></column>
      </select>
      <from>
        <query as="a">
          <select>
            <usepart part="add-cols-with-group">
              <useparam name="cols-for-group"/>
              <const>o</const>
            </usepart>
            <column table="o" column="opl"  group="sum"/>
          </select>
          <from>
            <query name="sr_facopl" as="o"/>
          </from>
        </query>
        <query as="b" join="left outer">
          <select>
            <usepart part="add-cols-with-group">
              <useparam name="cols-for-group"/>
              <const>n</const>
            </usepart>
            <column table="n" column="nachisl"  group="sum"/>
          </select>
          <from>
            <query name="sr_facras" as="n"/>
          </from>
          <usepart part="add-join">
            <useparam name="cols-for-group"/>
            <const>a</const>
            <const>b</const>
          </usepart>
        </query>
      </from>
    </query>
      
      -->
      <part id="add-cols-with-group">
        <params>
          <param name="col" multiple="1" />
          <param name="qry-pname" />
        </params>
        <column table=":qry-pname" column=":col.column" group=":col.group" />
      </part>
      <part id="add-cols">
        <params>
          <param name="col" multiple="1" />
          <param name="qry-pname" />
        </params>
        <column table=":qry-pname" column=":col.column" />
      </part>
      <part id="add-col-with-pref">
        <params>
          <param name="col" />
          <param name="qry-pname" />
          <param name="as" />
        </params>
        <column column=":col.column" table=":qry-pname" as=":as" />
      </part>
      <part id="add-cols-with-pref">
        <params>
          <param name="col" multiple="1" />
          <param name="qry-pname" />
        </params>
        <usepart part="add-col-with-pref">
          <useparam name="col" />
          <useparam name="qry-pname" />
          <nodes>
            <useparam name="qry-pname" />
            <const>_</const>
            <useparam name="col[@column]" />
          </nodes>
        </usepart>
      </part>
      <part id="add-col-use-pref">
        <params>
          <param name="col" />
          <param name="qry-pname" />
        </params>
        <column column=":col" table=":qry-pname" />
      </part>
      <part id="add-cols-use-pref">
        <params>
          <param name="col" multiple="1" />
          <param name="qry-pname" />
          <param name="pref" />
        </params>
        <usepart part="add-col-use-pref">
          <nodes>
            <useparam name="pref" />
            <const>_</const>
            <useparam name="col[@column]" />
          </nodes>
          <useparam name="qry-pname" />
        </usepart>
      </part>
      <part id="add-join">
        <params>
          <param name="cols" />
          <param name="main-qry-pname" />
          <param name="qry-pname" />
        </params>
        <call function="and">
          <usepart part="add-join-1">
            <useparam name="cols" />
            <useparam name="main-qry-pname" />
            <useparam name="qry-pname" />
          </usepart>
        </call>
      </part>
      <part id="add-join-1">
        <params>
          <param name="col" multiple="1" />
          <param name="main-qry-pname" />
          <param name="qry-pname" />
        </params>
        <call function="=">
          <column table=":main-qry-pname" column=":col.column" />
          <column table=":qry-pname" column=":col.column" />
        </call>
      </part>
      <part id="cols-for-group">
        <group>
          <column column="dep" />
          <column column="dep_name" />
          <column column="kod_dog" />
          <column column="kod_sf" />
          <column column="ym" />
        </group>
      </part>
    </region>
    <part id="ext-cond">
      <params>
        <param name="table-pname"></param>
        <param name="cond"></param>
      </params>
      <usepart>
        <content>
          <useparam name="cond"></useparam>
        </content>
        <useparam name="table-pname"></useparam>
      </usepart>
    </part>
  </parts>
  <queries />
</root>