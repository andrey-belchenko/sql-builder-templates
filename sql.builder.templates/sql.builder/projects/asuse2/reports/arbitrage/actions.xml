<?xml version="1.0" encoding="utf-8"?>
<root>
  <actions>
    <action name="ur_save.p_graf_sync_bzad" title="Синхронизация дат. наступления задолженности" action-type="call-plsql">
      <params>
        <param name="kod_hist_mat" type="number" />
        <param name="kod_sogl" type="number" />
        <param name="kod_isp" type="number" />
      </params>
      <text>
        declare
        n number;
        s string (1000);
        begin
        ur_save.p_graf_sync_bzad(:kod_hist_mat, :kod_sogl, :kod_isp, n, s);
        if(n != 0) then
        raise_application_error(-20999,s);
        end if;
        end;
      </text>
    </action>
    <action name="t_byt_o_gp.cr_izv_all " title="Создание извещения на ГП" action-type="call-plsql" timestamp="22.03.2016 15:55:40">
      <params>
        <param name="kod_dog" type="number" />
        <param name="sum_gp" type="number" />
        <param name="num_delo" type="string" />
        <param name="ym" type="number" />
        <param name="dat" type="date" />
        <param name="kod_izv" type="number" is-ret="1" />
      </params>
      <text>
        declare
        n number;
        begin
        delete from rr_rab_x;
        INSERT INTO rr_rab_x (kod, ym, d1, m1, m2, m3, s1) VALUES (:kod_dog  , :ym  , :dat,:sum_gp , NULL  , 0 , :num_delo);
        T_BYT_O_GP.cr_izv_all (n);
        SELECT n1  into  :kod_izv  FROM rr_rab_x;
        end;
      </text>
    </action>
    <action name="sg_dop_plat.sf_create_with_ras" title="Создание счета к иску" action-type="call-plsql" timestamp="22.03.2016 15:55:40">
      <params>
        <param name="kod_mat" type="number" />
        <param name="kod_dog" type="number" />
        <param name="dat_sf" type="date" />
        <param name="ym" type="number" />
        <param name="num_sf" type="number" />
        <param name="vid_real" type="number" />
        <param name="vid_t" type="number" />
        <param name="nachisl" type="number" />
        <param name="kod_sf" type="number" is-ret="1" />
        <param name="kod_deb" type="number" is-ret="1" />
      </params>
      <text>
        declare
        nkod_deb number;
        ddat_entry date;
        nerr number;
        serr varchar2(200);
        begin

        :kod_sf := sg_dop_plat.sf_create_with_ras(:kod_dog,:dat_sf, :ym, null, :vid_t, :nachisl);
        -- сразу генерим платёжку
        sg_form_peny.from_sf_to_deb(:kod_sf,nerr,serr);

        if(nerr != 0) then
        raise_application_error(-20999,serr);
        end if;

        select kod_deb into :kod_deb from sr_facvip where kod_sf = :kod_sf;
        UR_SAVE.dogpeny (6,:kod_mat,:kod_deb,null,null,:vid_real,:nachisl,:dat_sf,0,nerr, serr);

        if(nerr != 0) then
        raise_application_error(-20999,serr);
        end if;

        -- разнос переплат на новый счёт
        select max(dat_entry) into ddat_entry from ur_hist_mat where kod_mat = :kod_mat;
        if(ddat_entry is not null) then
        sg_form_peny.fk_opl(:kod_sf, ddat_entry, null, nerr, serr);
        if(nerr != 0) then
        raise_application_error(-20999,serr);
        end if;
        end if;

        end;
      </text>
    </action>
    <action name="sg_dop_plat.form_dop_deb" title="Создание документа на оплату и привязка счёта" action-type="call-plsql" timestamp="22.03.2016 15:55:40">
      <params>
        <param name="kod_sf" type="number" />
        <param name="auto_num" type="number" />
        <param name="num_deb" type="string" />
        <param name="dat_deb" type="date" />
      </params>
      <text>
        declare
        nym number;
        snum varchar2(200);
        nerr number;
        serr varchar2(200);
        begin

        if :auto_num = 0 then
        snum := :num_deb;
        end if;

        -- Соколова сказала период всегда текущий
        select kg_common.get_glob_ym_dog(kod_dog) into nym from sr_facvip where kod_sf = :kod_sf;

        sg_dop_plat.form_dop_deb(:kod_sf,nym,snum,:dat_deb,nerr,serr);

        if(nerr != 0) then
        rollback;
        raise_application_error(-20999,serr);
        end if;
        commit;
        end;
      </text>
    </action>
    <action name="sg_dop_plat.del_dop_deb" title="Удаление счёта и документа на оплату" action-type="call-plsql" timestamp="22.03.2016 15:55:40">
      <params>
        <param name="kod_sf" type="number" />
      </params>
      <text>
        declare
          nkod_deb number;
          nerr number;
          serr varchar2(200);
        begin

          select max(kod_deb) into nkod_deb from sr_facvip where kod_sf = :kod_sf;
          
          if nkod_deb is not null then
            sg_dop_plat.del_dop_deb(nkod_deb,nerr,serr);
          end if;

          if(nerr != 0) then
            rollback;
            raise_application_error(-20999,serr);
          end if;
          
          delete from sr_facvip where kod_sf = :kod_sf;
          
          commit;
        end;
      </text>
    </action>
    <action name="ur_save.p_dogplat_sf_to_deb" title="Вместо сф привязать к юр. док-ту её платежку" action-type="call-plsql" timestamp="22.03.2016 15:55:40">
      <params>
        <param name="kod_sdp" type="number" />
        <param name="kod" type="number" />
        <param name="kod_sf" type="number" />
      </params>
      <text>
        declare
          nerr number;
          serr varchar2(200);
        begin

          ur_save.p_dogplat_sf_to_deb(:kod_sdp,:kod,:kod_sf,nerr,serr);

          if(nerr != 0) then
            raise_application_error(-20999,serr);
          end if;
        end;
      </text>
    </action>
    <action name="open_ur_folders_isp_list" call="ur_folders_isp_list" action-type="dynamic-form" />
    <action name="open_ur_folders_bankrot_list" call="ur_folders_bnk_list" action-type="dynamic-form" timestamp="31.08.2018 16:27:38" />
    <action name="form_ur_folders" action-type="form" assembly="arbitrage.lib" type-name="arbitrage.lib.winforms.frmFolderView" title="Карточка 'Претензионно-исковая работа'">
      <params>
        <param name="kod_folders" type="number" />
      </params>
    </action>
    <action name="form_ur_folders_d" call="test-editor-ur_folders" title="Карточка 'Претензионно-исковая работа' 1" action-type="dynamic-form">
      <params>
        <param name="kod_folders" />
      </params>
    </action>
    <!--action name="form_kr_payer" action-type="form" assembly="asuse.Net" type-name="asuse.Net.AbonentReg2" title="Карточка абонента">
      <params>
        <param name="kodp" type="number" />
      </params>
    </action-->
    <action name="upech_doc" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="UpechDocWindow" title="Печать отчётов">
      <params>
        <param name="kod_doc" type="number" />
        <param name="kod_sdp" type="number" />
        <param name="kod_folders" type="number" />
      </params>
    </action>
    <action name="open_form_finance" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="OpenFormFinance" title="Лицевая карта">
      <params>
        <param name="dep" type="number" />
        <param name="kodp" type="number" />
      </params>
    </action>
    <action name="print_sf" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="PrintSF" title="Печать счёта">
      <params>
        <param name="kod_sf" type="number" />
      </params>
    </action>
    <action name="print_deb" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="PrintDEB" title="Печать документа на оплату">
      <params>
        <param name="kod_deb" type="number" />
      </params>
    </action>
    <action name="oplmat" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="OplMatWindow" title="Привязка переплат к искам">
      <params>
        <param name="kodp" type="number" />
      </params>
    </action>
    <action name="ur_calc_peni_doc" action-type="create-by-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="CreatePenyWindow" title="Формирование счета на процент (пени)" timestamp="13.04.2017 11:58:32">
      <params>
        <param name="kod_sdp" type="number" />
        <param name="kod" type="number" />
        <param name="kodp" type="number" />
        <param name="dep" type="number" />
        <param name="kod_dog" type="number" />
      </params>
    </action>
    <action name="ur_folders_open_route" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="CreateRouteWindow" title="Маршрут" is-ret="0" timestamp="25.11.2019 14:02:24">
      <params>
        <param name="prefix" type="string" />
        <param name="kod" type="number" />
      </params>
    </action>
    <action name="arbitrage_route_on_save" title="Событие на сохранение папки из ur_folders_main" action-type="call-plsql" timestamp="26.11.2019 22:14:34">
      <params>
        <param name="kod" type="number" />
        <param name="prefix" type="string" />
        <param name="ret_status" type="number" is-ret="1" />
        <param name="ret_errmsg" type="string" is-ret="1" />
      </params>
      <text>
        begin
			commit;
			IS_AGR_LIST_REGLAM_WRITE.p_move_document(:kod, :prefix, :ret_status, :ret_errmsg) ;
			if (:ret_status = 0) then 
				commit;
			else
				rollback;
			end if;
        end;
      </text>
    </action>
    <action name="arbitrage_show_errmsg" action-type="call-client-method" assembly="arbitrage.lib" type-name="arbitrage.lib.Run" function="ShowErrmsg" is-ret="0" title="Ошибка" timestamp="25.11.2019 14:34:42">
      <params>
        <param name="status" type="number" />
        <param name="errmsg" type="string" />
      </params>
    </action>
    <action name="arbitrage_save_folder_category" title="Событие на сохранение папки из ur_folders_main и ur_folders_isp_main (62004 в SD)" action-type="call-plsql" timestamp="31.01.2022 16:14:34">
      <params>
        <param name="p_kodp" type="number" />
        <param name="p_kod_category" type="number" />
      </params>
      <text><![CDATA[DECLARE
  p_kodp          ur_folders.kodp%type;
  p_kod_category  ur_folders.kod_category%type;
BEGIN
  IF rg_glob.esys() = 1 THEN
    p_kodp          := :p_kodp;
    p_kod_category  := :p_kod_category;
    UPDATE ur_folders
    SET    kod_category = p_kod_category
    WHERE  kodp = p_kodp AND (kod_category IS NULL OR kod_category != p_kod_category);
  END IF;
  COMMIT;
EXCEPTION
  WHEN others THEN
    ROLLBACK;
    RAISE;
END;]]></text>
    </action>
  </actions>
</root>